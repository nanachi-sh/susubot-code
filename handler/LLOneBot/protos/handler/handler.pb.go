// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: handler.proto

package handler

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponseType int32

const (
	ResponseType_RT_Message  ResponseType = 0 //消息事件
	ResponseType_RT_QQEvent  ResponseType = 1 //QQ事件
	ResponseType_RT_CmdEvent ResponseType = 2 //命令响应
	ResponseType_RT_BotEvent ResponseType = 3 //机器人事件
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "RT_Message",
		1: "RT_QQEvent",
		2: "RT_CmdEvent",
		3: "RT_BotEvent",
	}
	ResponseType_value = map[string]int32{
		"RT_Message":  0,
		"RT_QQEvent":  1,
		"RT_CmdEvent": 2,
		"RT_BotEvent": 3,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[0].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[0]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{0}
}

type MessageType int32

const (
	MessageType_MT_Private MessageType = 0 //私聊消息
	MessageType_MT_Group   MessageType = 1 //群组消息
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MT_Private",
		1: "MT_Group",
	}
	MessageType_value = map[string]int32{
		"MT_Private": 0,
		"MT_Group":   1,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{1}
}

type MessageChainType int32

const (
	MessageChainType_MCT_Text  MessageChainType = 0 //纯文本
	MessageChainType_MCT_Image MessageChainType = 1 //图片 or 动图
	MessageChainType_MCT_Voice MessageChainType = 2 //语音
	MessageChainType_MCT_Video MessageChainType = 3 //视频
	MessageChainType_MCT_At    MessageChainType = 4 //At
	MessageChainType_MCT_Reply MessageChainType = 5 //回复
)

// Enum value maps for MessageChainType.
var (
	MessageChainType_name = map[int32]string{
		0: "MCT_Text",
		1: "MCT_Image",
		2: "MCT_Voice",
		3: "MCT_Video",
		4: "MCT_At",
		5: "MCT_Reply",
	}
	MessageChainType_value = map[string]int32{
		"MCT_Text":  0,
		"MCT_Image": 1,
		"MCT_Voice": 2,
		"MCT_Video": 3,
		"MCT_At":    4,
		"MCT_Reply": 5,
	}
)

func (x MessageChainType) Enum() *MessageChainType {
	p := new(MessageChainType)
	*p = x
	return p
}

func (x MessageChainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageChainType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[2].Descriptor()
}

func (MessageChainType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[2]
}

func (x MessageChainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageChainType.Descriptor instead.
func (MessageChainType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{2}
}

type QQEventType int32

const (
	QQEventType_QQET_GroupAdd      QQEventType = 0 //群聊成员增加
	QQEventType_QQET_GroupRemove   QQEventType = 1 //群聊成员减少
	QQEventType_QQET_GroupMute     QQEventType = 2 //群聊成员被禁言
	QQEventType_QQET_GroupUnmute   QQEventType = 3 //群聊成员被解除禁言
	QQEventType_QQET_MessageRecall QQEventType = 4 //消息撤回
)

// Enum value maps for QQEventType.
var (
	QQEventType_name = map[int32]string{
		0: "QQET_GroupAdd",
		1: "QQET_GroupRemove",
		2: "QQET_GroupMute",
		3: "QQET_GroupUnmute",
		4: "QQET_MessageRecall",
	}
	QQEventType_value = map[string]int32{
		"QQET_GroupAdd":      0,
		"QQET_GroupRemove":   1,
		"QQET_GroupMute":     2,
		"QQET_GroupUnmute":   3,
		"QQET_MessageRecall": 4,
	}
)

func (x QQEventType) Enum() *QQEventType {
	p := new(QQEventType)
	*p = x
	return p
}

func (x QQEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[3].Descriptor()
}

func (QQEventType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[3]
}

func (x QQEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQEventType.Descriptor instead.
func (QQEventType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{3}
}

type QQE_GroupAddType int32

const (
	QQE_GroupAddType_GAT_Direct QQE_GroupAddType = 0 //直接加入群聊
	QQE_GroupAddType_GAT_Invite QQE_GroupAddType = 1 //群聊成员邀请加入
)

// Enum value maps for QQE_GroupAddType.
var (
	QQE_GroupAddType_name = map[int32]string{
		0: "GAT_Direct",
		1: "GAT_Invite",
	}
	QQE_GroupAddType_value = map[string]int32{
		"GAT_Direct": 0,
		"GAT_Invite": 1,
	}
)

func (x QQE_GroupAddType) Enum() *QQE_GroupAddType {
	p := new(QQE_GroupAddType)
	*p = x
	return p
}

func (x QQE_GroupAddType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQE_GroupAddType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[4].Descriptor()
}

func (QQE_GroupAddType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[4]
}

func (x QQE_GroupAddType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQE_GroupAddType.Descriptor instead.
func (QQE_GroupAddType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{4}
}

type QQE_GroupRemoveType int32

const (
	QQE_GroupRemoveType_GRT_Manual QQE_GroupRemoveType = 0 //主动退出群聊
	QQE_GroupRemoveType_GRT_Kick   QQE_GroupRemoveType = 1 //被踢出群聊
)

// Enum value maps for QQE_GroupRemoveType.
var (
	QQE_GroupRemoveType_name = map[int32]string{
		0: "GRT_Manual",
		1: "GRT_Kick",
	}
	QQE_GroupRemoveType_value = map[string]int32{
		"GRT_Manual": 0,
		"GRT_Kick":   1,
	}
)

func (x QQE_GroupRemoveType) Enum() *QQE_GroupRemoveType {
	p := new(QQE_GroupRemoveType)
	*p = x
	return p
}

func (x QQE_GroupRemoveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQE_GroupRemoveType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[5].Descriptor()
}

func (QQE_GroupRemoveType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[5]
}

func (x QQE_GroupRemoveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQE_GroupRemoveType.Descriptor instead.
func (QQE_GroupRemoveType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{5}
}

type QQE_MessageRecallType int32

const (
	QQE_MessageRecallType_MRT_Group   QQE_MessageRecallType = 0 //群聊消息撤回
	QQE_MessageRecallType_MRT_Private QQE_MessageRecallType = 1 //私聊消息撤回
)

// Enum value maps for QQE_MessageRecallType.
var (
	QQE_MessageRecallType_name = map[int32]string{
		0: "MRT_Group",
		1: "MRT_Private",
	}
	QQE_MessageRecallType_value = map[string]int32{
		"MRT_Group":   0,
		"MRT_Private": 1,
	}
)

func (x QQE_MessageRecallType) Enum() *QQE_MessageRecallType {
	p := new(QQE_MessageRecallType)
	*p = x
	return p
}

func (x QQE_MessageRecallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQE_MessageRecallType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[6].Descriptor()
}

func (QQE_MessageRecallType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[6]
}

func (x QQE_MessageRecallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQE_MessageRecallType.Descriptor instead.
func (QQE_MessageRecallType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{6}
}

type QQE_MRT_GroupType int32

const (
	QQE_MRT_GroupType_MRTGT_Manual QQE_MRT_GroupType = 0 //主动撤回消息
	QQE_MRT_GroupType_MRTGT_Other  QQE_MRT_GroupType = 1 //被撤回消息
)

// Enum value maps for QQE_MRT_GroupType.
var (
	QQE_MRT_GroupType_name = map[int32]string{
		0: "MRTGT_Manual",
		1: "MRTGT_Other",
	}
	QQE_MRT_GroupType_value = map[string]int32{
		"MRTGT_Manual": 0,
		"MRTGT_Other":  1,
	}
)

func (x QQE_MRT_GroupType) Enum() *QQE_MRT_GroupType {
	p := new(QQE_MRT_GroupType)
	*p = x
	return p
}

func (x QQE_MRT_GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QQE_MRT_GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[7].Descriptor()
}

func (QQE_MRT_GroupType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[7]
}

func (x QQE_MRT_GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QQE_MRT_GroupType.Descriptor instead.
func (QQE_MRT_GroupType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{7}
}

type CmdEventType int32

const (
	CmdEventType_CET_GetGroupInfo       CmdEventType = 0 //获取指定群聊信息
	CmdEventType_CET_GetGroupMemberInfo CmdEventType = 1 //获取指定群聊指定成员信息
	CmdEventType_CET_GetMessage         CmdEventType = 2 //获取消息事件(通过MessageId)
	CmdEventType_CET_GetFriendList      CmdEventType = 3 //获取所有好友信息
)

// Enum value maps for CmdEventType.
var (
	CmdEventType_name = map[int32]string{
		0: "CET_GetGroupInfo",
		1: "CET_GetGroupMemberInfo",
		2: "CET_GetMessage",
		3: "CET_GetFriendList",
	}
	CmdEventType_value = map[string]int32{
		"CET_GetGroupInfo":       0,
		"CET_GetGroupMemberInfo": 1,
		"CET_GetMessage":         2,
		"CET_GetFriendList":      3,
	}
)

func (x CmdEventType) Enum() *CmdEventType {
	p := new(CmdEventType)
	*p = x
	return p
}

func (x CmdEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[8].Descriptor()
}

func (CmdEventType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[8]
}

func (x CmdEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdEventType.Descriptor instead.
func (CmdEventType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{8}
}

type BotEventType int32

const (
	BotEventType_BET_HeartPacket BotEventType = 0
	BotEventType_BET_Connected   BotEventType = 1
)

// Enum value maps for BotEventType.
var (
	BotEventType_name = map[int32]string{
		0: "BET_HeartPacket",
		1: "BET_Connected",
	}
	BotEventType_value = map[string]int32{
		"BET_HeartPacket": 0,
		"BET_Connected":   1,
	}
)

func (x BotEventType) Enum() *BotEventType {
	p := new(BotEventType)
	*p = x
	return p
}

func (x BotEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[9].Descriptor()
}

func (BotEventType) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[9]
}

func (x BotEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotEventType.Descriptor instead.
func (BotEventType) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{9}
}

type GroupRole int32

const (
	GroupRole_GR_Member GroupRole = 0 //普通成员
	GroupRole_GR_Admin  GroupRole = 1 //管理员
	GroupRole_GR_Owner  GroupRole = 2 //群主
)

// Enum value maps for GroupRole.
var (
	GroupRole_name = map[int32]string{
		0: "GR_Member",
		1: "GR_Admin",
		2: "GR_Owner",
	}
	GroupRole_value = map[string]int32{
		"GR_Member": 0,
		"GR_Admin":  1,
		"GR_Owner":  2,
	}
)

func (x GroupRole) Enum() *GroupRole {
	p := new(GroupRole)
	*p = x
	return p
}

func (x GroupRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupRole) Descriptor() protoreflect.EnumDescriptor {
	return file_handler_proto_enumTypes[10].Descriptor()
}

func (GroupRole) Type() protoreflect.EnumType {
	return &file_handler_proto_enumTypes[10]
}

func (x GroupRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupRole.Descriptor instead.
func (GroupRole) EnumDescriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{10}
}

type MessageChainObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *MessageChainType `protobuf:"varint,1,opt,name=Type,proto3,enum=MessageChainType,oneof" json:"Type,omitempty"`
	Text  *MC_Text          `protobuf:"bytes,2,opt,name=Text,proto3,oneof" json:"Text,omitempty"`
	Image *MC_Image         `protobuf:"bytes,3,opt,name=Image,proto3,oneof" json:"Image,omitempty"`
	Voice *MC_Voice         `protobuf:"bytes,4,opt,name=Voice,proto3,oneof" json:"Voice,omitempty"`
	Video *MC_Video         `protobuf:"bytes,5,opt,name=Video,proto3,oneof" json:"Video,omitempty"`
	At    *MC_At            `protobuf:"bytes,6,opt,name=At,proto3,oneof" json:"At,omitempty"`
	Reply *MC_Reply         `protobuf:"bytes,7,opt,name=Reply,proto3,oneof" json:"Reply,omitempty"`
}

func (x *MessageChainObject) Reset() {
	*x = MessageChainObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageChainObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageChainObject) ProtoMessage() {}

func (x *MessageChainObject) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageChainObject.ProtoReflect.Descriptor instead.
func (*MessageChainObject) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{0}
}

func (x *MessageChainObject) GetType() MessageChainType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MessageChainType_MCT_Text
}

func (x *MessageChainObject) GetText() *MC_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MessageChainObject) GetImage() *MC_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MessageChainObject) GetVoice() *MC_Voice {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *MessageChainObject) GetVideo() *MC_Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *MessageChainObject) GetAt() *MC_At {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *MessageChainObject) GetReply() *MC_Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type MC_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *MC_Text) Reset() {
	*x = MC_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MC_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MC_Text) ProtoMessage() {}

func (x *MC_Text) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MC_Text.ProtoReflect.Descriptor instead.
func (*MC_Text) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{1}
}

func (x *MC_Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type MC_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *MC_Image) Reset() {
	*x = MC_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MC_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MC_Image) ProtoMessage() {}

func (x *MC_Image) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MC_Image.ProtoReflect.Descriptor instead.
func (*MC_Image) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{2}
}

func (x *MC_Image) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type MC_Voice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *MC_Voice) Reset() {
	*x = MC_Voice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MC_Voice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MC_Voice) ProtoMessage() {}

func (x *MC_Voice) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MC_Voice.ProtoReflect.Descriptor instead.
func (*MC_Voice) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{3}
}

func (x *MC_Voice) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type MC_Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (x *MC_Video) Reset() {
	*x = MC_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MC_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MC_Video) ProtoMessage() {}

func (x *MC_Video) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MC_Video.ProtoReflect.Descriptor instead.
func (*MC_Video) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{4}
}

func (x *MC_Video) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type MC_At struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId string `protobuf:"bytes,1,opt,name=TargetId,proto3" json:"TargetId,omitempty"`
}

func (x *MC_At) Reset() {
	*x = MC_At{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MC_At) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MC_At) ProtoMessage() {}

func (x *MC_At) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MC_At.ProtoReflect.Descriptor instead.
func (*MC_At) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{5}
}

func (x *MC_At) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

type MC_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
}

func (x *MC_Reply) Reset() {
	*x = MC_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MC_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MC_Reply) ProtoMessage() {}

func (x *MC_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MC_Reply.ProtoReflect.Descriptor instead.
func (*MC_Reply) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{6}
}

func (x *MC_Reply) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type R_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=MessageType,oneof" json:"Type,omitempty"`
	Private *M_Private   `protobuf:"bytes,2,opt,name=Private,proto3,oneof" json:"Private,omitempty"`
	Group   *M_Group     `protobuf:"bytes,3,opt,name=Group,proto3,oneof" json:"Group,omitempty"`
}

func (x *R_Message) Reset() {
	*x = R_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *R_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*R_Message) ProtoMessage() {}

func (x *R_Message) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use R_Message.ProtoReflect.Descriptor instead.
func (*R_Message) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{7}
}

func (x *R_Message) GetType() MessageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MessageType_MT_Private
}

func (x *R_Message) GetPrivate() *M_Private {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *R_Message) GetGroup() *M_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type M_Private struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId     string                `protobuf:"bytes,1,opt,name=SenderId,proto3" json:"SenderId,omitempty"`
	SenderName   *string               `protobuf:"bytes,2,opt,name=SenderName,proto3,oneof" json:"SenderName,omitempty"`
	MessageId    string                `protobuf:"bytes,3,opt,name=MessageId,proto3" json:"MessageId,omitempty"` //机器人核心内Id
	Timestamp    int64                 `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId        string                `protobuf:"bytes,5,opt,name=BotId,proto3" json:"BotId,omitempty"` //机器人QQ号
	MessageChain []*MessageChainObject `protobuf:"bytes,6,rep,name=MessageChain,proto3" json:"MessageChain,omitempty"`
}

func (x *M_Private) Reset() {
	*x = M_Private{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M_Private) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M_Private) ProtoMessage() {}

func (x *M_Private) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M_Private.ProtoReflect.Descriptor instead.
func (*M_Private) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{8}
}

func (x *M_Private) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *M_Private) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *M_Private) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *M_Private) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *M_Private) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *M_Private) GetMessageChain() []*MessageChainObject {
	if x != nil {
		return x.MessageChain
	}
	return nil
}

type M_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId     string                `protobuf:"bytes,1,opt,name=SenderId,proto3" json:"SenderId,omitempty"`
	SenderName   *string               `protobuf:"bytes,2,opt,name=SenderName,proto3,oneof" json:"SenderName,omitempty"`
	MessageId    string                `protobuf:"bytes,3,opt,name=MessageId,proto3" json:"MessageId,omitempty"` //机器人核心内Id
	Timestamp    int64                 `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId        string                `protobuf:"bytes,5,opt,name=BotId,proto3" json:"BotId,omitempty"` //机器人QQ号
	GroupId      string                `protobuf:"bytes,6,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	SenderRole   *GroupRole            `protobuf:"varint,7,opt,name=SenderRole,proto3,enum=GroupRole,oneof" json:"SenderRole,omitempty"`
	BotRole      *GroupRole            `protobuf:"varint,8,opt,name=BotRole,proto3,enum=GroupRole,oneof" json:"BotRole,omitempty"`
	MessageChain []*MessageChainObject `protobuf:"bytes,9,rep,name=MessageChain,proto3" json:"MessageChain,omitempty"`
}

func (x *M_Group) Reset() {
	*x = M_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M_Group) ProtoMessage() {}

func (x *M_Group) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M_Group.ProtoReflect.Descriptor instead.
func (*M_Group) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{9}
}

func (x *M_Group) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *M_Group) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *M_Group) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *M_Group) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *M_Group) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *M_Group) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *M_Group) GetSenderRole() GroupRole {
	if x != nil && x.SenderRole != nil {
		return *x.SenderRole
	}
	return GroupRole_GR_Member
}

func (x *M_Group) GetBotRole() GroupRole {
	if x != nil && x.BotRole != nil {
		return *x.BotRole
	}
	return GroupRole_GR_Member
}

func (x *M_Group) GetMessageChain() []*MessageChainObject {
	if x != nil {
		return x.MessageChain
	}
	return nil
}

type R_QQEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *QQEventType       `protobuf:"varint,1,opt,name=Type,proto3,enum=QQEventType,oneof" json:"Type,omitempty"`
	GroupAdd      *QQE_GroupAdd      `protobuf:"bytes,2,opt,name=GroupAdd,proto3,oneof" json:"GroupAdd,omitempty"`
	GroupRemove   *QQE_GroupRemove   `protobuf:"bytes,3,opt,name=GroupRemove,proto3,oneof" json:"GroupRemove,omitempty"`
	GroupMute     *QQE_GroupMute     `protobuf:"bytes,4,opt,name=GroupMute,proto3,oneof" json:"GroupMute,omitempty"`
	GroupUnmute   *QQE_GroupUnmute   `protobuf:"bytes,5,opt,name=GroupUnmute,proto3,oneof" json:"GroupUnmute,omitempty"`
	MessageRecall *QQE_MessageRecall `protobuf:"bytes,6,opt,name=MessageRecall,proto3,oneof" json:"MessageRecall,omitempty"`
}

func (x *R_QQEvent) Reset() {
	*x = R_QQEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *R_QQEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*R_QQEvent) ProtoMessage() {}

func (x *R_QQEvent) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use R_QQEvent.ProtoReflect.Descriptor instead.
func (*R_QQEvent) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{10}
}

func (x *R_QQEvent) GetType() QQEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return QQEventType_QQET_GroupAdd
}

func (x *R_QQEvent) GetGroupAdd() *QQE_GroupAdd {
	if x != nil {
		return x.GroupAdd
	}
	return nil
}

func (x *R_QQEvent) GetGroupRemove() *QQE_GroupRemove {
	if x != nil {
		return x.GroupRemove
	}
	return nil
}

func (x *R_QQEvent) GetGroupMute() *QQE_GroupMute {
	if x != nil {
		return x.GroupMute
	}
	return nil
}

func (x *R_QQEvent) GetGroupUnmute() *QQE_GroupUnmute {
	if x != nil {
		return x.GroupUnmute
	}
	return nil
}

func (x *R_QQEvent) GetMessageRecall() *QQE_MessageRecall {
	if x != nil {
		return x.MessageRecall
	}
	return nil
}

type QQE_GroupAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *QQE_GroupAddType `protobuf:"varint,1,opt,name=Type,proto3,enum=QQE_GroupAddType,oneof" json:"Type,omitempty"`
	Direct *GA_Direct        `protobuf:"bytes,2,opt,name=Direct,proto3,oneof" json:"Direct,omitempty"`
	Invite *GA_Invite        `protobuf:"bytes,3,opt,name=Invite,proto3,oneof" json:"Invite,omitempty"`
}

func (x *QQE_GroupAdd) Reset() {
	*x = QQE_GroupAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQE_GroupAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQE_GroupAdd) ProtoMessage() {}

func (x *QQE_GroupAdd) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQE_GroupAdd.ProtoReflect.Descriptor instead.
func (*QQE_GroupAdd) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{11}
}

func (x *QQE_GroupAdd) GetType() QQE_GroupAddType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return QQE_GroupAddType_GAT_Direct
}

func (x *QQE_GroupAdd) GetDirect() *GA_Direct {
	if x != nil {
		return x.Direct
	}
	return nil
}

func (x *QQE_GroupAdd) GetInvite() *GA_Invite {
	if x != nil {
		return x.Invite
	}
	return nil
}

type GA_Direct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinerId     string  `protobuf:"bytes,1,opt,name=JoinerId,proto3" json:"JoinerId,omitempty"` //新加入成员Id
	JoinerName   *string `protobuf:"bytes,2,opt,name=JoinerName,proto3,oneof" json:"JoinerName,omitempty"`
	GroupId      string  `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Timestamp    int64   `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId        string  `protobuf:"bytes,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
	ApproverId   string  `protobuf:"bytes,6,opt,name=ApproverId,proto3" json:"ApproverId,omitempty"`
	ApproverName *string `protobuf:"bytes,7,opt,name=ApproverName,proto3,oneof" json:"ApproverName,omitempty"`
}

func (x *GA_Direct) Reset() {
	*x = GA_Direct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GA_Direct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GA_Direct) ProtoMessage() {}

func (x *GA_Direct) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GA_Direct.ProtoReflect.Descriptor instead.
func (*GA_Direct) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{12}
}

func (x *GA_Direct) GetJoinerId() string {
	if x != nil {
		return x.JoinerId
	}
	return ""
}

func (x *GA_Direct) GetJoinerName() string {
	if x != nil && x.JoinerName != nil {
		return *x.JoinerName
	}
	return ""
}

func (x *GA_Direct) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GA_Direct) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GA_Direct) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *GA_Direct) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

func (x *GA_Direct) GetApproverName() string {
	if x != nil && x.ApproverName != nil {
		return *x.ApproverName
	}
	return ""
}

type GA_Invite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinerId     string  `protobuf:"bytes,1,opt,name=JoinerId,proto3" json:"JoinerId,omitempty"` //新加入成员Id
	JoinerName   *string `protobuf:"bytes,2,opt,name=JoinerName,proto3,oneof" json:"JoinerName,omitempty"`
	GroupId      string  `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Timestamp    int64   `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId        string  `protobuf:"bytes,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
	InviterId    string  `protobuf:"bytes,6,opt,name=InviterId,proto3" json:"InviterId,omitempty"` //邀请者Id
	InviterName  *string `protobuf:"bytes,7,opt,name=InviterName,proto3,oneof" json:"InviterName,omitempty"`
	ApproverId   string  `protobuf:"bytes,8,opt,name=ApproverId,proto3" json:"ApproverId,omitempty"` //审核者Id
	ApproverName *string `protobuf:"bytes,9,opt,name=ApproverName,proto3,oneof" json:"ApproverName,omitempty"`
}

func (x *GA_Invite) Reset() {
	*x = GA_Invite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GA_Invite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GA_Invite) ProtoMessage() {}

func (x *GA_Invite) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GA_Invite.ProtoReflect.Descriptor instead.
func (*GA_Invite) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{13}
}

func (x *GA_Invite) GetJoinerId() string {
	if x != nil {
		return x.JoinerId
	}
	return ""
}

func (x *GA_Invite) GetJoinerName() string {
	if x != nil && x.JoinerName != nil {
		return *x.JoinerName
	}
	return ""
}

func (x *GA_Invite) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GA_Invite) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GA_Invite) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *GA_Invite) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

func (x *GA_Invite) GetInviterName() string {
	if x != nil && x.InviterName != nil {
		return *x.InviterName
	}
	return ""
}

func (x *GA_Invite) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

func (x *GA_Invite) GetApproverName() string {
	if x != nil && x.ApproverName != nil {
		return *x.ApproverName
	}
	return ""
}

type QQE_GroupRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *QQE_GroupRemoveType `protobuf:"varint,1,opt,name=Type,proto3,enum=QQE_GroupRemoveType,oneof" json:"Type,omitempty"`
	Manual *GR_Manual           `protobuf:"bytes,2,opt,name=Manual,proto3,oneof" json:"Manual,omitempty"`
	Kick   *GR_Kick             `protobuf:"bytes,3,opt,name=Kick,proto3,oneof" json:"Kick,omitempty"`
}

func (x *QQE_GroupRemove) Reset() {
	*x = QQE_GroupRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQE_GroupRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQE_GroupRemove) ProtoMessage() {}

func (x *QQE_GroupRemove) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQE_GroupRemove.ProtoReflect.Descriptor instead.
func (*QQE_GroupRemove) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{14}
}

func (x *QQE_GroupRemove) GetType() QQE_GroupRemoveType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return QQE_GroupRemoveType_GRT_Manual
}

func (x *QQE_GroupRemove) GetManual() *GR_Manual {
	if x != nil {
		return x.Manual
	}
	return nil
}

func (x *QQE_GroupRemove) GetKick() *GR_Kick {
	if x != nil {
		return x.Kick
	}
	return nil
}

type GR_Manual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuiterId   string  `protobuf:"bytes,1,opt,name=QuiterId,proto3" json:"QuiterId,omitempty"` //退出者Id
	QuiterName *string `protobuf:"bytes,2,opt,name=QuiterName,proto3,oneof" json:"QuiterName,omitempty"`
	GroupId    string  `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Timestamp  int64   `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId      string  `protobuf:"bytes,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (x *GR_Manual) Reset() {
	*x = GR_Manual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GR_Manual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GR_Manual) ProtoMessage() {}

func (x *GR_Manual) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GR_Manual.ProtoReflect.Descriptor instead.
func (*GR_Manual) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{15}
}

func (x *GR_Manual) GetQuiterId() string {
	if x != nil {
		return x.QuiterId
	}
	return ""
}

func (x *GR_Manual) GetQuiterName() string {
	if x != nil && x.QuiterName != nil {
		return *x.QuiterName
	}
	return ""
}

func (x *GR_Manual) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GR_Manual) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GR_Manual) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

type GR_Kick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId     string  `protobuf:"bytes,1,opt,name=TargetId,proto3" json:"TargetId,omitempty"` //被踢出者Id
	TargetName   *string `protobuf:"bytes,2,opt,name=TargetName,proto3,oneof" json:"TargetName,omitempty"`
	GroupId      string  `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Timestamp    int64   `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId        string  `protobuf:"bytes,5,opt,name=BotId,proto3" json:"BotId,omitempty"`
	OperatorId   string  `protobuf:"bytes,6,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	OperatorName *string `protobuf:"bytes,7,opt,name=OperatorName,proto3,oneof" json:"OperatorName,omitempty"`
}

func (x *GR_Kick) Reset() {
	*x = GR_Kick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GR_Kick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GR_Kick) ProtoMessage() {}

func (x *GR_Kick) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GR_Kick.ProtoReflect.Descriptor instead.
func (*GR_Kick) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{16}
}

func (x *GR_Kick) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *GR_Kick) GetTargetName() string {
	if x != nil && x.TargetName != nil {
		return *x.TargetName
	}
	return ""
}

func (x *GR_Kick) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GR_Kick) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GR_Kick) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *GR_Kick) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *GR_Kick) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

type QQE_GroupMute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId     string  `protobuf:"bytes,1,opt,name=TargetId,proto3" json:"TargetId,omitempty"`
	TargetName   *string `protobuf:"bytes,2,opt,name=TargetName,proto3,oneof" json:"TargetName,omitempty"`
	Timestamp    int64   `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	OperatorId   string  `protobuf:"bytes,4,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	OperatorName *string `protobuf:"bytes,5,opt,name=OperatorName,proto3,oneof" json:"OperatorName,omitempty"`
	Duration     int32   `protobuf:"varint,6,opt,name=Duration,proto3" json:"Duration,omitempty"`
	GroupId      string  `protobuf:"bytes,7,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	BotId        string  `protobuf:"bytes,8,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (x *QQE_GroupMute) Reset() {
	*x = QQE_GroupMute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQE_GroupMute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQE_GroupMute) ProtoMessage() {}

func (x *QQE_GroupMute) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQE_GroupMute.ProtoReflect.Descriptor instead.
func (*QQE_GroupMute) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{17}
}

func (x *QQE_GroupMute) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *QQE_GroupMute) GetTargetName() string {
	if x != nil && x.TargetName != nil {
		return *x.TargetName
	}
	return ""
}

func (x *QQE_GroupMute) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QQE_GroupMute) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *QQE_GroupMute) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *QQE_GroupMute) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *QQE_GroupMute) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *QQE_GroupMute) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

type QQE_GroupUnmute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId     string  `protobuf:"bytes,1,opt,name=TargetId,proto3" json:"TargetId,omitempty"`
	TargetName   *string `protobuf:"bytes,2,opt,name=TargetName,proto3,oneof" json:"TargetName,omitempty"`
	Timestamp    int64   `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	OperatorId   string  `protobuf:"bytes,4,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	OperatorName *string `protobuf:"bytes,5,opt,name=OperatorName,proto3,oneof" json:"OperatorName,omitempty"`
	GroupId      string  `protobuf:"bytes,6,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	BotId        string  `protobuf:"bytes,7,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (x *QQE_GroupUnmute) Reset() {
	*x = QQE_GroupUnmute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQE_GroupUnmute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQE_GroupUnmute) ProtoMessage() {}

func (x *QQE_GroupUnmute) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQE_GroupUnmute.ProtoReflect.Descriptor instead.
func (*QQE_GroupUnmute) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{18}
}

func (x *QQE_GroupUnmute) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *QQE_GroupUnmute) GetTargetName() string {
	if x != nil && x.TargetName != nil {
		return *x.TargetName
	}
	return ""
}

func (x *QQE_GroupUnmute) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QQE_GroupUnmute) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *QQE_GroupUnmute) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *QQE_GroupUnmute) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *QQE_GroupUnmute) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

type QQE_MessageRecall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *QQE_MessageRecallType `protobuf:"varint,1,opt,name=Type,proto3,enum=QQE_MessageRecallType,oneof" json:"Type,omitempty"`
	Group   *MR_Group              `protobuf:"bytes,2,opt,name=Group,proto3,oneof" json:"Group,omitempty"`
	Private *MR_Private            `protobuf:"bytes,3,opt,name=Private,proto3,oneof" json:"Private,omitempty"`
}

func (x *QQE_MessageRecall) Reset() {
	*x = QQE_MessageRecall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QQE_MessageRecall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QQE_MessageRecall) ProtoMessage() {}

func (x *QQE_MessageRecall) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QQE_MessageRecall.ProtoReflect.Descriptor instead.
func (*QQE_MessageRecall) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{19}
}

func (x *QQE_MessageRecall) GetType() QQE_MessageRecallType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return QQE_MessageRecallType_MRT_Group
}

func (x *QQE_MessageRecall) GetGroup() *MR_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *QQE_MessageRecall) GetPrivate() *MR_Private {
	if x != nil {
		return x.Private
	}
	return nil
}

type MR_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId     string  `protobuf:"bytes,1,opt,name=TargetId,proto3" json:"TargetId,omitempty"`
	TargetName   *string `protobuf:"bytes,2,opt,name=TargetName,proto3,oneof" json:"TargetName,omitempty"`
	Timestamp    int64   `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	OperatorId   string  `protobuf:"bytes,4,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	OperatorName *string `protobuf:"bytes,5,opt,name=OperatorName,proto3,oneof" json:"OperatorName,omitempty"`
	GroupId      string  `protobuf:"bytes,6,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	BotId        string  `protobuf:"bytes,7,opt,name=BotId,proto3" json:"BotId,omitempty"`
	MessageId    string  `protobuf:"bytes,8,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
}

func (x *MR_Group) Reset() {
	*x = MR_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MR_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MR_Group) ProtoMessage() {}

func (x *MR_Group) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MR_Group.ProtoReflect.Descriptor instead.
func (*MR_Group) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{20}
}

func (x *MR_Group) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *MR_Group) GetTargetName() string {
	if x != nil && x.TargetName != nil {
		return *x.TargetName
	}
	return ""
}

func (x *MR_Group) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MR_Group) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *MR_Group) GetOperatorName() string {
	if x != nil && x.OperatorName != nil {
		return *x.OperatorName
	}
	return ""
}

func (x *MR_Group) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *MR_Group) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *MR_Group) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type MR_Private struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecallerId   string  `protobuf:"bytes,1,opt,name=RecallerId,proto3" json:"RecallerId,omitempty"`
	RecallerName *string `protobuf:"bytes,2,opt,name=RecallerName,proto3,oneof" json:"RecallerName,omitempty"`
	Timestamp    int64   `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId        string  `protobuf:"bytes,4,opt,name=BotId,proto3" json:"BotId,omitempty"`
	MessageId    string  `protobuf:"bytes,5,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
}

func (x *MR_Private) Reset() {
	*x = MR_Private{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MR_Private) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MR_Private) ProtoMessage() {}

func (x *MR_Private) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MR_Private.ProtoReflect.Descriptor instead.
func (*MR_Private) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{21}
}

func (x *MR_Private) GetRecallerId() string {
	if x != nil {
		return x.RecallerId
	}
	return ""
}

func (x *MR_Private) GetRecallerName() string {
	if x != nil && x.RecallerName != nil {
		return *x.RecallerName
	}
	return ""
}

func (x *MR_Private) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MR_Private) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *MR_Private) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type R_CmdEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               *CmdEventType          `protobuf:"varint,1,opt,name=Type,proto3,enum=CmdEventType,oneof" json:"Type,omitempty"`
	GetGroupInfo       *CE_GetGroupInfo       `protobuf:"bytes,2,opt,name=GetGroupInfo,proto3,oneof" json:"GetGroupInfo,omitempty"`
	GetGroupMemberInfo *CE_GetGroupMemberInfo `protobuf:"bytes,3,opt,name=GetGroupMemberInfo,proto3,oneof" json:"GetGroupMemberInfo,omitempty"`
	GetMessage         *CE_GetMessage         `protobuf:"bytes,4,opt,name=GetMessage,proto3,oneof" json:"GetMessage,omitempty"`
	GetFriendList      *CE_GetFriendList      `protobuf:"bytes,5,opt,name=GetFriendList,proto3,oneof" json:"GetFriendList,omitempty"`
}

func (x *R_CmdEvent) Reset() {
	*x = R_CmdEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *R_CmdEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*R_CmdEvent) ProtoMessage() {}

func (x *R_CmdEvent) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use R_CmdEvent.ProtoReflect.Descriptor instead.
func (*R_CmdEvent) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{22}
}

func (x *R_CmdEvent) GetType() CmdEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CmdEventType_CET_GetGroupInfo
}

func (x *R_CmdEvent) GetGetGroupInfo() *CE_GetGroupInfo {
	if x != nil {
		return x.GetGroupInfo
	}
	return nil
}

func (x *R_CmdEvent) GetGetGroupMemberInfo() *CE_GetGroupMemberInfo {
	if x != nil {
		return x.GetGroupMemberInfo
	}
	return nil
}

func (x *R_CmdEvent) GetGetMessage() *CE_GetMessage {
	if x != nil {
		return x.GetMessage
	}
	return nil
}

func (x *R_CmdEvent) GetGetFriendList() *CE_GetFriendList {
	if x != nil {
		return x.GetFriendList
	}
	return nil
}

type CE_GetGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OK        bool    `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Retcode   *string `protobuf:"bytes,2,opt,name=Retcode,proto3,oneof" json:"Retcode,omitempty"`
	GroupId   string  `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	GroupName string  `protobuf:"bytes,4,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	MemberMax int32   `protobuf:"varint,5,opt,name=MemberMax,proto3" json:"MemberMax,omitempty"`
	MemberNow int32   `protobuf:"varint,6,opt,name=MemberNow,proto3" json:"MemberNow,omitempty"`
}

func (x *CE_GetGroupInfo) Reset() {
	*x = CE_GetGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CE_GetGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CE_GetGroupInfo) ProtoMessage() {}

func (x *CE_GetGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CE_GetGroupInfo.ProtoReflect.Descriptor instead.
func (*CE_GetGroupInfo) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{23}
}

func (x *CE_GetGroupInfo) GetOK() bool {
	if x != nil {
		return x.OK
	}
	return false
}

func (x *CE_GetGroupInfo) GetRetcode() string {
	if x != nil && x.Retcode != nil {
		return *x.Retcode
	}
	return ""
}

func (x *CE_GetGroupInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CE_GetGroupInfo) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CE_GetGroupInfo) GetMemberMax() int32 {
	if x != nil {
		return x.MemberMax
	}
	return 0
}

func (x *CE_GetGroupInfo) GetMemberNow() int32 {
	if x != nil {
		return x.MemberNow
	}
	return 0
}

type CE_GetGroupMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OK             bool      `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Retcode        *string   `protobuf:"bytes,2,opt,name=Retcode,proto3,oneof" json:"Retcode,omitempty"`
	GroupId        string    `protobuf:"bytes,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	UserId         string    `protobuf:"bytes,4,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName       string    `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Card           *string   `protobuf:"bytes,6,opt,name=Card,proto3,oneof" json:"Card,omitempty"` //群内自定义名称
	JoinTime       *int64    `protobuf:"varint,7,opt,name=JoinTime,proto3,oneof" json:"JoinTime,omitempty"`
	LastActiveTime *int64    `protobuf:"varint,8,opt,name=LastActiveTime,proto3,oneof" json:"LastActiveTime,omitempty"` //上次操作时间
	LastSentTime   *int64    `protobuf:"varint,9,opt,name=LastSentTime,proto3,oneof" json:"LastSentTime,omitempty"`     //上次发送信息时间
	Role           GroupRole `protobuf:"varint,10,opt,name=Role,proto3,enum=GroupRole" json:"Role,omitempty"`
}

func (x *CE_GetGroupMemberInfo) Reset() {
	*x = CE_GetGroupMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CE_GetGroupMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CE_GetGroupMemberInfo) ProtoMessage() {}

func (x *CE_GetGroupMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CE_GetGroupMemberInfo.ProtoReflect.Descriptor instead.
func (*CE_GetGroupMemberInfo) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{24}
}

func (x *CE_GetGroupMemberInfo) GetOK() bool {
	if x != nil {
		return x.OK
	}
	return false
}

func (x *CE_GetGroupMemberInfo) GetRetcode() string {
	if x != nil && x.Retcode != nil {
		return *x.Retcode
	}
	return ""
}

func (x *CE_GetGroupMemberInfo) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *CE_GetGroupMemberInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CE_GetGroupMemberInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CE_GetGroupMemberInfo) GetCard() string {
	if x != nil && x.Card != nil {
		return *x.Card
	}
	return ""
}

func (x *CE_GetGroupMemberInfo) GetJoinTime() int64 {
	if x != nil && x.JoinTime != nil {
		return *x.JoinTime
	}
	return 0
}

func (x *CE_GetGroupMemberInfo) GetLastActiveTime() int64 {
	if x != nil && x.LastActiveTime != nil {
		return *x.LastActiveTime
	}
	return 0
}

func (x *CE_GetGroupMemberInfo) GetLastSentTime() int64 {
	if x != nil && x.LastSentTime != nil {
		return *x.LastSentTime
	}
	return 0
}

func (x *CE_GetGroupMemberInfo) GetRole() GroupRole {
	if x != nil {
		return x.Role
	}
	return GroupRole_GR_Member
}

type CE_GetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OK      bool        `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Retcode *string     `protobuf:"bytes,2,opt,name=Retcode,proto3,oneof" json:"Retcode,omitempty"`
	Message *GM_Message `protobuf:"bytes,3,opt,name=Message,proto3,oneof" json:"Message,omitempty"`
}

func (x *CE_GetMessage) Reset() {
	*x = CE_GetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CE_GetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CE_GetMessage) ProtoMessage() {}

func (x *CE_GetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CE_GetMessage.ProtoReflect.Descriptor instead.
func (*CE_GetMessage) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{25}
}

func (x *CE_GetMessage) GetOK() bool {
	if x != nil {
		return x.OK
	}
	return false
}

func (x *CE_GetMessage) GetRetcode() string {
	if x != nil && x.Retcode != nil {
		return *x.Retcode
	}
	return ""
}

func (x *CE_GetMessage) GetMessage() *GM_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type GM_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *MessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=MessageType,oneof" json:"Type,omitempty"`
	Private *GMM_Private `protobuf:"bytes,2,opt,name=Private,proto3,oneof" json:"Private,omitempty"`
	Group   *GMM_Group   `protobuf:"bytes,3,opt,name=Group,proto3,oneof" json:"Group,omitempty"`
}

func (x *GM_Message) Reset() {
	*x = GM_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GM_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GM_Message) ProtoMessage() {}

func (x *GM_Message) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GM_Message.ProtoReflect.Descriptor instead.
func (*GM_Message) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{26}
}

func (x *GM_Message) GetType() MessageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MessageType_MT_Private
}

func (x *GM_Message) GetPrivate() *GMM_Private {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *GM_Message) GetGroup() *GMM_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type GMM_Private struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId     string                `protobuf:"bytes,1,opt,name=SenderId,proto3" json:"SenderId,omitempty"`
	SenderName   *string               `protobuf:"bytes,2,opt,name=SenderName,proto3,oneof" json:"SenderName,omitempty"`
	MessageId    string                `protobuf:"bytes,3,opt,name=MessageId,proto3" json:"MessageId,omitempty"` //机器人核心内Id
	Timestamp    int64                 `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId        string                `protobuf:"bytes,5,opt,name=BotId,proto3" json:"BotId,omitempty"` //机器人QQ号
	MessageChain []*MessageChainObject `protobuf:"bytes,6,rep,name=MessageChain,proto3" json:"MessageChain,omitempty"`
}

func (x *GMM_Private) Reset() {
	*x = GMM_Private{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GMM_Private) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GMM_Private) ProtoMessage() {}

func (x *GMM_Private) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GMM_Private.ProtoReflect.Descriptor instead.
func (*GMM_Private) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{27}
}

func (x *GMM_Private) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *GMM_Private) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *GMM_Private) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *GMM_Private) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GMM_Private) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *GMM_Private) GetMessageChain() []*MessageChainObject {
	if x != nil {
		return x.MessageChain
	}
	return nil
}

type GMM_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderId     string                `protobuf:"bytes,1,opt,name=SenderId,proto3" json:"SenderId,omitempty"`
	SenderName   *string               `protobuf:"bytes,2,opt,name=SenderName,proto3,oneof" json:"SenderName,omitempty"`
	MessageId    string                `protobuf:"bytes,3,opt,name=MessageId,proto3" json:"MessageId,omitempty"` //机器人核心内Id
	Timestamp    int64                 `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId        string                `protobuf:"bytes,5,opt,name=BotId,proto3" json:"BotId,omitempty"` //机器人QQ号
	GroupId      string                `protobuf:"bytes,6,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	SenderRole   *GroupRole            `protobuf:"varint,7,opt,name=SenderRole,proto3,enum=GroupRole,oneof" json:"SenderRole,omitempty"`
	BotRole      *GroupRole            `protobuf:"varint,8,opt,name=BotRole,proto3,enum=GroupRole,oneof" json:"BotRole,omitempty"`
	MessageChain []*MessageChainObject `protobuf:"bytes,9,rep,name=MessageChain,proto3" json:"MessageChain,omitempty"`
}

func (x *GMM_Group) Reset() {
	*x = GMM_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GMM_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GMM_Group) ProtoMessage() {}

func (x *GMM_Group) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GMM_Group.ProtoReflect.Descriptor instead.
func (*GMM_Group) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{28}
}

func (x *GMM_Group) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *GMM_Group) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

func (x *GMM_Group) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *GMM_Group) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GMM_Group) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *GMM_Group) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GMM_Group) GetSenderRole() GroupRole {
	if x != nil && x.SenderRole != nil {
		return *x.SenderRole
	}
	return GroupRole_GR_Member
}

func (x *GMM_Group) GetBotRole() GroupRole {
	if x != nil && x.BotRole != nil {
		return *x.BotRole
	}
	return GroupRole_GR_Member
}

func (x *GMM_Group) GetMessageChain() []*MessageChainObject {
	if x != nil {
		return x.MessageChain
	}
	return nil
}

type CE_GetFriendList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OK      bool                           `protobuf:"varint,1,opt,name=OK,proto3" json:"OK,omitempty"`
	Retcode *string                        `protobuf:"bytes,2,opt,name=Retcode,proto3,oneof" json:"Retcode,omitempty"`
	Friends []*CE_GetFriendList_FriendInfo `protobuf:"bytes,3,rep,name=Friends,proto3" json:"Friends,omitempty"`
}

func (x *CE_GetFriendList) Reset() {
	*x = CE_GetFriendList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CE_GetFriendList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CE_GetFriendList) ProtoMessage() {}

func (x *CE_GetFriendList) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CE_GetFriendList.ProtoReflect.Descriptor instead.
func (*CE_GetFriendList) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{29}
}

func (x *CE_GetFriendList) GetOK() bool {
	if x != nil {
		return x.OK
	}
	return false
}

func (x *CE_GetFriendList) GetRetcode() string {
	if x != nil && x.Retcode != nil {
		return *x.Retcode
	}
	return ""
}

func (x *CE_GetFriendList) GetFriends() []*CE_GetFriendList_FriendInfo {
	if x != nil {
		return x.Friends
	}
	return nil
}

type R_BotEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *BotEventType   `protobuf:"varint,1,opt,name=Type,proto3,enum=BotEventType,oneof" json:"Type,omitempty"`
	HeartPacket *BE_HeartPacket `protobuf:"bytes,2,opt,name=HeartPacket,proto3,oneof" json:"HeartPacket,omitempty"`
	Connected   *BE_Connected   `protobuf:"bytes,3,opt,name=Connected,proto3,oneof" json:"Connected,omitempty"`
}

func (x *R_BotEvent) Reset() {
	*x = R_BotEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *R_BotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*R_BotEvent) ProtoMessage() {}

func (x *R_BotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use R_BotEvent.ProtoReflect.Descriptor instead.
func (*R_BotEvent) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{30}
}

func (x *R_BotEvent) GetType() BotEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BotEventType_BET_HeartPacket
}

func (x *R_BotEvent) GetHeartPacket() *BE_HeartPacket {
	if x != nil {
		return x.HeartPacket
	}
	return nil
}

func (x *R_BotEvent) GetConnected() *BE_Connected {
	if x != nil {
		return x.Connected
	}
	return nil
}

type BE_HeartPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64                 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId     string                `protobuf:"bytes,2,opt,name=BotId,proto3" json:"BotId,omitempty"`
	Interval  int64                 `protobuf:"varint,3,opt,name=Interval,proto3" json:"Interval,omitempty"` //每隔多久发送一次心跳包(ms)
	Status    *BE_HeartPacketStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *BE_HeartPacket) Reset() {
	*x = BE_HeartPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BE_HeartPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BE_HeartPacket) ProtoMessage() {}

func (x *BE_HeartPacket) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BE_HeartPacket.ProtoReflect.Descriptor instead.
func (*BE_HeartPacket) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{31}
}

func (x *BE_HeartPacket) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BE_HeartPacket) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *BE_HeartPacket) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *BE_HeartPacket) GetStatus() *BE_HeartPacketStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type BE_Connected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BotId     string `protobuf:"bytes,2,opt,name=BotId,proto3" json:"BotId,omitempty"`
}

func (x *BE_Connected) Reset() {
	*x = BE_Connected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BE_Connected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BE_Connected) ProtoMessage() {}

func (x *BE_Connected) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BE_Connected.ProtoReflect.Descriptor instead.
func (*BE_Connected) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{32}
}

func (x *BE_Connected) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BE_Connected) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

type BotResponseUnmarshalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buf          []byte        `protobuf:"bytes,1,opt,name=Buf,proto3" json:"Buf,omitempty"`
	Type         *ResponseType `protobuf:"varint,2,opt,name=Type,proto3,enum=ResponseType,oneof" json:"Type,omitempty"`
	CmdEventType *CmdEventType `protobuf:"varint,3,opt,name=CmdEventType,proto3,enum=CmdEventType,oneof" json:"CmdEventType,omitempty"` //ResponseType == CmdEvent need
}

func (x *BotResponseUnmarshalRequest) Reset() {
	*x = BotResponseUnmarshalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotResponseUnmarshalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotResponseUnmarshalRequest) ProtoMessage() {}

func (x *BotResponseUnmarshalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotResponseUnmarshalRequest.ProtoReflect.Descriptor instead.
func (*BotResponseUnmarshalRequest) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{33}
}

func (x *BotResponseUnmarshalRequest) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

func (x *BotResponseUnmarshalRequest) GetType() ResponseType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ResponseType_RT_Message
}

func (x *BotResponseUnmarshalRequest) GetCmdEventType() CmdEventType {
	if x != nil && x.CmdEventType != nil {
		return *x.CmdEventType
	}
	return CmdEventType_CET_GetGroupInfo
}

type BotResponseUnmarshalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *ResponseType `protobuf:"varint,1,opt,name=Type,proto3,enum=ResponseType,oneof" json:"Type,omitempty"`
	Message  *R_Message    `protobuf:"bytes,2,opt,name=Message,proto3,oneof" json:"Message,omitempty"`
	QQEvent  *R_QQEvent    `protobuf:"bytes,3,opt,name=QQEvent,proto3,oneof" json:"QQEvent,omitempty"`
	CmdEvent *R_CmdEvent   `protobuf:"bytes,4,opt,name=CmdEvent,proto3,oneof" json:"CmdEvent,omitempty"`
	BotEvent *R_BotEvent   `protobuf:"bytes,5,opt,name=BotEvent,proto3,oneof" json:"BotEvent,omitempty"`
}

func (x *BotResponseUnmarshalResponse) Reset() {
	*x = BotResponseUnmarshalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotResponseUnmarshalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotResponseUnmarshalResponse) ProtoMessage() {}

func (x *BotResponseUnmarshalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotResponseUnmarshalResponse.ProtoReflect.Descriptor instead.
func (*BotResponseUnmarshalResponse) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{34}
}

func (x *BotResponseUnmarshalResponse) GetType() ResponseType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ResponseType_RT_Message
}

func (x *BotResponseUnmarshalResponse) GetMessage() *R_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BotResponseUnmarshalResponse) GetQQEvent() *R_QQEvent {
	if x != nil {
		return x.QQEvent
	}
	return nil
}

func (x *BotResponseUnmarshalResponse) GetCmdEvent() *R_CmdEvent {
	if x != nil {
		return x.CmdEvent
	}
	return nil
}

func (x *BotResponseUnmarshalResponse) GetBotEvent() *R_BotEvent {
	if x != nil {
		return x.BotEvent
	}
	return nil
}

type CE_GetFriendList_FriendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string  `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserId   string  `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Remark   *string `protobuf:"bytes,3,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *CE_GetFriendList_FriendInfo) Reset() {
	*x = CE_GetFriendList_FriendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CE_GetFriendList_FriendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CE_GetFriendList_FriendInfo) ProtoMessage() {}

func (x *CE_GetFriendList_FriendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CE_GetFriendList_FriendInfo.ProtoReflect.Descriptor instead.
func (*CE_GetFriendList_FriendInfo) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CE_GetFriendList_FriendInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CE_GetFriendList_FriendInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CE_GetFriendList_FriendInfo) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type BE_HeartPacketStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online bool `protobuf:"varint,1,opt,name=Online,proto3" json:"Online,omitempty"`
	Good   bool `protobuf:"varint,2,opt,name=Good,proto3" json:"Good,omitempty"`
}

func (x *BE_HeartPacketStatus) Reset() {
	*x = BE_HeartPacketStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handler_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BE_HeartPacketStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BE_HeartPacketStatus) ProtoMessage() {}

func (x *BE_HeartPacketStatus) ProtoReflect() protoreflect.Message {
	mi := &file_handler_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BE_HeartPacketStatus.ProtoReflect.Descriptor instead.
func (*BE_HeartPacketStatus) Descriptor() ([]byte, []int) {
	return file_handler_proto_rawDescGZIP(), []int{31, 0}
}

func (x *BE_HeartPacketStatus) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *BE_HeartPacketStatus) GetGood() bool {
	if x != nil {
		return x.Good
	}
	return false
}

var File_handler_proto protoreflect.FileDescriptor

var file_handler_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd9, 0x02, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x4d, 0x43, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x48, 0x01, 0x52, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x43, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48,
	0x02, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x05, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x43, 0x5f,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x03, 0x52, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x4d, 0x43, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x04, 0x52, 0x05, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x02, 0x41, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x43, 0x5f, 0x41, 0x74, 0x48, 0x05, 0x52, 0x02, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x43, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x06,
	0x52, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x41,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x0a, 0x07, 0x4d,
	0x43, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x1c, 0x0a, 0x08, 0x4d, 0x43,
	0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x1c, 0x0a, 0x08, 0x4d, 0x43, 0x5f, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x22, 0x1c, 0x0a, 0x08, 0x4d, 0x43, 0x5f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x52, 0x4c, 0x22, 0x23, 0x0a, 0x05, 0x4d, 0x43, 0x5f, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x08, 0x4d, 0x43, 0x5f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x52, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x5f, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x02, 0x52, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe6, 0x01, 0x0a, 0x09, 0x4d, 0x5f, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xf5, 0x02, 0x0a, 0x07, 0x4d, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x07, 0x42, 0x6f,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x02, 0x52, 0x07, 0x42, 0x6f, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x42, 0x6f, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x09, 0x52, 0x5f, 0x51,
	0x51, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x51, 0x51, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x51, 0x51, 0x45, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x48, 0x01,
	0x52, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x51, 0x51, 0x45, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x51, 0x51, 0x45, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x48, 0x03, 0x52, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x51, 0x51, 0x45, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65,
	0x48, 0x04, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x51, 0x51, 0x45, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x05, 0x52,
	0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x75, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x6e, 0x6d, 0x75, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x51, 0x51, 0x45, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x51, 0x51, 0x45, 0x5f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x41, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x48, 0x01, 0x52, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x47, 0x41, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x48, 0x02, 0x52, 0x06, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x09, 0x47, 0x41, 0x5f, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x09,
	0x47, 0x41, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x51, 0x51, 0x45, 0x5f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x51, 0x51, 0x45, 0x5f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x06, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x52, 0x5f, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x4b, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x47, 0x52, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x48, 0x02, 0x52, 0x04, 0x4b, 0x69,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4b, 0x69,
	0x63, 0x6b, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x47, 0x52, 0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a,
	0x51, 0x75, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x51, 0x75, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x51, 0x75, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81,
	0x02, 0x0a, 0x07, 0x47, 0x52, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0d, 0x51, 0x51, 0x45, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x51, 0x51, 0x45,
	0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x51, 0x51, 0x45, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x51, 0x51, 0x45, 0x5f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d, 0x52, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x01, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x52, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48,
	0x02, 0x52, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0xa0, 0x02, 0x0a,
	0x08, 0x4d, 0x52, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xb8, 0x01, 0x0a, 0x0a, 0x4d, 0x52, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0c, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x52, 0x65,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x0a, 0x52,
	0x5f, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x45, 0x5f, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x0c, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x45, 0x5f, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x02, 0x52, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x45, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x03, 0x52,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x45, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x04, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0,
	0x01, 0x0a, 0x0f, 0x43, 0x45, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x4f, 0x4b, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4e, 0x6f, 0x77, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x8a, 0x03, 0x0a, 0x15, 0x43, 0x45, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x4f,
	0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x4b, 0x12, 0x1d, 0x0a, 0x07, 0x52,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x52, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0e, 0x4c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x0d, 0x43, 0x45, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x4f, 0x4b,
	0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x47, 0x4d, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x52, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x47, 0x4d, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47, 0x4d, 0x4d,
	0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x07, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x4d, 0x4d, 0x5f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x02, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe8, 0x01, 0x0a,
	0x0b, 0x47, 0x4d, 0x4d, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x09, 0x47, 0x4d, 0x4d, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x07, 0x42, 0x6f, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65,
	0x48, 0x02, 0x52, 0x07, 0x42, 0x6f, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x42, 0x6f, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x43, 0x45, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x4f, 0x4b, 0x12, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x52, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x45, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x1a, 0x68, 0x0a,
	0x0a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x52, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0a, 0x52, 0x5f, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0b, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x42, 0x45, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x01, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x45, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x48, 0x02, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x0e,
	0x42, 0x45, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x42, 0x45, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x47, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x47, 0x6f, 0x6f, 0x64, 0x22, 0x42, 0x0a, 0x0c, 0x42, 0x45, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x42, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x75, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x42, 0x75, 0x66, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x43, 0x6d, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x1c, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x52, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x01, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x07, 0x51, 0x51, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x5f, 0x51, 0x51,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x02, 0x52, 0x07, 0x51, 0x51, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x08, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x5f, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x03, 0x52, 0x08, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x08, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x5f, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x04, 0x52, 0x08, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x51, 0x51, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0x50, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x54,
	0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x54,
	0x5f, 0x51, 0x51, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x54,
	0x5f, 0x43, 0x6d, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x54, 0x5f, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x2a, 0x2b, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x54, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x54, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x01, 0x2a, 0x68, 0x0a, 0x10, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x43, 0x54, 0x5f, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x43, 0x54, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x43,
	0x54, 0x5f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x43, 0x54,
	0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x43, 0x54, 0x5f,
	0x41, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x43, 0x54, 0x5f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x10, 0x05, 0x2a, 0x78, 0x0a, 0x0b, 0x51, 0x51, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x51, 0x45, 0x54, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x51, 0x45, 0x54, 0x5f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x51,
	0x51, 0x45, 0x54, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x51, 0x51, 0x45, 0x54, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x6d,
	0x75, 0x74, 0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x51, 0x45, 0x54, 0x5f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x10, 0x04, 0x2a, 0x32, 0x0a,
	0x10, 0x51, 0x51, 0x45, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x41, 0x54, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x41, 0x54, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10,
	0x01, 0x2a, 0x33, 0x0a, 0x13, 0x51, 0x51, 0x45, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x54, 0x5f,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x54, 0x5f,
	0x4b, 0x69, 0x63, 0x6b, 0x10, 0x01, 0x2a, 0x37, 0x0a, 0x15, 0x51, 0x51, 0x45, 0x5f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x52, 0x54, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x52, 0x54, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x01, 0x2a,
	0x36, 0x0a, 0x11, 0x51, 0x51, 0x45, 0x5f, 0x4d, 0x52, 0x54, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x52, 0x54, 0x47, 0x54, 0x5f, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x52, 0x54, 0x47, 0x54, 0x5f,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x01, 0x2a, 0x6b, 0x0a, 0x0c, 0x43, 0x6d, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x54, 0x5f, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x45, 0x54, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x54,
	0x5f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x45, 0x54, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0x03, 0x2a, 0x36, 0x0a, 0x0c, 0x42, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x45, 0x54, 0x5f, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x54,
	0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x36, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x52, 0x5f,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x5f, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x5f, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x10, 0x02, 0x32, 0x5e, 0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12,
	0x53, 0x0a, 0x14, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e,
	0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x12, 0x1c, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_handler_proto_rawDescOnce sync.Once
	file_handler_proto_rawDescData = file_handler_proto_rawDesc
)

func file_handler_proto_rawDescGZIP() []byte {
	file_handler_proto_rawDescOnce.Do(func() {
		file_handler_proto_rawDescData = protoimpl.X.CompressGZIP(file_handler_proto_rawDescData)
	})
	return file_handler_proto_rawDescData
}

var file_handler_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_handler_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_handler_proto_goTypes = []any{
	(ResponseType)(0),                    // 0: ResponseType
	(MessageType)(0),                     // 1: MessageType
	(MessageChainType)(0),                // 2: MessageChainType
	(QQEventType)(0),                     // 3: QQEventType
	(QQE_GroupAddType)(0),                // 4: QQE_GroupAddType
	(QQE_GroupRemoveType)(0),             // 5: QQE_GroupRemoveType
	(QQE_MessageRecallType)(0),           // 6: QQE_MessageRecallType
	(QQE_MRT_GroupType)(0),               // 7: QQE_MRT_GroupType
	(CmdEventType)(0),                    // 8: CmdEventType
	(BotEventType)(0),                    // 9: BotEventType
	(GroupRole)(0),                       // 10: GroupRole
	(*MessageChainObject)(nil),           // 11: MessageChainObject
	(*MC_Text)(nil),                      // 12: MC_Text
	(*MC_Image)(nil),                     // 13: MC_Image
	(*MC_Voice)(nil),                     // 14: MC_Voice
	(*MC_Video)(nil),                     // 15: MC_Video
	(*MC_At)(nil),                        // 16: MC_At
	(*MC_Reply)(nil),                     // 17: MC_Reply
	(*R_Message)(nil),                    // 18: R_Message
	(*M_Private)(nil),                    // 19: M_Private
	(*M_Group)(nil),                      // 20: M_Group
	(*R_QQEvent)(nil),                    // 21: R_QQEvent
	(*QQE_GroupAdd)(nil),                 // 22: QQE_GroupAdd
	(*GA_Direct)(nil),                    // 23: GA_Direct
	(*GA_Invite)(nil),                    // 24: GA_Invite
	(*QQE_GroupRemove)(nil),              // 25: QQE_GroupRemove
	(*GR_Manual)(nil),                    // 26: GR_Manual
	(*GR_Kick)(nil),                      // 27: GR_Kick
	(*QQE_GroupMute)(nil),                // 28: QQE_GroupMute
	(*QQE_GroupUnmute)(nil),              // 29: QQE_GroupUnmute
	(*QQE_MessageRecall)(nil),            // 30: QQE_MessageRecall
	(*MR_Group)(nil),                     // 31: MR_Group
	(*MR_Private)(nil),                   // 32: MR_Private
	(*R_CmdEvent)(nil),                   // 33: R_CmdEvent
	(*CE_GetGroupInfo)(nil),              // 34: CE_GetGroupInfo
	(*CE_GetGroupMemberInfo)(nil),        // 35: CE_GetGroupMemberInfo
	(*CE_GetMessage)(nil),                // 36: CE_GetMessage
	(*GM_Message)(nil),                   // 37: GM_Message
	(*GMM_Private)(nil),                  // 38: GMM_Private
	(*GMM_Group)(nil),                    // 39: GMM_Group
	(*CE_GetFriendList)(nil),             // 40: CE_GetFriendList
	(*R_BotEvent)(nil),                   // 41: R_BotEvent
	(*BE_HeartPacket)(nil),               // 42: BE_HeartPacket
	(*BE_Connected)(nil),                 // 43: BE_Connected
	(*BotResponseUnmarshalRequest)(nil),  // 44: BotResponseUnmarshalRequest
	(*BotResponseUnmarshalResponse)(nil), // 45: BotResponseUnmarshalResponse
	(*CE_GetFriendList_FriendInfo)(nil),  // 46: CE_GetFriendList.FriendInfo
	(*BE_HeartPacketStatus)(nil),         // 47: BE_HeartPacket.status
}
var file_handler_proto_depIdxs = []int32{
	2,  // 0: MessageChainObject.Type:type_name -> MessageChainType
	12, // 1: MessageChainObject.Text:type_name -> MC_Text
	13, // 2: MessageChainObject.Image:type_name -> MC_Image
	14, // 3: MessageChainObject.Voice:type_name -> MC_Voice
	15, // 4: MessageChainObject.Video:type_name -> MC_Video
	16, // 5: MessageChainObject.At:type_name -> MC_At
	17, // 6: MessageChainObject.Reply:type_name -> MC_Reply
	1,  // 7: R_Message.Type:type_name -> MessageType
	19, // 8: R_Message.Private:type_name -> M_Private
	20, // 9: R_Message.Group:type_name -> M_Group
	11, // 10: M_Private.MessageChain:type_name -> MessageChainObject
	10, // 11: M_Group.SenderRole:type_name -> GroupRole
	10, // 12: M_Group.BotRole:type_name -> GroupRole
	11, // 13: M_Group.MessageChain:type_name -> MessageChainObject
	3,  // 14: R_QQEvent.Type:type_name -> QQEventType
	22, // 15: R_QQEvent.GroupAdd:type_name -> QQE_GroupAdd
	25, // 16: R_QQEvent.GroupRemove:type_name -> QQE_GroupRemove
	28, // 17: R_QQEvent.GroupMute:type_name -> QQE_GroupMute
	29, // 18: R_QQEvent.GroupUnmute:type_name -> QQE_GroupUnmute
	30, // 19: R_QQEvent.MessageRecall:type_name -> QQE_MessageRecall
	4,  // 20: QQE_GroupAdd.Type:type_name -> QQE_GroupAddType
	23, // 21: QQE_GroupAdd.Direct:type_name -> GA_Direct
	24, // 22: QQE_GroupAdd.Invite:type_name -> GA_Invite
	5,  // 23: QQE_GroupRemove.Type:type_name -> QQE_GroupRemoveType
	26, // 24: QQE_GroupRemove.Manual:type_name -> GR_Manual
	27, // 25: QQE_GroupRemove.Kick:type_name -> GR_Kick
	6,  // 26: QQE_MessageRecall.Type:type_name -> QQE_MessageRecallType
	31, // 27: QQE_MessageRecall.Group:type_name -> MR_Group
	32, // 28: QQE_MessageRecall.Private:type_name -> MR_Private
	8,  // 29: R_CmdEvent.Type:type_name -> CmdEventType
	34, // 30: R_CmdEvent.GetGroupInfo:type_name -> CE_GetGroupInfo
	35, // 31: R_CmdEvent.GetGroupMemberInfo:type_name -> CE_GetGroupMemberInfo
	36, // 32: R_CmdEvent.GetMessage:type_name -> CE_GetMessage
	40, // 33: R_CmdEvent.GetFriendList:type_name -> CE_GetFriendList
	10, // 34: CE_GetGroupMemberInfo.Role:type_name -> GroupRole
	37, // 35: CE_GetMessage.Message:type_name -> GM_Message
	1,  // 36: GM_Message.Type:type_name -> MessageType
	38, // 37: GM_Message.Private:type_name -> GMM_Private
	39, // 38: GM_Message.Group:type_name -> GMM_Group
	11, // 39: GMM_Private.MessageChain:type_name -> MessageChainObject
	10, // 40: GMM_Group.SenderRole:type_name -> GroupRole
	10, // 41: GMM_Group.BotRole:type_name -> GroupRole
	11, // 42: GMM_Group.MessageChain:type_name -> MessageChainObject
	46, // 43: CE_GetFriendList.Friends:type_name -> CE_GetFriendList.FriendInfo
	9,  // 44: R_BotEvent.Type:type_name -> BotEventType
	42, // 45: R_BotEvent.HeartPacket:type_name -> BE_HeartPacket
	43, // 46: R_BotEvent.Connected:type_name -> BE_Connected
	47, // 47: BE_HeartPacket.Status:type_name -> BE_HeartPacket.status
	0,  // 48: BotResponseUnmarshalRequest.Type:type_name -> ResponseType
	8,  // 49: BotResponseUnmarshalRequest.CmdEventType:type_name -> CmdEventType
	0,  // 50: BotResponseUnmarshalResponse.Type:type_name -> ResponseType
	18, // 51: BotResponseUnmarshalResponse.Message:type_name -> R_Message
	21, // 52: BotResponseUnmarshalResponse.QQEvent:type_name -> R_QQEvent
	33, // 53: BotResponseUnmarshalResponse.CmdEvent:type_name -> R_CmdEvent
	41, // 54: BotResponseUnmarshalResponse.BotEvent:type_name -> R_BotEvent
	44, // 55: Handler.BotResponseUnmarshal:input_type -> BotResponseUnmarshalRequest
	45, // 56: Handler.BotResponseUnmarshal:output_type -> BotResponseUnmarshalResponse
	56, // [56:57] is the sub-list for method output_type
	55, // [55:56] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_handler_proto_init() }
func file_handler_proto_init() {
	if File_handler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_handler_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MessageChainObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MC_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MC_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MC_Voice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MC_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MC_At); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MC_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*R_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*M_Private); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*M_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*R_QQEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*QQE_GroupAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GA_Direct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GA_Invite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*QQE_GroupRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GR_Manual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GR_Kick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*QQE_GroupMute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*QQE_GroupUnmute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*QQE_MessageRecall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*MR_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*MR_Private); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*R_CmdEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CE_GetGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CE_GetGroupMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CE_GetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GM_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GMM_Private); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GMM_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CE_GetFriendList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*R_BotEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*BE_HeartPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*BE_Connected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*BotResponseUnmarshalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*BotResponseUnmarshalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*CE_GetFriendList_FriendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handler_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*BE_HeartPacketStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_handler_proto_msgTypes[0].OneofWrappers = []any{}
	file_handler_proto_msgTypes[7].OneofWrappers = []any{}
	file_handler_proto_msgTypes[8].OneofWrappers = []any{}
	file_handler_proto_msgTypes[9].OneofWrappers = []any{}
	file_handler_proto_msgTypes[10].OneofWrappers = []any{}
	file_handler_proto_msgTypes[11].OneofWrappers = []any{}
	file_handler_proto_msgTypes[12].OneofWrappers = []any{}
	file_handler_proto_msgTypes[13].OneofWrappers = []any{}
	file_handler_proto_msgTypes[14].OneofWrappers = []any{}
	file_handler_proto_msgTypes[15].OneofWrappers = []any{}
	file_handler_proto_msgTypes[16].OneofWrappers = []any{}
	file_handler_proto_msgTypes[17].OneofWrappers = []any{}
	file_handler_proto_msgTypes[18].OneofWrappers = []any{}
	file_handler_proto_msgTypes[19].OneofWrappers = []any{}
	file_handler_proto_msgTypes[20].OneofWrappers = []any{}
	file_handler_proto_msgTypes[21].OneofWrappers = []any{}
	file_handler_proto_msgTypes[22].OneofWrappers = []any{}
	file_handler_proto_msgTypes[23].OneofWrappers = []any{}
	file_handler_proto_msgTypes[24].OneofWrappers = []any{}
	file_handler_proto_msgTypes[25].OneofWrappers = []any{}
	file_handler_proto_msgTypes[26].OneofWrappers = []any{}
	file_handler_proto_msgTypes[27].OneofWrappers = []any{}
	file_handler_proto_msgTypes[28].OneofWrappers = []any{}
	file_handler_proto_msgTypes[29].OneofWrappers = []any{}
	file_handler_proto_msgTypes[30].OneofWrappers = []any{}
	file_handler_proto_msgTypes[33].OneofWrappers = []any{}
	file_handler_proto_msgTypes[34].OneofWrappers = []any{}
	file_handler_proto_msgTypes[35].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_handler_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_handler_proto_goTypes,
		DependencyIndexes: file_handler_proto_depIdxs,
		EnumInfos:         file_handler_proto_enumTypes,
		MessageInfos:      file_handler_proto_msgTypes,
	}.Build()
	File_handler_proto = out.File
	file_handler_proto_rawDesc = nil
	file_handler_proto_goTypes = nil
	file_handler_proto_depIdxs = nil
}
