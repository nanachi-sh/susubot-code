// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package randomanimal

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cachesFieldNames          = builder.RawFieldNames(&Caches{})
	cachesRows                = strings.Join(cachesFieldNames, ",")
	cachesRowsExpectAutoSet   = strings.Join(stringx.Remove(cachesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cachesRowsWithPlaceHolder = strings.Join(stringx.Remove(cachesFieldNames, "`AssetHash`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cachesModel interface {
		Insert(ctx context.Context, data *Caches) (sql.Result, error)
		FindOne(ctx context.Context, assetHash string) (*Caches, error)
		Update(ctx context.Context, data *Caches) error
		Delete(ctx context.Context, assetHash string) error
	}

	defaultCachesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Caches struct {
		AssetType string `db:"AssetType"`
		AssetHash string `db:"AssetHash"`
	}
)

func newCachesModel(conn sqlx.SqlConn) *defaultCachesModel {
	return &defaultCachesModel{
		conn:  conn,
		table: "`Caches`",
	}
}

func (m *defaultCachesModel) Delete(ctx context.Context, assetHash string) error {
	query := fmt.Sprintf("delete from %s where `AssetHash` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, assetHash)
	return err
}

func (m *defaultCachesModel) FindOne(ctx context.Context, assetHash string) (*Caches, error) {
	query := fmt.Sprintf("select %s from %s where `AssetHash` = ? limit 1", cachesRows, m.table)
	var resp Caches
	err := m.conn.QueryRowCtx(ctx, &resp, query, assetHash)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCachesModel) Insert(ctx context.Context, data *Caches) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, cachesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AssetType, data.AssetHash)
	return ret, err
}

func (m *defaultCachesModel) Update(ctx context.Context, data *Caches) error {
	query := fmt.Sprintf("update %s set %s where `AssetHash` = ?", m.table, cachesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AssetType, data.AssetHash)
	return err
}

func (m *defaultCachesModel) tableName() string {
	return m.table
}
