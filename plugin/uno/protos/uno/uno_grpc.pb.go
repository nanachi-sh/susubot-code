// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: plugin/uno/protos/uno/uno.proto

package uno

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Uno_CreateRoom_FullMethodName         = "/susubot.plugin.uno.uno/CreateRoom"
	Uno_GetRooms_FullMethodName           = "/susubot.plugin.uno.uno/GetRooms"
	Uno_GetRoom_FullMethodName            = "/susubot.plugin.uno.uno/GetRoom"
	Uno_GetPlayer_FullMethodName          = "/susubot.plugin.uno.uno/GetPlayer"
	Uno_JoinRoom_FullMethodName           = "/susubot.plugin.uno.uno/JoinRoom"
	Uno_ExitRoom_FullMethodName           = "/susubot.plugin.uno.uno/ExitRoom"
	Uno_StartRoom_FullMethodName          = "/susubot.plugin.uno.uno/StartRoom"
	Uno_DrawCard_FullMethodName           = "/susubot.plugin.uno.uno/DrawCard"
	Uno_SendCard_FullMethodName           = "/susubot.plugin.uno.uno/SendCard"
	Uno_NoSendCard_FullMethodName         = "/susubot.plugin.uno.uno/NoSendCard"
	Uno_CallUNO_FullMethodName            = "/susubot.plugin.uno.uno/CallUNO"
	Uno_Challenge_FullMethodName          = "/susubot.plugin.uno.uno/Challenge"
	Uno_IndicateUNO_FullMethodName        = "/susubot.plugin.uno.uno/IndicateUNO"
	Uno_RoomEvent_FullMethodName          = "/susubot.plugin.uno.uno/RoomEvent"
	Uno_TEST_SetPlayerCard_FullMethodName = "/susubot.plugin.uno.uno/TEST_SetPlayerCard"
)

// UnoClient is the client API for Uno service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnoClient interface {
	CreateRoom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	GetRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRoomsResponse, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	ExitRoom(ctx context.Context, in *ExitRoomRequest, opts ...grpc.CallOption) (*ExitRoomResponse, error)
	StartRoom(ctx context.Context, in *StartRoomRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	DrawCard(ctx context.Context, in *DrawCardRequest, opts ...grpc.CallOption) (*DrawCardResponse, error)
	SendCard(ctx context.Context, in *SendCardRequest, opts ...grpc.CallOption) (*SendCardResponse, error)
	NoSendCard(ctx context.Context, in *NoSendCardRequest, opts ...grpc.CallOption) (*NoSendCardResponse, error)
	CallUNO(ctx context.Context, in *CallUNORequest, opts ...grpc.CallOption) (*CallUNOResponse, error)
	Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error)
	IndicateUNO(ctx context.Context, in *IndicateUNORequest, opts ...grpc.CallOption) (*IndicateUNOResponse, error)
	RoomEvent(ctx context.Context, in *RoomEventRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RoomEventResponse], error)
	// 测试用接口，前端禁止直接调用，全部需验证
	TEST_SetPlayerCard(ctx context.Context, in *TEST_SetPlayerCardRequest, opts ...grpc.CallOption) (*BasicResponse, error)
}

type unoClient struct {
	cc grpc.ClientConnInterface
}

func NewUnoClient(cc grpc.ClientConnInterface) UnoClient {
	return &unoClient{cc}
}

func (c *unoClient) CreateRoom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, Uno_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) GetRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomsResponse)
	err := c.cc.Invoke(ctx, Uno_GetRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, Uno_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerResponse)
	err := c.cc.Invoke(ctx, Uno_GetPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, Uno_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) ExitRoom(ctx context.Context, in *ExitRoomRequest, opts ...grpc.CallOption) (*ExitRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitRoomResponse)
	err := c.cc.Invoke(ctx, Uno_ExitRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) StartRoom(ctx context.Context, in *StartRoomRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, Uno_StartRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) DrawCard(ctx context.Context, in *DrawCardRequest, opts ...grpc.CallOption) (*DrawCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DrawCardResponse)
	err := c.cc.Invoke(ctx, Uno_DrawCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) SendCard(ctx context.Context, in *SendCardRequest, opts ...grpc.CallOption) (*SendCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCardResponse)
	err := c.cc.Invoke(ctx, Uno_SendCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) NoSendCard(ctx context.Context, in *NoSendCardRequest, opts ...grpc.CallOption) (*NoSendCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoSendCardResponse)
	err := c.cc.Invoke(ctx, Uno_NoSendCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) CallUNO(ctx context.Context, in *CallUNORequest, opts ...grpc.CallOption) (*CallUNOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallUNOResponse)
	err := c.cc.Invoke(ctx, Uno_CallUNO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChallengeResponse)
	err := c.cc.Invoke(ctx, Uno_Challenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) IndicateUNO(ctx context.Context, in *IndicateUNORequest, opts ...grpc.CallOption) (*IndicateUNOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndicateUNOResponse)
	err := c.cc.Invoke(ctx, Uno_IndicateUNO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unoClient) RoomEvent(ctx context.Context, in *RoomEventRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RoomEventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Uno_ServiceDesc.Streams[0], Uno_RoomEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RoomEventRequest, RoomEventResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Uno_RoomEventClient = grpc.ServerStreamingClient[RoomEventResponse]

func (c *unoClient) TEST_SetPlayerCard(ctx context.Context, in *TEST_SetPlayerCardRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, Uno_TEST_SetPlayerCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnoServer is the server API for Uno service.
// All implementations must embed UnimplementedUnoServer
// for forward compatibility.
type UnoServer interface {
	CreateRoom(context.Context, *Empty) (*CreateRoomResponse, error)
	GetRooms(context.Context, *Empty) (*GetRoomsResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	ExitRoom(context.Context, *ExitRoomRequest) (*ExitRoomResponse, error)
	StartRoom(context.Context, *StartRoomRequest) (*BasicResponse, error)
	DrawCard(context.Context, *DrawCardRequest) (*DrawCardResponse, error)
	SendCard(context.Context, *SendCardRequest) (*SendCardResponse, error)
	NoSendCard(context.Context, *NoSendCardRequest) (*NoSendCardResponse, error)
	CallUNO(context.Context, *CallUNORequest) (*CallUNOResponse, error)
	Challenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error)
	IndicateUNO(context.Context, *IndicateUNORequest) (*IndicateUNOResponse, error)
	RoomEvent(*RoomEventRequest, grpc.ServerStreamingServer[RoomEventResponse]) error
	// 测试用接口，前端禁止直接调用，全部需验证
	TEST_SetPlayerCard(context.Context, *TEST_SetPlayerCardRequest) (*BasicResponse, error)
	mustEmbedUnimplementedUnoServer()
}

// UnimplementedUnoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUnoServer struct{}

func (UnimplementedUnoServer) CreateRoom(context.Context, *Empty) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedUnoServer) GetRooms(context.Context, *Empty) (*GetRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedUnoServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedUnoServer) GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedUnoServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedUnoServer) ExitRoom(context.Context, *ExitRoomRequest) (*ExitRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitRoom not implemented")
}
func (UnimplementedUnoServer) StartRoom(context.Context, *StartRoomRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRoom not implemented")
}
func (UnimplementedUnoServer) DrawCard(context.Context, *DrawCardRequest) (*DrawCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawCard not implemented")
}
func (UnimplementedUnoServer) SendCard(context.Context, *SendCardRequest) (*SendCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCard not implemented")
}
func (UnimplementedUnoServer) NoSendCard(context.Context, *NoSendCardRequest) (*NoSendCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoSendCard not implemented")
}
func (UnimplementedUnoServer) CallUNO(context.Context, *CallUNORequest) (*CallUNOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallUNO not implemented")
}
func (UnimplementedUnoServer) Challenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenge not implemented")
}
func (UnimplementedUnoServer) IndicateUNO(context.Context, *IndicateUNORequest) (*IndicateUNOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndicateUNO not implemented")
}
func (UnimplementedUnoServer) RoomEvent(*RoomEventRequest, grpc.ServerStreamingServer[RoomEventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RoomEvent not implemented")
}
func (UnimplementedUnoServer) TEST_SetPlayerCard(context.Context, *TEST_SetPlayerCardRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TEST_SetPlayerCard not implemented")
}
func (UnimplementedUnoServer) mustEmbedUnimplementedUnoServer() {}
func (UnimplementedUnoServer) testEmbeddedByValue()             {}

// UnsafeUnoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnoServer will
// result in compilation errors.
type UnsafeUnoServer interface {
	mustEmbedUnimplementedUnoServer()
}

func RegisterUnoServer(s grpc.ServiceRegistrar, srv UnoServer) {
	// If the following call pancis, it indicates UnimplementedUnoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Uno_ServiceDesc, srv)
}

func _Uno_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).CreateRoom(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_GetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).GetRooms(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_GetPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).GetPlayer(ctx, req.(*GetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_ExitRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).ExitRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_ExitRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).ExitRoom(ctx, req.(*ExitRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_StartRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).StartRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_StartRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).StartRoom(ctx, req.(*StartRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_DrawCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).DrawCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_DrawCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).DrawCard(ctx, req.(*DrawCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_SendCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).SendCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_SendCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).SendCard(ctx, req.(*SendCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_NoSendCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoSendCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).NoSendCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_NoSendCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).NoSendCard(ctx, req.(*NoSendCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_CallUNO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallUNORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).CallUNO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_CallUNO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).CallUNO(ctx, req.(*CallUNORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_Challenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).Challenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_Challenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).Challenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_IndicateUNO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndicateUNORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).IndicateUNO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_IndicateUNO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).IndicateUNO(ctx, req.(*IndicateUNORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uno_RoomEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoomEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnoServer).RoomEvent(m, &grpc.GenericServerStream[RoomEventRequest, RoomEventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Uno_RoomEventServer = grpc.ServerStreamingServer[RoomEventResponse]

func _Uno_TEST_SetPlayerCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TEST_SetPlayerCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnoServer).TEST_SetPlayerCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uno_TEST_SetPlayerCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnoServer).TEST_SetPlayerCard(ctx, req.(*TEST_SetPlayerCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Uno_ServiceDesc is the grpc.ServiceDesc for Uno service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uno_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "susubot.plugin.uno.uno",
	HandlerType: (*UnoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Uno_CreateRoom_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _Uno_GetRooms_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _Uno_GetRoom_Handler,
		},
		{
			MethodName: "GetPlayer",
			Handler:    _Uno_GetPlayer_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Uno_JoinRoom_Handler,
		},
		{
			MethodName: "ExitRoom",
			Handler:    _Uno_ExitRoom_Handler,
		},
		{
			MethodName: "StartRoom",
			Handler:    _Uno_StartRoom_Handler,
		},
		{
			MethodName: "DrawCard",
			Handler:    _Uno_DrawCard_Handler,
		},
		{
			MethodName: "SendCard",
			Handler:    _Uno_SendCard_Handler,
		},
		{
			MethodName: "NoSendCard",
			Handler:    _Uno_NoSendCard_Handler,
		},
		{
			MethodName: "CallUNO",
			Handler:    _Uno_CallUNO_Handler,
		},
		{
			MethodName: "Challenge",
			Handler:    _Uno_Challenge_Handler,
		},
		{
			MethodName: "IndicateUNO",
			Handler:    _Uno_IndicateUNO_Handler,
		},
		{
			MethodName: "TEST_SetPlayerCard",
			Handler:    _Uno_TEST_SetPlayerCard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RoomEvent",
			Handler:       _Uno_RoomEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin/uno/protos/uno/uno.proto",
}
