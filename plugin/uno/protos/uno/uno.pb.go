// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.2
// source: plugin/uno/protos/uno/uno.proto

package uno

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Stage int32

const (
	Stage_WaitingStart   Stage = 0
	Stage_ElectingBanker Stage = 1
	Stage_SendingCard    Stage = 2
)

// Enum value maps for Stage.
var (
	Stage_name = map[int32]string{
		0: "WaitingStart",
		1: "ElectingBanker",
		2: "SendingCard",
	}
	Stage_value = map[string]int32{
		"WaitingStart":   0,
		"ElectingBanker": 1,
		"SendingCard":    2,
	}
)

func (x Stage) Enum() *Stage {
	p := new(Stage)
	*p = x
	return p
}

func (x Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stage) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[0].Descriptor()
}

func (Stage) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[0]
}

func (x Stage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stage.Descriptor instead.
func (Stage) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{0}
}

type Errors int32

const (
	Errors_Unexpected                       Errors = 0  //意外错误
	Errors_RoomStarted                      Errors = 1  //房间已开始游戏
	Errors_RoomFull                         Errors = 2  //房间已满
	Errors_RoomExistPlayer                  Errors = 3  //玩家已存在房间内
	Errors_RoomNoReachPlayers               Errors = 4  //玩家数未达到
	Errors_RoomNoExistPlayer                Errors = 5  //玩家不存在房间内
	Errors_PlayerNoOperatorNow              Errors = 6  //玩家不是当前操作者
	Errors_PlayerCardNoExist                Errors = 7  //玩家卡牌不足
	Errors_PlayerCannotSendCard             Errors = 8  //玩家不能出牌
	Errors_SendCardColorORNumberNELastCard  Errors = 9  //所出牌颜色或数字与上一张牌不同
	Errors_RoomNoStart                      Errors = 10 //房间还未开始游戏
	Errors_PlayerAlreadyDrawCard            Errors = 11 //玩家已抽过牌
	Errors_PlayerNoDrawCard                 Errors = 12 //玩家还未抽牌
	Errors_PlayerCannotNoSendCard           Errors = 13 //玩家不能不出牌
	Errors_Challenged                       Errors = 14 //已挑战
	Errors_PlayerCannotCallUNO              Errors = 15 //玩家不能喊UNO
	Errors_RoomNoneSendCard                 Errors = 16 //房间还未出过牌
	Errors_CannotChallenge                  Errors = 17 //无法挑战
	Errors_RoomNoSendingCard                Errors = 18 //房间还未进入出牌阶段
	Errors_PlayerAlreadyCallUNO             Errors = 19 //玩家已喊UNO
	Errors_RoomNoExist                      Errors = 20 //房间不存在
	Errors_PlayerNoExistAnyRoom             Errors = 21 //玩家不在任意一个房间内
	Errors_PlayerCannotDrawCard             Errors = 22 //玩家不能摸牌
	Errors_PlayerCannotSendCardFromHandCard Errors = 23 //玩家不能从手牌中出牌
	Errors_BlackCardNoSpecifiedColor        Errors = 24 //黑牌未指定颜色
	Errors_PlayerIsOperatorNow              Errors = 25 //玩家为当前操作者
	Errors_NoFoundAccountHash               Errors = 26 //未找到用户哈希Cookie
	Errors_NoValidAccountHash               Errors = 27 //无有效用户哈希Cookie
	Errors_AbnormalAccount                  Errors = 28 //异常账号
	Errors_NoFoundPlayerHash                Errors = 29 //未找到玩家哈希
	Errors_PlayerHashNE                     Errors = 30 //玩家哈希与桌内玩家哈希不同
	Errors_NoValidPlayerHash                Errors = 31 //无有效玩家哈希Cookie
	Errors_NoPrivilegeAccount               Errors = 32 //非特权用户
	Errors_AccountExist                     Errors = 33 //账号已存在
	Errors_AccountNoExist                   Errors = 34 //账号不存在
	Errors_PasswordWrong                    Errors = 35 //密码不正确
)

// Enum value maps for Errors.
var (
	Errors_name = map[int32]string{
		0:  "Unexpected",
		1:  "RoomStarted",
		2:  "RoomFull",
		3:  "RoomExistPlayer",
		4:  "RoomNoReachPlayers",
		5:  "RoomNoExistPlayer",
		6:  "PlayerNoOperatorNow",
		7:  "PlayerCardNoExist",
		8:  "PlayerCannotSendCard",
		9:  "SendCardColorORNumberNELastCard",
		10: "RoomNoStart",
		11: "PlayerAlreadyDrawCard",
		12: "PlayerNoDrawCard",
		13: "PlayerCannotNoSendCard",
		14: "Challenged",
		15: "PlayerCannotCallUNO",
		16: "RoomNoneSendCard",
		17: "CannotChallenge",
		18: "RoomNoSendingCard",
		19: "PlayerAlreadyCallUNO",
		20: "RoomNoExist",
		21: "PlayerNoExistAnyRoom",
		22: "PlayerCannotDrawCard",
		23: "PlayerCannotSendCardFromHandCard",
		24: "BlackCardNoSpecifiedColor",
		25: "PlayerIsOperatorNow",
		26: "NoFoundAccountHash",
		27: "NoValidAccountHash",
		28: "AbnormalAccount",
		29: "NoFoundPlayerHash",
		30: "PlayerHashNE",
		31: "NoValidPlayerHash",
		32: "NoPrivilegeAccount",
		33: "AccountExist",
		34: "AccountNoExist",
		35: "PasswordWrong",
	}
	Errors_value = map[string]int32{
		"Unexpected":                       0,
		"RoomStarted":                      1,
		"RoomFull":                         2,
		"RoomExistPlayer":                  3,
		"RoomNoReachPlayers":               4,
		"RoomNoExistPlayer":                5,
		"PlayerNoOperatorNow":              6,
		"PlayerCardNoExist":                7,
		"PlayerCannotSendCard":             8,
		"SendCardColorORNumberNELastCard":  9,
		"RoomNoStart":                      10,
		"PlayerAlreadyDrawCard":            11,
		"PlayerNoDrawCard":                 12,
		"PlayerCannotNoSendCard":           13,
		"Challenged":                       14,
		"PlayerCannotCallUNO":              15,
		"RoomNoneSendCard":                 16,
		"CannotChallenge":                  17,
		"RoomNoSendingCard":                18,
		"PlayerAlreadyCallUNO":             19,
		"RoomNoExist":                      20,
		"PlayerNoExistAnyRoom":             21,
		"PlayerCannotDrawCard":             22,
		"PlayerCannotSendCardFromHandCard": 23,
		"BlackCardNoSpecifiedColor":        24,
		"PlayerIsOperatorNow":              25,
		"NoFoundAccountHash":               26,
		"NoValidAccountHash":               27,
		"AbnormalAccount":                  28,
		"NoFoundPlayerHash":                29,
		"PlayerHashNE":                     30,
		"NoValidPlayerHash":                31,
		"NoPrivilegeAccount":               32,
		"AccountExist":                     33,
		"AccountNoExist":                   34,
		"PasswordWrong":                    35,
	}
)

func (x Errors) Enum() *Errors {
	p := new(Errors)
	*p = x
	return p
}

func (x Errors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Errors) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[1].Descriptor()
}

func (Errors) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[1]
}

func (x Errors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Errors.Descriptor instead.
func (Errors) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{1}
}

type CardColor int32

const (
	CardColor_Blue   CardColor = 0
	CardColor_Yellow CardColor = 1
	CardColor_Red    CardColor = 2
	CardColor_Green  CardColor = 3
	CardColor_Black  CardColor = 4
)

// Enum value maps for CardColor.
var (
	CardColor_name = map[int32]string{
		0: "Blue",
		1: "Yellow",
		2: "Red",
		3: "Green",
		4: "Black",
	}
	CardColor_value = map[string]int32{
		"Blue":   0,
		"Yellow": 1,
		"Red":    2,
		"Green":  3,
		"Black":  4,
	}
)

func (x CardColor) Enum() *CardColor {
	p := new(CardColor)
	*p = x
	return p
}

func (x CardColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardColor) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[2].Descriptor()
}

func (CardColor) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[2]
}

func (x CardColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardColor.Descriptor instead.
func (CardColor) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{2}
}

type CardNumber int32

const (
	CardNumber_Zero  CardNumber = 0
	CardNumber_One   CardNumber = 1
	CardNumber_Two   CardNumber = 2
	CardNumber_Three CardNumber = 3
	CardNumber_Four  CardNumber = 4
	CardNumber_Five  CardNumber = 5
	CardNumber_Six   CardNumber = 6
	CardNumber_Seven CardNumber = 7
	CardNumber_Eight CardNumber = 8
	CardNumber_Nine  CardNumber = 9
)

// Enum value maps for CardNumber.
var (
	CardNumber_name = map[int32]string{
		0: "Zero",
		1: "One",
		2: "Two",
		3: "Three",
		4: "Four",
		5: "Five",
		6: "Six",
		7: "Seven",
		8: "Eight",
		9: "Nine",
	}
	CardNumber_value = map[string]int32{
		"Zero":  0,
		"One":   1,
		"Two":   2,
		"Three": 3,
		"Four":  4,
		"Five":  5,
		"Six":   6,
		"Seven": 7,
		"Eight": 8,
		"Nine":  9,
	}
)

func (x CardNumber) Enum() *CardNumber {
	p := new(CardNumber)
	*p = x
	return p
}

func (x CardNumber) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardNumber) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[3].Descriptor()
}

func (CardNumber) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[3]
}

func (x CardNumber) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardNumber.Descriptor instead.
func (CardNumber) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{3}
}

type FeatureCards int32

const (
	FeatureCards_Skip         FeatureCards = 0
	FeatureCards_Reverse      FeatureCards = 1
	FeatureCards_DrawTwo      FeatureCards = 2
	FeatureCards_Wild         FeatureCards = 3
	FeatureCards_WildDrawFour FeatureCards = 4
)

// Enum value maps for FeatureCards.
var (
	FeatureCards_name = map[int32]string{
		0: "Skip",
		1: "Reverse",
		2: "DrawTwo",
		3: "Wild",
		4: "WildDrawFour",
	}
	FeatureCards_value = map[string]int32{
		"Skip":         0,
		"Reverse":      1,
		"DrawTwo":      2,
		"Wild":         3,
		"WildDrawFour": 4,
	}
)

func (x FeatureCards) Enum() *FeatureCards {
	p := new(FeatureCards)
	*p = x
	return p
}

func (x FeatureCards) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureCards) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[4].Descriptor()
}

func (FeatureCards) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[4]
}

func (x FeatureCards) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureCards.Descriptor instead.
func (FeatureCards) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{4}
}

type SendCardActions int32

const (
	SendCardActions_Send   SendCardActions = 0
	SendCardActions_NoSend SendCardActions = 1
)

// Enum value maps for SendCardActions.
var (
	SendCardActions_name = map[int32]string{
		0: "Send",
		1: "NoSend",
	}
	SendCardActions_value = map[string]int32{
		"Send":   0,
		"NoSend": 1,
	}
)

func (x SendCardActions) Enum() *SendCardActions {
	p := new(SendCardActions)
	*p = x
	return p
}

func (x SendCardActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendCardActions) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[5].Descriptor()
}

func (SendCardActions) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[5]
}

func (x SendCardActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendCardActions.Descriptor instead.
func (SendCardActions) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{5}
}

type CardType int32

const (
	CardType_Normal  CardType = 0
	CardType_Feature CardType = 1
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "Normal",
		1: "Feature",
	}
	CardType_value = map[string]int32{
		"Normal":  0,
		"Feature": 1,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[6].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[6]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{6}
}

type WildDrawFourStatus int32

const (
	WildDrawFourStatus_ChallengerLose WildDrawFourStatus = 0 //挑战者失败
	WildDrawFourStatus_ChallengedLose WildDrawFourStatus = 1 //被挑战者失败
)

// Enum value maps for WildDrawFourStatus.
var (
	WildDrawFourStatus_name = map[int32]string{
		0: "ChallengerLose",
		1: "ChallengedLose",
	}
	WildDrawFourStatus_value = map[string]int32{
		"ChallengerLose": 0,
		"ChallengedLose": 1,
	}
)

func (x WildDrawFourStatus) Enum() *WildDrawFourStatus {
	p := new(WildDrawFourStatus)
	*p = x
	return p
}

func (x WildDrawFourStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WildDrawFourStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[7].Descriptor()
}

func (WildDrawFourStatus) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[7]
}

func (x WildDrawFourStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WildDrawFourStatus.Descriptor instead.
func (WildDrawFourStatus) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{7}
}

type Source int32

const (
	Source_QQ Source = 0
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "QQ",
	}
	Source_value = map[string]int32{
		"QQ": 0,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[8].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[8]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source.Descriptor instead.
func (Source) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{8}
}

type VerifyMethod int32

const (
	VerifyMethod_Password   VerifyMethod = 0
	VerifyMethod_VerifyCode VerifyMethod = 1
)

// Enum value maps for VerifyMethod.
var (
	VerifyMethod_name = map[int32]string{
		0: "Password",
		1: "VerifyCode",
	}
	VerifyMethod_value = map[string]int32{
		"Password":   0,
		"VerifyCode": 1,
	}
)

func (x VerifyMethod) Enum() *VerifyMethod {
	p := new(VerifyMethod)
	*p = x
	return p
}

func (x VerifyMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerifyMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_uno_protos_uno_uno_proto_enumTypes[9].Descriptor()
}

func (VerifyMethod) Type() protoreflect.EnumType {
	return &file_plugin_uno_protos_uno_uno_proto_enumTypes[9]
}

func (x VerifyMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerifyMethod.Descriptor instead.
func (VerifyMethod) EnumDescriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{9}
}

type SendCard struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SenderId           string                 `protobuf:"bytes,1,opt,name=SenderId,proto3" json:"SenderId,omitempty"`
	SendCard           *Card                  `protobuf:"bytes,2,opt,name=SendCard,proto3" json:"SendCard,omitempty"`
	WildDrawFourStatus *WildDrawFourStatus    `protobuf:"varint,3,opt,name=WildDrawFourStatus,proto3,enum=susubot.plugin.uno.WildDrawFourStatus,oneof" json:"WildDrawFourStatus,omitempty"`
	FeatureEffected    bool                   `protobuf:"varint,4,opt,name=FeatureEffected,proto3" json:"FeatureEffected,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SendCard) Reset() {
	*x = SendCard{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCard) ProtoMessage() {}

func (x *SendCard) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCard.ProtoReflect.Descriptor instead.
func (*SendCard) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{0}
}

func (x *SendCard) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *SendCard) GetSendCard() *Card {
	if x != nil {
		return x.SendCard
	}
	return nil
}

func (x *SendCard) GetWildDrawFourStatus() WildDrawFourStatus {
	if x != nil && x.WildDrawFourStatus != nil {
		return *x.WildDrawFourStatus
	}
	return WildDrawFourStatus_ChallengerLose
}

func (x *SendCard) GetFeatureEffected() bool {
	if x != nil {
		return x.FeatureEffected
	}
	return false
}

type Card struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NormalCard    *NormalCard            `protobuf:"bytes,1,opt,name=NormalCard,proto3,oneof" json:"NormalCard,omitempty"`
	FeatureCard   *FeatureCard           `protobuf:"bytes,2,opt,name=FeatureCard,proto3,oneof" json:"FeatureCard,omitempty"`
	Type          CardType               `protobuf:"varint,3,opt,name=Type,proto3,enum=susubot.plugin.uno.CardType" json:"Type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{1}
}

func (x *Card) GetNormalCard() *NormalCard {
	if x != nil {
		return x.NormalCard
	}
	return nil
}

func (x *Card) GetFeatureCard() *FeatureCard {
	if x != nil {
		return x.FeatureCard
	}
	return nil
}

func (x *Card) GetType() CardType {
	if x != nil {
		return x.Type
	}
	return CardType_Normal
}

type NormalCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Color         CardColor              `protobuf:"varint,1,opt,name=Color,proto3,enum=susubot.plugin.uno.CardColor" json:"Color,omitempty"`
	Number        CardNumber             `protobuf:"varint,2,opt,name=Number,proto3,enum=susubot.plugin.uno.CardNumber" json:"Number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NormalCard) Reset() {
	*x = NormalCard{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalCard) ProtoMessage() {}

func (x *NormalCard) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalCard.ProtoReflect.Descriptor instead.
func (*NormalCard) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{2}
}

func (x *NormalCard) GetColor() CardColor {
	if x != nil {
		return x.Color
	}
	return CardColor_Blue
}

func (x *NormalCard) GetNumber() CardNumber {
	if x != nil {
		return x.Number
	}
	return CardNumber_Zero
}

type FeatureCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Color         CardColor              `protobuf:"varint,1,opt,name=Color,proto3,enum=susubot.plugin.uno.CardColor" json:"Color,omitempty"`
	FeatureCard   FeatureCards           `protobuf:"varint,2,opt,name=FeatureCard,proto3,enum=susubot.plugin.uno.FeatureCards" json:"FeatureCard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeatureCard) Reset() {
	*x = FeatureCard{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureCard) ProtoMessage() {}

func (x *FeatureCard) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureCard.ProtoReflect.Descriptor instead.
func (*FeatureCard) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{3}
}

func (x *FeatureCard) GetColor() CardColor {
	if x != nil {
		return x.Color
	}
	return CardColor_Blue
}

func (x *FeatureCard) GetFeatureCard() FeatureCards {
	if x != nil {
		return x.FeatureCard
	}
	return FeatureCards_Skip
}

type PlayerAccountInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerAccountInfo) Reset() {
	*x = PlayerAccountInfo{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAccountInfo) ProtoMessage() {}

func (x *PlayerAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAccountInfo.ProtoReflect.Descriptor instead.
func (*PlayerAccountInfo) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerAccountInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayerAccountInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PlayerRoomInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomHash      string                 `protobuf:"bytes,1,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	Cards         []*Card                `protobuf:"bytes,2,rep,name=Cards,proto3" json:"Cards,omitempty"`
	DrawCard      *Card                  `protobuf:"bytes,3,opt,name=DrawCard,proto3,oneof" json:"DrawCard,omitempty"`
	Hash          string                 `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerRoomInfo) Reset() {
	*x = PlayerRoomInfo{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRoomInfo) ProtoMessage() {}

func (x *PlayerRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRoomInfo.ProtoReflect.Descriptor instead.
func (*PlayerRoomInfo) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerRoomInfo) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

func (x *PlayerRoomInfo) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *PlayerRoomInfo) GetDrawCard() *Card {
	if x != nil {
		return x.DrawCard
	}
	return nil
}

func (x *PlayerRoomInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type PlayerInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PlayerAccountInfo *PlayerAccountInfo     `protobuf:"bytes,1,opt,name=PlayerAccountInfo,proto3" json:"PlayerAccountInfo,omitempty"`
	PlayerRoomInfo    *PlayerRoomInfo        `protobuf:"bytes,2,opt,name=PlayerRoomInfo,proto3,oneof" json:"PlayerRoomInfo,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerInfo) GetPlayerAccountInfo() *PlayerAccountInfo {
	if x != nil {
		return x.PlayerAccountInfo
	}
	return nil
}

func (x *PlayerInfo) GetPlayerRoomInfo() *PlayerRoomInfo {
	if x != nil {
		return x.PlayerRoomInfo
	}
	return nil
}

type RoomSimple struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Stage         Stage                  `protobuf:"varint,2,opt,name=Stage,proto3,enum=susubot.plugin.uno.Stage" json:"Stage,omitempty"`
	OperatorNow   *PlayerAccountInfo     `protobuf:"bytes,3,opt,name=OperatorNow,proto3,oneof" json:"OperatorNow,omitempty"`
	Players       []*PlayerAccountInfo   `protobuf:"bytes,4,rep,name=Players,proto3" json:"Players,omitempty"`
	Banker        *PlayerAccountInfo     `protobuf:"bytes,5,opt,name=Banker,proto3,oneof" json:"Banker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomSimple) Reset() {
	*x = RoomSimple{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomSimple) ProtoMessage() {}

func (x *RoomSimple) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomSimple.ProtoReflect.Descriptor instead.
func (*RoomSimple) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{7}
}

func (x *RoomSimple) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RoomSimple) GetStage() Stage {
	if x != nil {
		return x.Stage
	}
	return Stage_WaitingStart
}

func (x *RoomSimple) GetOperatorNow() *PlayerAccountInfo {
	if x != nil {
		return x.OperatorNow
	}
	return nil
}

func (x *RoomSimple) GetPlayers() []*PlayerAccountInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RoomSimple) GetBanker() *PlayerAccountInfo {
	if x != nil {
		return x.Banker
	}
	return nil
}

type RoomExtra struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Stage         Stage                  `protobuf:"varint,2,opt,name=Stage,proto3,enum=susubot.plugin.uno.Stage" json:"Stage,omitempty"`
	Banker        *PlayerInfo            `protobuf:"bytes,3,opt,name=Banker,proto3,oneof" json:"Banker,omitempty"`
	CardHeap      []*Card                `protobuf:"bytes,4,rep,name=CardHeap,proto3" json:"CardHeap,omitempty"`
	CardPool      []*SendCard            `protobuf:"bytes,5,rep,name=CardPool,proto3" json:"CardPool,omitempty"`
	OperatorNow   *PlayerInfo            `protobuf:"bytes,6,opt,name=OperatorNow,proto3,oneof" json:"OperatorNow,omitempty"`
	Players       []*PlayerInfo          `protobuf:"bytes,7,rep,name=Players,proto3" json:"Players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomExtra) Reset() {
	*x = RoomExtra{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomExtra) ProtoMessage() {}

func (x *RoomExtra) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomExtra.ProtoReflect.Descriptor instead.
func (*RoomExtra) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{8}
}

func (x *RoomExtra) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RoomExtra) GetStage() Stage {
	if x != nil {
		return x.Stage
	}
	return Stage_WaitingStart
}

func (x *RoomExtra) GetBanker() *PlayerInfo {
	if x != nil {
		return x.Banker
	}
	return nil
}

func (x *RoomExtra) GetCardHeap() []*Card {
	if x != nil {
		return x.CardHeap
	}
	return nil
}

func (x *RoomExtra) GetCardPool() []*SendCard {
	if x != nil {
		return x.CardPool
	}
	return nil
}

func (x *RoomExtra) GetOperatorNow() *PlayerInfo {
	if x != nil {
		return x.OperatorNow
	}
	return nil
}

func (x *RoomExtra) GetPlayers() []*PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{9}
}

type BasicResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicResponse) Reset() {
	*x = BasicResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicResponse) ProtoMessage() {}

func (x *BasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicResponse.ProtoReflect.Descriptor instead.
func (*BasicResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{10}
}

func (x *BasicResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

type CreateRoomResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	RoomHash      string                 `protobuf:"bytes,2,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRoomResponse) Reset() {
	*x = CreateRoomResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomResponse) ProtoMessage() {}

func (x *CreateRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomResponse.ProtoReflect.Descriptor instead.
func (*CreateRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRoomResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *CreateRoomResponse) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type GetRoomRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomHash      string                 `protobuf:"bytes,1,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoomRequest) Reset() {
	*x = GetRoomRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomRequest) ProtoMessage() {}

func (x *GetRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomRequest.ProtoReflect.Descriptor instead.
func (*GetRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{12}
}

func (x *GetRoomRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type GetRoomResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	Simple        *RoomSimple            `protobuf:"bytes,2,opt,name=Simple,proto3,oneof" json:"Simple,omitempty"`
	Extra         *RoomExtra             `protobuf:"bytes,3,opt,name=Extra,proto3,oneof" json:"Extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoomResponse) Reset() {
	*x = GetRoomResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomResponse) ProtoMessage() {}

func (x *GetRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomResponse.ProtoReflect.Descriptor instead.
func (*GetRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{13}
}

func (x *GetRoomResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *GetRoomResponse) GetSimple() *RoomSimple {
	if x != nil {
		return x.Simple
	}
	return nil
}

func (x *GetRoomResponse) GetExtra() *RoomExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetPlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomHash      string                 `protobuf:"bytes,1,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	PlayerId      string                 `protobuf:"bytes,2,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlayerRequest) Reset() {
	*x = GetPlayerRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerRequest) ProtoMessage() {}

func (x *GetPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{14}
}

func (x *GetPlayerRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

func (x *GetPlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetPlayerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	Simple        *PlayerAccountInfo     `protobuf:"bytes,2,opt,name=Simple,proto3,oneof" json:"Simple,omitempty"`
	Extra         *PlayerInfo            `protobuf:"bytes,3,opt,name=Extra,proto3,oneof" json:"Extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlayerResponse) Reset() {
	*x = GetPlayerResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerResponse) ProtoMessage() {}

func (x *GetPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerResponse.ProtoReflect.Descriptor instead.
func (*GetPlayerResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{15}
}

func (x *GetPlayerResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *GetPlayerResponse) GetSimple() *PlayerAccountInfo {
	if x != nil {
		return x.Simple
	}
	return nil
}

func (x *GetPlayerResponse) GetExtra() *PlayerInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetRoomsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rooms         []*RoomSimple          `protobuf:"bytes,1,rep,name=Rooms,proto3" json:"Rooms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoomsResponse) Reset() {
	*x = GetRoomsResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoomsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomsResponse) ProtoMessage() {}

func (x *GetRoomsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomsResponse.ProtoReflect.Descriptor instead.
func (*GetRoomsResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{16}
}

func (x *GetRoomsResponse) GetRooms() []*RoomSimple {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type JoinRoomRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerInfo    *PlayerAccountInfo     `protobuf:"bytes,1,opt,name=PlayerInfo,proto3" json:"PlayerInfo,omitempty"`
	RoomHash      string                 `protobuf:"bytes,2,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinRoomRequest) Reset() {
	*x = JoinRoomRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomRequest) ProtoMessage() {}

func (x *JoinRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomRequest.ProtoReflect.Descriptor instead.
func (*JoinRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{17}
}

func (x *JoinRoomRequest) GetPlayerInfo() *PlayerAccountInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *JoinRoomRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type JoinRoomResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	Players       []*PlayerAccountInfo   `protobuf:"bytes,2,rep,name=Players,proto3" json:"Players,omitempty"`
	VerifyHash    string                 `protobuf:"bytes,3,opt,name=VerifyHash,proto3" json:"VerifyHash,omitempty"` //房间内玩家鉴权哈希，若存在特权哈希则可无视
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinRoomResponse) Reset() {
	*x = JoinRoomResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomResponse) ProtoMessage() {}

func (x *JoinRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomResponse.ProtoReflect.Descriptor instead.
func (*JoinRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{18}
}

func (x *JoinRoomResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *JoinRoomResponse) GetPlayers() []*PlayerAccountInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *JoinRoomResponse) GetVerifyHash() string {
	if x != nil {
		return x.VerifyHash
	}
	return ""
}

type ExitRoomRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	RoomHash      string                 `protobuf:"bytes,2,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExitRoomRequest) Reset() {
	*x = ExitRoomRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExitRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRoomRequest) ProtoMessage() {}

func (x *ExitRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRoomRequest.ProtoReflect.Descriptor instead.
func (*ExitRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{19}
}

func (x *ExitRoomRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ExitRoomRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type ExitRoomResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	Players       []*PlayerAccountInfo   `protobuf:"bytes,2,rep,name=Players,proto3" json:"Players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExitRoomResponse) Reset() {
	*x = ExitRoomResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExitRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRoomResponse) ProtoMessage() {}

func (x *ExitRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRoomResponse.ProtoReflect.Descriptor instead.
func (*ExitRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{20}
}

func (x *ExitRoomResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *ExitRoomResponse) GetPlayers() []*PlayerAccountInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

type StartRoomRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomHash      string                 `protobuf:"bytes,1,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRoomRequest) Reset() {
	*x = StartRoomRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoomRequest) ProtoMessage() {}

func (x *StartRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoomRequest.ProtoReflect.Descriptor instead.
func (*StartRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{21}
}

func (x *StartRoomRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type DrawCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	RoomHash      string                 `protobuf:"bytes,2,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawCardRequest) Reset() {
	*x = DrawCardRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardRequest) ProtoMessage() {}

func (x *DrawCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardRequest.ProtoReflect.Descriptor instead.
func (*DrawCardRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{22}
}

func (x *DrawCardRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *DrawCardRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type DrawCardResponse struct {
	state          protoimpl.MessageState                    `protogen:"open.v1"`
	Err            *Errors                                   `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	ElectingBanker *DrawCardResponse_DrawCard_ElectingBanker `protobuf:"bytes,2,opt,name=ElectingBanker,proto3,oneof" json:"ElectingBanker,omitempty"`
	SendingCard    *DrawCardResponse_DrawCard_SendingCard    `protobuf:"bytes,3,opt,name=SendingCard,proto3,oneof" json:"SendingCard,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DrawCardResponse) Reset() {
	*x = DrawCardResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardResponse) ProtoMessage() {}

func (x *DrawCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardResponse.ProtoReflect.Descriptor instead.
func (*DrawCardResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{23}
}

func (x *DrawCardResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *DrawCardResponse) GetElectingBanker() *DrawCardResponse_DrawCard_ElectingBanker {
	if x != nil {
		return x.ElectingBanker
	}
	return nil
}

func (x *DrawCardResponse) GetSendingCard() *DrawCardResponse_DrawCard_SendingCard {
	if x != nil {
		return x.SendingCard
	}
	return nil
}

type SendCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	RoomHash      string                 `protobuf:"bytes,2,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	SendCard      *Card                  `protobuf:"bytes,3,opt,name=SendCard,proto3" json:"SendCard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCardRequest) Reset() {
	*x = SendCardRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCardRequest) ProtoMessage() {}

func (x *SendCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCardRequest.ProtoReflect.Descriptor instead.
func (*SendCardRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{24}
}

func (x *SendCardRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *SendCardRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

func (x *SendCardRequest) GetSendCard() *Card {
	if x != nil {
		return x.SendCard
	}
	return nil
}

type SendCardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	NextOperator  *PlayerAccountInfo     `protobuf:"bytes,2,opt,name=NextOperator,proto3,oneof" json:"NextOperator,omitempty"`
	SenderCards   []*Card                `protobuf:"bytes,3,rep,name=SenderCards,proto3" json:"SenderCards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCardResponse) Reset() {
	*x = SendCardResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCardResponse) ProtoMessage() {}

func (x *SendCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCardResponse.ProtoReflect.Descriptor instead.
func (*SendCardResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{25}
}

func (x *SendCardResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *SendCardResponse) GetNextOperator() *PlayerAccountInfo {
	if x != nil {
		return x.NextOperator
	}
	return nil
}

func (x *SendCardResponse) GetSenderCards() []*Card {
	if x != nil {
		return x.SenderCards
	}
	return nil
}

type NoSendCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	RoomHash      string                 `protobuf:"bytes,2,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoSendCardRequest) Reset() {
	*x = NoSendCardRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoSendCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoSendCardRequest) ProtoMessage() {}

func (x *NoSendCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoSendCardRequest.ProtoReflect.Descriptor instead.
func (*NoSendCardRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{26}
}

func (x *NoSendCardRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *NoSendCardRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type NoSendCardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	NextOperator  *PlayerAccountInfo     `protobuf:"bytes,2,opt,name=NextOperator,proto3,oneof" json:"NextOperator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoSendCardResponse) Reset() {
	*x = NoSendCardResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoSendCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoSendCardResponse) ProtoMessage() {}

func (x *NoSendCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoSendCardResponse.ProtoReflect.Descriptor instead.
func (*NoSendCardResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{27}
}

func (x *NoSendCardResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *NoSendCardResponse) GetNextOperator() *PlayerAccountInfo {
	if x != nil {
		return x.NextOperator
	}
	return nil
}

type CallUNORequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	RoomHash      string                 `protobuf:"bytes,2,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallUNORequest) Reset() {
	*x = CallUNORequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallUNORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallUNORequest) ProtoMessage() {}

func (x *CallUNORequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallUNORequest.ProtoReflect.Descriptor instead.
func (*CallUNORequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{28}
}

func (x *CallUNORequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *CallUNORequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type CallUNOResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	PlayerCard    []*Card                `protobuf:"bytes,2,rep,name=PlayerCard,proto3" json:"PlayerCard,omitempty"` //被罚牌时有效
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallUNOResponse) Reset() {
	*x = CallUNOResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallUNOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallUNOResponse) ProtoMessage() {}

func (x *CallUNOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallUNOResponse.ProtoReflect.Descriptor instead.
func (*CallUNOResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{29}
}

func (x *CallUNOResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *CallUNOResponse) GetPlayerCard() []*Card {
	if x != nil {
		return x.PlayerCard
	}
	return nil
}

type ChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	RoomHash      string                 `protobuf:"bytes,2,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeRequest) Reset() {
	*x = ChallengeRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeRequest) ProtoMessage() {}

func (x *ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeRequest.ProtoReflect.Descriptor instead.
func (*ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{30}
}

func (x *ChallengeRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ChallengeRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type ChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Err           *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	IsWin         bool                   `protobuf:"varint,2,opt,name=IsWin,proto3" json:"IsWin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeResponse) Reset() {
	*x = ChallengeResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse) ProtoMessage() {}

func (x *ChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse.ProtoReflect.Descriptor instead.
func (*ChallengeResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{31}
}

func (x *ChallengeResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *ChallengeResponse) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

type IndicateUNORequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	TargetId      string                 `protobuf:"bytes,2,opt,name=TargetId,proto3" json:"TargetId,omitempty"`
	RoomHash      string                 `protobuf:"bytes,3,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndicateUNORequest) Reset() {
	*x = IndicateUNORequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndicateUNORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicateUNORequest) ProtoMessage() {}

func (x *IndicateUNORequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicateUNORequest.ProtoReflect.Descriptor instead.
func (*IndicateUNORequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{32}
}

func (x *IndicateUNORequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *IndicateUNORequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *IndicateUNORequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type IndicateUNOResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Err               *Errors                `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	IndicateSuccessed bool                   `protobuf:"varint,2,opt,name=IndicateSuccessed,proto3" json:"IndicateSuccessed,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *IndicateUNOResponse) Reset() {
	*x = IndicateUNOResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndicateUNOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicateUNOResponse) ProtoMessage() {}

func (x *IndicateUNOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicateUNOResponse.ProtoReflect.Descriptor instead.
func (*IndicateUNOResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{33}
}

func (x *IndicateUNOResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *IndicateUNOResponse) GetIndicateSuccessed() bool {
	if x != nil {
		return x.IndicateSuccessed
	}
	return false
}

type RoomEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomHash      string                 `protobuf:"bytes,1,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	PlayerHash    string                 `protobuf:"bytes,2,opt,name=PlayerHash,proto3" json:"PlayerHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomEventRequest) Reset() {
	*x = RoomEventRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEventRequest) ProtoMessage() {}

func (x *RoomEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEventRequest.ProtoReflect.Descriptor instead.
func (*RoomEventRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{34}
}

func (x *RoomEventRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

func (x *RoomEventRequest) GetPlayerHash() string {
	if x != nil {
		return x.PlayerHash
	}
	return ""
}

type RoomEventResponse struct {
	state                 protoimpl.MessageState                        `protogen:"open.v1"`
	Err                   *Errors                                       `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	GameFinish            *RoomEventResponse_GameFinishEvent            `protobuf:"bytes,2,opt,name=GameFinish,proto3,oneof" json:"GameFinish,omitempty"`
	DrawCard_IntoSendCard *RoomEventResponse_DrawCard_IntoSendCardEvent `protobuf:"bytes,3,opt,name=DrawCard_IntoSendCard,json=DrawCardIntoSendCard,proto3,oneof" json:"DrawCard_IntoSendCard,omitempty"`
	DrawCard_Skipped      *RoomEventResponse_DrawCard_SkippedEvent      `protobuf:"bytes,4,opt,name=DrawCard_Skipped,json=DrawCardSkipped,proto3,oneof" json:"DrawCard_Skipped,omitempty"`
	IndicateUNO_Success   *RoomEventResponse_IndicateUNO_SuccessEvent   `protobuf:"bytes,5,opt,name=IndicateUNO_Success,json=IndicateUNOSuccess,proto3,oneof" json:"IndicateUNO_Success,omitempty"`
	HandCardUpdate        *RoomEventResponse_HandCardUpdateEvent        `protobuf:"bytes,6,opt,name=HandCardUpdate,proto3,oneof" json:"HandCardUpdate,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RoomEventResponse) Reset() {
	*x = RoomEventResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEventResponse) ProtoMessage() {}

func (x *RoomEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEventResponse.ProtoReflect.Descriptor instead.
func (*RoomEventResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{35}
}

func (x *RoomEventResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *RoomEventResponse) GetGameFinish() *RoomEventResponse_GameFinishEvent {
	if x != nil {
		return x.GameFinish
	}
	return nil
}

func (x *RoomEventResponse) GetDrawCard_IntoSendCard() *RoomEventResponse_DrawCard_IntoSendCardEvent {
	if x != nil {
		return x.DrawCard_IntoSendCard
	}
	return nil
}

func (x *RoomEventResponse) GetDrawCard_Skipped() *RoomEventResponse_DrawCard_SkippedEvent {
	if x != nil {
		return x.DrawCard_Skipped
	}
	return nil
}

func (x *RoomEventResponse) GetIndicateUNO_Success() *RoomEventResponse_IndicateUNO_SuccessEvent {
	if x != nil {
		return x.IndicateUNO_Success
	}
	return nil
}

func (x *RoomEventResponse) GetHandCardUpdate() *RoomEventResponse_HandCardUpdateEvent {
	if x != nil {
		return x.HandCardUpdate
	}
	return nil
}

type CreateUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInfo      *PlayerAccountInfo     `protobuf:"bytes,1,opt,name=UserInfo,proto3" json:"UserInfo,omitempty"`
	Source        Source                 `protobuf:"varint,2,opt,name=Source,proto3,enum=susubot.plugin.uno.Source" json:"Source,omitempty"`
	VerifyHash    string                 `protobuf:"bytes,3,opt,name=VerifyHash,proto3" json:"VerifyHash,omitempty"`
	Password      string                 `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{36}
}

func (x *CreateUserRequest) GetUserInfo() *PlayerAccountInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CreateUserRequest) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_QQ
}

func (x *CreateUserRequest) GetVerifyHash() string {
	if x != nil {
		return x.VerifyHash
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GetUserRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Method        VerifyMethod                     `protobuf:"varint,1,opt,name=method,proto3,enum=susubot.plugin.uno.VerifyMethod" json:"method,omitempty"`
	Password      *GetUserRequest_MethodPassword   `protobuf:"bytes,2,opt,name=Password,proto3,oneof" json:"Password,omitempty"`
	VerifyCode    *GetUserRequest_MethodVerifyCode `protobuf:"bytes,3,opt,name=VerifyCode,proto3,oneof" json:"VerifyCode,omitempty"`
	UserId        string                           `protobuf:"bytes,4,opt,name=UserId,proto3" json:"UserId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{37}
}

func (x *GetUserRequest) GetMethod() VerifyMethod {
	if x != nil {
		return x.Method
	}
	return VerifyMethod_Password
}

func (x *GetUserRequest) GetPassword() *GetUserRequest_MethodPassword {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *GetUserRequest) GetVerifyCode() *GetUserRequest_MethodVerifyCode {
	if x != nil {
		return x.VerifyCode
	}
	return nil
}

func (x *GetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInfo      *PlayerAccountInfo     `protobuf:"bytes,1,opt,name=UserInfo,proto3" json:"UserInfo,omitempty"`
	UserHash      string                 `protobuf:"bytes,2,opt,name=UserHash,proto3" json:"UserHash,omitempty"`
	Err           *Errors                `protobuf:"varint,3,opt,name=err,proto3,enum=susubot.plugin.uno.Errors,oneof" json:"err,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserResponse) GetUserInfo() *PlayerAccountInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *GetUserResponse) GetUserHash() string {
	if x != nil {
		return x.UserHash
	}
	return ""
}

func (x *GetUserResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

type TEST_SetPlayerCardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Cards         []*Card                `protobuf:"bytes,2,rep,name=Cards,proto3" json:"Cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TEST_SetPlayerCardRequest) Reset() {
	*x = TEST_SetPlayerCardRequest{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TEST_SetPlayerCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEST_SetPlayerCardRequest) ProtoMessage() {}

func (x *TEST_SetPlayerCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEST_SetPlayerCardRequest.ProtoReflect.Descriptor instead.
func (*TEST_SetPlayerCardRequest) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{39}
}

func (x *TEST_SetPlayerCardRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *TEST_SetPlayerCardRequest) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type DrawCardResponse_DrawCard_ElectingBanker struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ElectBankerCard *Card                  `protobuf:"bytes,1,opt,name=ElectBankerCard,proto3" json:"ElectBankerCard,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DrawCardResponse_DrawCard_ElectingBanker) Reset() {
	*x = DrawCardResponse_DrawCard_ElectingBanker{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawCardResponse_DrawCard_ElectingBanker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardResponse_DrawCard_ElectingBanker) ProtoMessage() {}

func (x *DrawCardResponse_DrawCard_ElectingBanker) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardResponse_DrawCard_ElectingBanker.ProtoReflect.Descriptor instead.
func (*DrawCardResponse_DrawCard_ElectingBanker) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{23, 0}
}

func (x *DrawCardResponse_DrawCard_ElectingBanker) GetElectBankerCard() *Card {
	if x != nil {
		return x.ElectBankerCard
	}
	return nil
}

type DrawCardResponse_DrawCard_SendingCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerCard    []*Card                `protobuf:"bytes,1,rep,name=PlayerCard,proto3" json:"PlayerCard,omitempty"`
	DrawCard      *Card                  `protobuf:"bytes,2,opt,name=DrawCard,proto3" json:"DrawCard,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawCardResponse_DrawCard_SendingCard) Reset() {
	*x = DrawCardResponse_DrawCard_SendingCard{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawCardResponse_DrawCard_SendingCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardResponse_DrawCard_SendingCard) ProtoMessage() {}

func (x *DrawCardResponse_DrawCard_SendingCard) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardResponse_DrawCard_SendingCard.ProtoReflect.Descriptor instead.
func (*DrawCardResponse_DrawCard_SendingCard) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{23, 1}
}

func (x *DrawCardResponse_DrawCard_SendingCard) GetPlayerCard() []*Card {
	if x != nil {
		return x.PlayerCard
	}
	return nil
}

func (x *DrawCardResponse_DrawCard_SendingCard) GetDrawCard() *Card {
	if x != nil {
		return x.DrawCard
	}
	return nil
}

type RoomEventResponse_GameFinishEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*PlayerInfo          `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"`
	Winner        *PlayerInfo            `protobuf:"bytes,2,opt,name=Winner,proto3" json:"Winner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomEventResponse_GameFinishEvent) Reset() {
	*x = RoomEventResponse_GameFinishEvent{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEventResponse_GameFinishEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEventResponse_GameFinishEvent) ProtoMessage() {}

func (x *RoomEventResponse_GameFinishEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEventResponse_GameFinishEvent.ProtoReflect.Descriptor instead.
func (*RoomEventResponse_GameFinishEvent) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{35, 0}
}

func (x *RoomEventResponse_GameFinishEvent) GetPlayers() []*PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RoomEventResponse_GameFinishEvent) GetWinner() *PlayerInfo {
	if x != nil {
		return x.Winner
	}
	return nil
}

type RoomEventResponse_DrawCard_IntoSendCardEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*PlayerAccountInfo   `protobuf:"bytes,1,rep,name=Players,proto3" json:"Players,omitempty"`
	Banker        *PlayerAccountInfo     `protobuf:"bytes,2,opt,name=Banker,proto3" json:"Banker,omitempty"`     //
	LeadCard      *Card                  `protobuf:"bytes,3,opt,name=LeadCard,proto3" json:"LeadCard,omitempty"` //引牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomEventResponse_DrawCard_IntoSendCardEvent) Reset() {
	*x = RoomEventResponse_DrawCard_IntoSendCardEvent{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEventResponse_DrawCard_IntoSendCardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEventResponse_DrawCard_IntoSendCardEvent) ProtoMessage() {}

func (x *RoomEventResponse_DrawCard_IntoSendCardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEventResponse_DrawCard_IntoSendCardEvent.ProtoReflect.Descriptor instead.
func (*RoomEventResponse_DrawCard_IntoSendCardEvent) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{35, 1}
}

func (x *RoomEventResponse_DrawCard_IntoSendCardEvent) GetPlayers() []*PlayerAccountInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RoomEventResponse_DrawCard_IntoSendCardEvent) GetBanker() *PlayerAccountInfo {
	if x != nil {
		return x.Banker
	}
	return nil
}

func (x *RoomEventResponse_DrawCard_IntoSendCardEvent) GetLeadCard() *Card {
	if x != nil {
		return x.LeadCard
	}
	return nil
}

type RoomEventResponse_DrawCard_SkippedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NextOperator  *PlayerAccountInfo     `protobuf:"bytes,1,opt,name=NextOperator,proto3" json:"NextOperator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomEventResponse_DrawCard_SkippedEvent) Reset() {
	*x = RoomEventResponse_DrawCard_SkippedEvent{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEventResponse_DrawCard_SkippedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEventResponse_DrawCard_SkippedEvent) ProtoMessage() {}

func (x *RoomEventResponse_DrawCard_SkippedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEventResponse_DrawCard_SkippedEvent.ProtoReflect.Descriptor instead.
func (*RoomEventResponse_DrawCard_SkippedEvent) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{35, 2}
}

func (x *RoomEventResponse_DrawCard_SkippedEvent) GetNextOperator() *PlayerAccountInfo {
	if x != nil {
		return x.NextOperator
	}
	return nil
}

type RoomEventResponse_IndicateUNO_SuccessEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Punished      *PlayerAccountInfo     `protobuf:"bytes,1,opt,name=Punished,proto3" json:"Punished,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomEventResponse_IndicateUNO_SuccessEvent) Reset() {
	*x = RoomEventResponse_IndicateUNO_SuccessEvent{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEventResponse_IndicateUNO_SuccessEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEventResponse_IndicateUNO_SuccessEvent) ProtoMessage() {}

func (x *RoomEventResponse_IndicateUNO_SuccessEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEventResponse_IndicateUNO_SuccessEvent.ProtoReflect.Descriptor instead.
func (*RoomEventResponse_IndicateUNO_SuccessEvent) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{35, 3}
}

func (x *RoomEventResponse_IndicateUNO_SuccessEvent) GetPunished() *PlayerAccountInfo {
	if x != nil {
		return x.Punished
	}
	return nil
}

type RoomEventResponse_HandCardUpdateEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updated       *PlayerAccountInfo     `protobuf:"bytes,1,opt,name=Updated,proto3" json:"Updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomEventResponse_HandCardUpdateEvent) Reset() {
	*x = RoomEventResponse_HandCardUpdateEvent{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEventResponse_HandCardUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEventResponse_HandCardUpdateEvent) ProtoMessage() {}

func (x *RoomEventResponse_HandCardUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEventResponse_HandCardUpdateEvent.ProtoReflect.Descriptor instead.
func (*RoomEventResponse_HandCardUpdateEvent) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{35, 4}
}

func (x *RoomEventResponse_HandCardUpdateEvent) GetUpdated() *PlayerAccountInfo {
	if x != nil {
		return x.Updated
	}
	return nil
}

type GetUserRequest_MethodPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=Password,proto3" json:"Password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRequest_MethodPassword) Reset() {
	*x = GetUserRequest_MethodPassword{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRequest_MethodPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest_MethodPassword) ProtoMessage() {}

func (x *GetUserRequest_MethodPassword) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest_MethodPassword.ProtoReflect.Descriptor instead.
func (*GetUserRequest_MethodPassword) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{37, 0}
}

func (x *GetUserRequest_MethodPassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GetUserRequest_MethodVerifyCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VerifySource  Source                 `protobuf:"varint,1,opt,name=VerifySource,proto3,enum=susubot.plugin.uno.Source" json:"VerifySource,omitempty"`
	VerifyHash    string                 `protobuf:"bytes,2,opt,name=VerifyHash,proto3" json:"VerifyHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRequest_MethodVerifyCode) Reset() {
	*x = GetUserRequest_MethodVerifyCode{}
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRequest_MethodVerifyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest_MethodVerifyCode) ProtoMessage() {}

func (x *GetUserRequest_MethodVerifyCode) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_uno_protos_uno_uno_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest_MethodVerifyCode.ProtoReflect.Descriptor instead.
func (*GetUserRequest_MethodVerifyCode) Descriptor() ([]byte, []int) {
	return file_plugin_uno_protos_uno_uno_proto_rawDescGZIP(), []int{37, 1}
}

func (x *GetUserRequest_MethodVerifyCode) GetVerifySource() Source {
	if x != nil {
		return x.VerifySource
	}
	return Source_QQ
}

func (x *GetUserRequest_MethodVerifyCode) GetVerifyHash() string {
	if x != nil {
		return x.VerifyHash
	}
	return ""
}

var File_plugin_uno_protos_uno_uno_proto protoreflect.FileDescriptor

var file_plugin_uno_protos_uno_uno_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x75, 0x6e, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x75, 0x6e, 0x6f, 0x2f, 0x75, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x5b, 0x0a, 0x12, 0x57, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x46, 0x6f,
	0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x75, 0x6e, 0x6f, 0x2e, 0x57, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x46, 0x6f, 0x75, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x12, 0x57, 0x69, 0x6c, 0x64, 0x44, 0x72,
	0x61, 0x77, 0x46, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x57, 0x69,
	0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x46, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe4, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75,
	0x6e, 0x6f, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x01, 0x52, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x22, 0x79, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e,
	0x6f, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0b,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x22, 0x37, 0x0a, 0x11, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x22,
	0xc5, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53,
	0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x75,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x01, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x22, 0x99, 0x03, 0x0a, 0x09, 0x52, 0x6f,
	0x6f, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x06,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x06,
	0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x43, 0x61, 0x72,
	0x64, 0x48, 0x65, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61, 0x70, 0x12,
	0x38, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x08, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01,
	0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42,
	0x61, 0x6e, 0x6b, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4a,
	0x0a, 0x0d, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e,
	0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x6b, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75,
	0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x2c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f,
	0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0xd8, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x06,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e,
	0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x06,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x05, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48, 0x02, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x06, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x06,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x74, 0x0a, 0x0f, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73,
	0x68, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65,
	0x72, 0x72, 0x22, 0x49, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8e, 0x01,
	0x0a, 0x10, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x2e,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0x49,
	0x0a, 0x0f, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa5, 0x04, 0x0a, 0x10, 0x44, 0x72,
	0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x69, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x75, 0x73, 0x75,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x44,
	0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x5f, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x48, 0x02, 0x52, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x5d,
	0x0a, 0x17, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x86, 0x01,
	0x0a, 0x14, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x34, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x44, 0x72,
	0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72,
	0x64, 0x22, 0x7f, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0c, 0x4e, 0x65,
	0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x4b, 0x0a, 0x11, 0x4e, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0xb0, 0x01, 0x0a,
	0x12, 0x4e, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x48, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x4e, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x43, 0x61,
	0x6c, 0x6c, 0x55, 0x4e, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65,
	0x72, 0x72, 0x22, 0x4a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0x64,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x57, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x72, 0x72, 0x22, 0x68, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x55, 0x4e, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0x7e,
	0x0a, 0x13, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x4e,
	0x0a, 0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x22, 0xd0,
	0x0a, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x7a, 0x0a, 0x15, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x5f,
	0x49, 0x6e, 0x74, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x5f, 0x49, 0x6e, 0x74, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x02, 0x52, 0x14, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x74, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x6b, 0x0a, 0x10, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x73, 0x75,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x03, 0x52, 0x0f, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x13,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x5f, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x75, 0x73, 0x75,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x5f, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x04, 0x52, 0x12, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x66, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x05, 0x52, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x83, 0x01, 0x0a, 0x0f, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x1a, 0xd2, 0x01, 0x0a, 0x1a, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x49, 0x6e,
	0x74, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x3d, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x4c, 0x65, 0x61,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x62, 0x0a, 0x15, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x5f, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49,
	0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x4e, 0x65, 0x78,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x5d, 0x0a, 0x18, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0x56, 0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x5f, 0x49, 0x6e, 0x74, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x53,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xce, 0x03, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75,
	0x6e, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x52, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x75, 0x73, 0x75,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x2c, 0x0a,
	0x0e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x72, 0x0a, 0x10, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x67, 0x0a, 0x19, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x2a, 0x3e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64,
	0x10, 0x02, 0x2a, 0xc6, 0x06, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x07,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4f, 0x52, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x45, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x0a,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x10,
	0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x4e, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x10, 0x0d, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x55, 0x4e, 0x4f, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f,
	0x6e, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10,
	0x11, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x4e, 0x4f,
	0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x15, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x44, 0x72, 0x61,
	0x77, 0x43, 0x61, 0x72, 0x64, 0x10, 0x16, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x10, 0x17, 0x12, 0x1d, 0x0a,
	0x19, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4e, 0x6f, 0x77, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x6f, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x10, 0x1a, 0x12, 0x16, 0x0a,
	0x12, 0x4e, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x10,
	0x1d, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x4e,
	0x45, 0x10, 0x1e, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x6f,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x10, 0x23, 0x2a, 0x40, 0x0a, 0x09, 0x43,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6c, 0x75, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x65, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x04, 0x2a, 0x70, 0x0a,
	0x0a, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x5a,
	0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x77, 0x6f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x6f, 0x75, 0x72, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x69, 0x76, 0x65, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x69, 0x78, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x69, 0x6e, 0x65, 0x10, 0x09, 0x2a,
	0x4e, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x6b, 0x69, 0x70, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x72, 0x61, 0x77, 0x54, 0x77,
	0x6f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x69, 0x6c, 0x64, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x57, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x46, 0x6f, 0x75, 0x72, 0x10, 0x04, 0x2a,
	0x27, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x2a, 0x23, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x01, 0x2a, 0x3c, 0x0a,
	0x12, 0x57, 0x69, 0x6c, 0x64, 0x44, 0x72, 0x61, 0x77, 0x46, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x72, 0x4c, 0x6f, 0x73, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x64, 0x4c, 0x6f, 0x73, 0x65, 0x10, 0x01, 0x2a, 0x10, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x51, 0x10, 0x00, 0x2a, 0x2c, 0x0a,
	0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x32, 0xe8, 0x11, 0x0a, 0x03,
	0x75, 0x6e, 0x6f, 0x12, 0x62, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x09, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x75, 0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x70, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x22, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b,
	0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75,
	0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73,
	0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x52, 0x6f,
	0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x86, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x23, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e,
	0x6f, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a,
	0x27, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x52, 0x6f, 0x6f, 0x6d,
	0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x24, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x2f, 0x7b, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x94, 0x01, 0x0a, 0x08, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x23,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x75, 0x6e, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x32, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x52, 0x6f,
	0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x2f,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x32, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x52,
	0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79,
	0x2f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x9c, 0x01, 0x0a, 0x0a, 0x4e, 0x6f,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x4e, 0x6f,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x4e, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x32,
	0x37, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x52, 0x6f, 0x6f, 0x6d,
	0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x4e, 0x6f,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x07, 0x43, 0x61, 0x6c,
	0x6c, 0x55, 0x4e, 0x4f, 0x12, 0x22, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x4e,
	0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x55, 0x4e, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x32, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73,
	0x2f, 0x7b, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x70,
	0x6c, 0x61, 0x79, 0x2f, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x4e, 0x4f, 0x12, 0x98, 0x01, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x75, 0x73, 0x75,
	0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x32, 0x36,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x52, 0x6f, 0x6f, 0x6d, 0x48,
	0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x12, 0x26, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x75, 0x6e, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x4e, 0x4f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a,
	0x08, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x32, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x55, 0x4e, 0x4f, 0x12, 0x90, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x2f, 0x7b, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x70, 0x6c, 0x61,
	0x79, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x68, 0x7d, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x1a, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x78, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x3a, 0x01, 0x2a, 0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x66,
	0x0a, 0x12, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x2d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x75, 0x6e, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x75, 0x6e, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_uno_protos_uno_uno_proto_rawDescOnce sync.Once
	file_plugin_uno_protos_uno_uno_proto_rawDescData = file_plugin_uno_protos_uno_uno_proto_rawDesc
)

func file_plugin_uno_protos_uno_uno_proto_rawDescGZIP() []byte {
	file_plugin_uno_protos_uno_uno_proto_rawDescOnce.Do(func() {
		file_plugin_uno_protos_uno_uno_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_uno_protos_uno_uno_proto_rawDescData)
	})
	return file_plugin_uno_protos_uno_uno_proto_rawDescData
}

var file_plugin_uno_protos_uno_uno_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_plugin_uno_protos_uno_uno_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_plugin_uno_protos_uno_uno_proto_goTypes = []any{
	(Stage)(0),                                           // 0: susubot.plugin.uno.Stage
	(Errors)(0),                                          // 1: susubot.plugin.uno.Errors
	(CardColor)(0),                                       // 2: susubot.plugin.uno.CardColor
	(CardNumber)(0),                                      // 3: susubot.plugin.uno.CardNumber
	(FeatureCards)(0),                                    // 4: susubot.plugin.uno.FeatureCards
	(SendCardActions)(0),                                 // 5: susubot.plugin.uno.SendCardActions
	(CardType)(0),                                        // 6: susubot.plugin.uno.CardType
	(WildDrawFourStatus)(0),                              // 7: susubot.plugin.uno.WildDrawFourStatus
	(Source)(0),                                          // 8: susubot.plugin.uno.Source
	(VerifyMethod)(0),                                    // 9: susubot.plugin.uno.VerifyMethod
	(*SendCard)(nil),                                     // 10: susubot.plugin.uno.SendCard
	(*Card)(nil),                                         // 11: susubot.plugin.uno.Card
	(*NormalCard)(nil),                                   // 12: susubot.plugin.uno.NormalCard
	(*FeatureCard)(nil),                                  // 13: susubot.plugin.uno.FeatureCard
	(*PlayerAccountInfo)(nil),                            // 14: susubot.plugin.uno.PlayerAccountInfo
	(*PlayerRoomInfo)(nil),                               // 15: susubot.plugin.uno.PlayerRoomInfo
	(*PlayerInfo)(nil),                                   // 16: susubot.plugin.uno.PlayerInfo
	(*RoomSimple)(nil),                                   // 17: susubot.plugin.uno.RoomSimple
	(*RoomExtra)(nil),                                    // 18: susubot.plugin.uno.RoomExtra
	(*Empty)(nil),                                        // 19: susubot.plugin.uno.Empty
	(*BasicResponse)(nil),                                // 20: susubot.plugin.uno.BasicResponse
	(*CreateRoomResponse)(nil),                           // 21: susubot.plugin.uno.CreateRoomResponse
	(*GetRoomRequest)(nil),                               // 22: susubot.plugin.uno.GetRoomRequest
	(*GetRoomResponse)(nil),                              // 23: susubot.plugin.uno.GetRoomResponse
	(*GetPlayerRequest)(nil),                             // 24: susubot.plugin.uno.GetPlayerRequest
	(*GetPlayerResponse)(nil),                            // 25: susubot.plugin.uno.GetPlayerResponse
	(*GetRoomsResponse)(nil),                             // 26: susubot.plugin.uno.GetRoomsResponse
	(*JoinRoomRequest)(nil),                              // 27: susubot.plugin.uno.JoinRoomRequest
	(*JoinRoomResponse)(nil),                             // 28: susubot.plugin.uno.JoinRoomResponse
	(*ExitRoomRequest)(nil),                              // 29: susubot.plugin.uno.ExitRoomRequest
	(*ExitRoomResponse)(nil),                             // 30: susubot.plugin.uno.ExitRoomResponse
	(*StartRoomRequest)(nil),                             // 31: susubot.plugin.uno.StartRoomRequest
	(*DrawCardRequest)(nil),                              // 32: susubot.plugin.uno.DrawCardRequest
	(*DrawCardResponse)(nil),                             // 33: susubot.plugin.uno.DrawCardResponse
	(*SendCardRequest)(nil),                              // 34: susubot.plugin.uno.SendCardRequest
	(*SendCardResponse)(nil),                             // 35: susubot.plugin.uno.SendCardResponse
	(*NoSendCardRequest)(nil),                            // 36: susubot.plugin.uno.NoSendCardRequest
	(*NoSendCardResponse)(nil),                           // 37: susubot.plugin.uno.NoSendCardResponse
	(*CallUNORequest)(nil),                               // 38: susubot.plugin.uno.CallUNORequest
	(*CallUNOResponse)(nil),                              // 39: susubot.plugin.uno.CallUNOResponse
	(*ChallengeRequest)(nil),                             // 40: susubot.plugin.uno.ChallengeRequest
	(*ChallengeResponse)(nil),                            // 41: susubot.plugin.uno.ChallengeResponse
	(*IndicateUNORequest)(nil),                           // 42: susubot.plugin.uno.IndicateUNORequest
	(*IndicateUNOResponse)(nil),                          // 43: susubot.plugin.uno.IndicateUNOResponse
	(*RoomEventRequest)(nil),                             // 44: susubot.plugin.uno.RoomEventRequest
	(*RoomEventResponse)(nil),                            // 45: susubot.plugin.uno.RoomEventResponse
	(*CreateUserRequest)(nil),                            // 46: susubot.plugin.uno.CreateUserRequest
	(*GetUserRequest)(nil),                               // 47: susubot.plugin.uno.GetUserRequest
	(*GetUserResponse)(nil),                              // 48: susubot.plugin.uno.GetUserResponse
	(*TEST_SetPlayerCardRequest)(nil),                    // 49: susubot.plugin.uno.TEST_SetPlayerCardRequest
	(*DrawCardResponse_DrawCard_ElectingBanker)(nil),     // 50: susubot.plugin.uno.DrawCardResponse.DrawCard_ElectingBanker
	(*DrawCardResponse_DrawCard_SendingCard)(nil),        // 51: susubot.plugin.uno.DrawCardResponse.DrawCard_SendingCard
	(*RoomEventResponse_GameFinishEvent)(nil),            // 52: susubot.plugin.uno.RoomEventResponse.GameFinishEvent
	(*RoomEventResponse_DrawCard_IntoSendCardEvent)(nil), // 53: susubot.plugin.uno.RoomEventResponse.DrawCard_IntoSendCardEvent
	(*RoomEventResponse_DrawCard_SkippedEvent)(nil),      // 54: susubot.plugin.uno.RoomEventResponse.DrawCard_SkippedEvent
	(*RoomEventResponse_IndicateUNO_SuccessEvent)(nil),   // 55: susubot.plugin.uno.RoomEventResponse.IndicateUNO_SuccessEvent
	(*RoomEventResponse_HandCardUpdateEvent)(nil),        // 56: susubot.plugin.uno.RoomEventResponse.HandCardUpdateEvent
	(*GetUserRequest_MethodPassword)(nil),                // 57: susubot.plugin.uno.GetUserRequest.MethodPassword
	(*GetUserRequest_MethodVerifyCode)(nil),              // 58: susubot.plugin.uno.GetUserRequest.MethodVerifyCode
}
var file_plugin_uno_protos_uno_uno_proto_depIdxs = []int32{
	11, // 0: susubot.plugin.uno.SendCard.SendCard:type_name -> susubot.plugin.uno.Card
	7,  // 1: susubot.plugin.uno.SendCard.WildDrawFourStatus:type_name -> susubot.plugin.uno.WildDrawFourStatus
	12, // 2: susubot.plugin.uno.Card.NormalCard:type_name -> susubot.plugin.uno.NormalCard
	13, // 3: susubot.plugin.uno.Card.FeatureCard:type_name -> susubot.plugin.uno.FeatureCard
	6,  // 4: susubot.plugin.uno.Card.Type:type_name -> susubot.plugin.uno.CardType
	2,  // 5: susubot.plugin.uno.NormalCard.Color:type_name -> susubot.plugin.uno.CardColor
	3,  // 6: susubot.plugin.uno.NormalCard.Number:type_name -> susubot.plugin.uno.CardNumber
	2,  // 7: susubot.plugin.uno.FeatureCard.Color:type_name -> susubot.plugin.uno.CardColor
	4,  // 8: susubot.plugin.uno.FeatureCard.FeatureCard:type_name -> susubot.plugin.uno.FeatureCards
	11, // 9: susubot.plugin.uno.PlayerRoomInfo.Cards:type_name -> susubot.plugin.uno.Card
	11, // 10: susubot.plugin.uno.PlayerRoomInfo.DrawCard:type_name -> susubot.plugin.uno.Card
	14, // 11: susubot.plugin.uno.PlayerInfo.PlayerAccountInfo:type_name -> susubot.plugin.uno.PlayerAccountInfo
	15, // 12: susubot.plugin.uno.PlayerInfo.PlayerRoomInfo:type_name -> susubot.plugin.uno.PlayerRoomInfo
	0,  // 13: susubot.plugin.uno.RoomSimple.Stage:type_name -> susubot.plugin.uno.Stage
	14, // 14: susubot.plugin.uno.RoomSimple.OperatorNow:type_name -> susubot.plugin.uno.PlayerAccountInfo
	14, // 15: susubot.plugin.uno.RoomSimple.Players:type_name -> susubot.plugin.uno.PlayerAccountInfo
	14, // 16: susubot.plugin.uno.RoomSimple.Banker:type_name -> susubot.plugin.uno.PlayerAccountInfo
	0,  // 17: susubot.plugin.uno.RoomExtra.Stage:type_name -> susubot.plugin.uno.Stage
	16, // 18: susubot.plugin.uno.RoomExtra.Banker:type_name -> susubot.plugin.uno.PlayerInfo
	11, // 19: susubot.plugin.uno.RoomExtra.CardHeap:type_name -> susubot.plugin.uno.Card
	10, // 20: susubot.plugin.uno.RoomExtra.CardPool:type_name -> susubot.plugin.uno.SendCard
	16, // 21: susubot.plugin.uno.RoomExtra.OperatorNow:type_name -> susubot.plugin.uno.PlayerInfo
	16, // 22: susubot.plugin.uno.RoomExtra.Players:type_name -> susubot.plugin.uno.PlayerInfo
	1,  // 23: susubot.plugin.uno.BasicResponse.err:type_name -> susubot.plugin.uno.Errors
	1,  // 24: susubot.plugin.uno.CreateRoomResponse.err:type_name -> susubot.plugin.uno.Errors
	1,  // 25: susubot.plugin.uno.GetRoomResponse.err:type_name -> susubot.plugin.uno.Errors
	17, // 26: susubot.plugin.uno.GetRoomResponse.Simple:type_name -> susubot.plugin.uno.RoomSimple
	18, // 27: susubot.plugin.uno.GetRoomResponse.Extra:type_name -> susubot.plugin.uno.RoomExtra
	1,  // 28: susubot.plugin.uno.GetPlayerResponse.err:type_name -> susubot.plugin.uno.Errors
	14, // 29: susubot.plugin.uno.GetPlayerResponse.Simple:type_name -> susubot.plugin.uno.PlayerAccountInfo
	16, // 30: susubot.plugin.uno.GetPlayerResponse.Extra:type_name -> susubot.plugin.uno.PlayerInfo
	17, // 31: susubot.plugin.uno.GetRoomsResponse.Rooms:type_name -> susubot.plugin.uno.RoomSimple
	14, // 32: susubot.plugin.uno.JoinRoomRequest.PlayerInfo:type_name -> susubot.plugin.uno.PlayerAccountInfo
	1,  // 33: susubot.plugin.uno.JoinRoomResponse.err:type_name -> susubot.plugin.uno.Errors
	14, // 34: susubot.plugin.uno.JoinRoomResponse.Players:type_name -> susubot.plugin.uno.PlayerAccountInfo
	1,  // 35: susubot.plugin.uno.ExitRoomResponse.err:type_name -> susubot.plugin.uno.Errors
	14, // 36: susubot.plugin.uno.ExitRoomResponse.Players:type_name -> susubot.plugin.uno.PlayerAccountInfo
	1,  // 37: susubot.plugin.uno.DrawCardResponse.err:type_name -> susubot.plugin.uno.Errors
	50, // 38: susubot.plugin.uno.DrawCardResponse.ElectingBanker:type_name -> susubot.plugin.uno.DrawCardResponse.DrawCard_ElectingBanker
	51, // 39: susubot.plugin.uno.DrawCardResponse.SendingCard:type_name -> susubot.plugin.uno.DrawCardResponse.DrawCard_SendingCard
	11, // 40: susubot.plugin.uno.SendCardRequest.SendCard:type_name -> susubot.plugin.uno.Card
	1,  // 41: susubot.plugin.uno.SendCardResponse.err:type_name -> susubot.plugin.uno.Errors
	14, // 42: susubot.plugin.uno.SendCardResponse.NextOperator:type_name -> susubot.plugin.uno.PlayerAccountInfo
	11, // 43: susubot.plugin.uno.SendCardResponse.SenderCards:type_name -> susubot.plugin.uno.Card
	1,  // 44: susubot.plugin.uno.NoSendCardResponse.err:type_name -> susubot.plugin.uno.Errors
	14, // 45: susubot.plugin.uno.NoSendCardResponse.NextOperator:type_name -> susubot.plugin.uno.PlayerAccountInfo
	1,  // 46: susubot.plugin.uno.CallUNOResponse.err:type_name -> susubot.plugin.uno.Errors
	11, // 47: susubot.plugin.uno.CallUNOResponse.PlayerCard:type_name -> susubot.plugin.uno.Card
	1,  // 48: susubot.plugin.uno.ChallengeResponse.err:type_name -> susubot.plugin.uno.Errors
	1,  // 49: susubot.plugin.uno.IndicateUNOResponse.err:type_name -> susubot.plugin.uno.Errors
	1,  // 50: susubot.plugin.uno.RoomEventResponse.err:type_name -> susubot.plugin.uno.Errors
	52, // 51: susubot.plugin.uno.RoomEventResponse.GameFinish:type_name -> susubot.plugin.uno.RoomEventResponse.GameFinishEvent
	53, // 52: susubot.plugin.uno.RoomEventResponse.DrawCard_IntoSendCard:type_name -> susubot.plugin.uno.RoomEventResponse.DrawCard_IntoSendCardEvent
	54, // 53: susubot.plugin.uno.RoomEventResponse.DrawCard_Skipped:type_name -> susubot.plugin.uno.RoomEventResponse.DrawCard_SkippedEvent
	55, // 54: susubot.plugin.uno.RoomEventResponse.IndicateUNO_Success:type_name -> susubot.plugin.uno.RoomEventResponse.IndicateUNO_SuccessEvent
	56, // 55: susubot.plugin.uno.RoomEventResponse.HandCardUpdate:type_name -> susubot.plugin.uno.RoomEventResponse.HandCardUpdateEvent
	14, // 56: susubot.plugin.uno.CreateUserRequest.UserInfo:type_name -> susubot.plugin.uno.PlayerAccountInfo
	8,  // 57: susubot.plugin.uno.CreateUserRequest.Source:type_name -> susubot.plugin.uno.Source
	9,  // 58: susubot.plugin.uno.GetUserRequest.method:type_name -> susubot.plugin.uno.VerifyMethod
	57, // 59: susubot.plugin.uno.GetUserRequest.Password:type_name -> susubot.plugin.uno.GetUserRequest.MethodPassword
	58, // 60: susubot.plugin.uno.GetUserRequest.VerifyCode:type_name -> susubot.plugin.uno.GetUserRequest.MethodVerifyCode
	14, // 61: susubot.plugin.uno.GetUserResponse.UserInfo:type_name -> susubot.plugin.uno.PlayerAccountInfo
	1,  // 62: susubot.plugin.uno.GetUserResponse.err:type_name -> susubot.plugin.uno.Errors
	11, // 63: susubot.plugin.uno.TEST_SetPlayerCardRequest.Cards:type_name -> susubot.plugin.uno.Card
	11, // 64: susubot.plugin.uno.DrawCardResponse.DrawCard_ElectingBanker.ElectBankerCard:type_name -> susubot.plugin.uno.Card
	11, // 65: susubot.plugin.uno.DrawCardResponse.DrawCard_SendingCard.PlayerCard:type_name -> susubot.plugin.uno.Card
	11, // 66: susubot.plugin.uno.DrawCardResponse.DrawCard_SendingCard.DrawCard:type_name -> susubot.plugin.uno.Card
	16, // 67: susubot.plugin.uno.RoomEventResponse.GameFinishEvent.Players:type_name -> susubot.plugin.uno.PlayerInfo
	16, // 68: susubot.plugin.uno.RoomEventResponse.GameFinishEvent.Winner:type_name -> susubot.plugin.uno.PlayerInfo
	14, // 69: susubot.plugin.uno.RoomEventResponse.DrawCard_IntoSendCardEvent.Players:type_name -> susubot.plugin.uno.PlayerAccountInfo
	14, // 70: susubot.plugin.uno.RoomEventResponse.DrawCard_IntoSendCardEvent.Banker:type_name -> susubot.plugin.uno.PlayerAccountInfo
	11, // 71: susubot.plugin.uno.RoomEventResponse.DrawCard_IntoSendCardEvent.LeadCard:type_name -> susubot.plugin.uno.Card
	14, // 72: susubot.plugin.uno.RoomEventResponse.DrawCard_SkippedEvent.NextOperator:type_name -> susubot.plugin.uno.PlayerAccountInfo
	14, // 73: susubot.plugin.uno.RoomEventResponse.IndicateUNO_SuccessEvent.Punished:type_name -> susubot.plugin.uno.PlayerAccountInfo
	14, // 74: susubot.plugin.uno.RoomEventResponse.HandCardUpdateEvent.Updated:type_name -> susubot.plugin.uno.PlayerAccountInfo
	8,  // 75: susubot.plugin.uno.GetUserRequest.MethodVerifyCode.VerifySource:type_name -> susubot.plugin.uno.Source
	19, // 76: susubot.plugin.uno.uno.CreateRoom:input_type -> susubot.plugin.uno.Empty
	19, // 77: susubot.plugin.uno.uno.GetRooms:input_type -> susubot.plugin.uno.Empty
	22, // 78: susubot.plugin.uno.uno.GetRoom:input_type -> susubot.plugin.uno.GetRoomRequest
	24, // 79: susubot.plugin.uno.uno.GetPlayer:input_type -> susubot.plugin.uno.GetPlayerRequest
	27, // 80: susubot.plugin.uno.uno.JoinRoom:input_type -> susubot.plugin.uno.JoinRoomRequest
	29, // 81: susubot.plugin.uno.uno.ExitRoom:input_type -> susubot.plugin.uno.ExitRoomRequest
	31, // 82: susubot.plugin.uno.uno.StartRoom:input_type -> susubot.plugin.uno.StartRoomRequest
	32, // 83: susubot.plugin.uno.uno.DrawCard:input_type -> susubot.plugin.uno.DrawCardRequest
	34, // 84: susubot.plugin.uno.uno.SendCard:input_type -> susubot.plugin.uno.SendCardRequest
	36, // 85: susubot.plugin.uno.uno.NoSendCard:input_type -> susubot.plugin.uno.NoSendCardRequest
	38, // 86: susubot.plugin.uno.uno.CallUNO:input_type -> susubot.plugin.uno.CallUNORequest
	40, // 87: susubot.plugin.uno.uno.Challenge:input_type -> susubot.plugin.uno.ChallengeRequest
	42, // 88: susubot.plugin.uno.uno.IndicateUNO:input_type -> susubot.plugin.uno.IndicateUNORequest
	44, // 89: susubot.plugin.uno.uno.RoomEvent:input_type -> susubot.plugin.uno.RoomEventRequest
	46, // 90: susubot.plugin.uno.uno.CreateUser:input_type -> susubot.plugin.uno.CreateUserRequest
	47, // 91: susubot.plugin.uno.uno.GetUser:input_type -> susubot.plugin.uno.GetUserRequest
	49, // 92: susubot.plugin.uno.uno.TEST_SetPlayerCard:input_type -> susubot.plugin.uno.TEST_SetPlayerCardRequest
	21, // 93: susubot.plugin.uno.uno.CreateRoom:output_type -> susubot.plugin.uno.CreateRoomResponse
	26, // 94: susubot.plugin.uno.uno.GetRooms:output_type -> susubot.plugin.uno.GetRoomsResponse
	23, // 95: susubot.plugin.uno.uno.GetRoom:output_type -> susubot.plugin.uno.GetRoomResponse
	25, // 96: susubot.plugin.uno.uno.GetPlayer:output_type -> susubot.plugin.uno.GetPlayerResponse
	28, // 97: susubot.plugin.uno.uno.JoinRoom:output_type -> susubot.plugin.uno.JoinRoomResponse
	30, // 98: susubot.plugin.uno.uno.ExitRoom:output_type -> susubot.plugin.uno.ExitRoomResponse
	20, // 99: susubot.plugin.uno.uno.StartRoom:output_type -> susubot.plugin.uno.BasicResponse
	33, // 100: susubot.plugin.uno.uno.DrawCard:output_type -> susubot.plugin.uno.DrawCardResponse
	35, // 101: susubot.plugin.uno.uno.SendCard:output_type -> susubot.plugin.uno.SendCardResponse
	37, // 102: susubot.plugin.uno.uno.NoSendCard:output_type -> susubot.plugin.uno.NoSendCardResponse
	39, // 103: susubot.plugin.uno.uno.CallUNO:output_type -> susubot.plugin.uno.CallUNOResponse
	41, // 104: susubot.plugin.uno.uno.Challenge:output_type -> susubot.plugin.uno.ChallengeResponse
	43, // 105: susubot.plugin.uno.uno.IndicateUNO:output_type -> susubot.plugin.uno.IndicateUNOResponse
	45, // 106: susubot.plugin.uno.uno.RoomEvent:output_type -> susubot.plugin.uno.RoomEventResponse
	20, // 107: susubot.plugin.uno.uno.CreateUser:output_type -> susubot.plugin.uno.BasicResponse
	48, // 108: susubot.plugin.uno.uno.GetUser:output_type -> susubot.plugin.uno.GetUserResponse
	20, // 109: susubot.plugin.uno.uno.TEST_SetPlayerCard:output_type -> susubot.plugin.uno.BasicResponse
	93, // [93:110] is the sub-list for method output_type
	76, // [76:93] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_plugin_uno_protos_uno_uno_proto_init() }
func file_plugin_uno_protos_uno_uno_proto_init() {
	if File_plugin_uno_protos_uno_uno_proto != nil {
		return
	}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[0].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[1].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[5].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[6].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[7].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[8].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[10].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[11].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[13].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[15].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[18].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[20].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[23].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[25].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[27].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[29].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[31].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[33].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[35].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[37].OneofWrappers = []any{}
	file_plugin_uno_protos_uno_uno_proto_msgTypes[38].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_uno_protos_uno_uno_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_uno_protos_uno_uno_proto_goTypes,
		DependencyIndexes: file_plugin_uno_protos_uno_uno_proto_depIdxs,
		EnumInfos:         file_plugin_uno_protos_uno_uno_proto_enumTypes,
		MessageInfos:      file_plugin_uno_protos_uno_uno_proto_msgTypes,
	}.Build()
	File_plugin_uno_protos_uno_uno_proto = out.File
	file_plugin_uno_protos_uno_uno_proto_rawDesc = nil
	file_plugin_uno_protos_uno_uno_proto_goTypes = nil
	file_plugin_uno_protos_uno_uno_proto_depIdxs = nil
}
