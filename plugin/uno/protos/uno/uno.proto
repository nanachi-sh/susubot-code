syntax = "proto3";

package susubot.plugin.uno;

import "google/api/annotations.proto";

option go_package = "protos/uno";

service uno {
    rpc CreateRoom (Empty) returns (CreateRoomResponse) {
        option (google.api.http) = {
            post: "/v1/rooms"
        };
    }
    rpc GetRooms (Empty) returns (GetRoomsResponse) {
        option (google.api.http) = {
            get: "/v1/rooms" //获取所有桌的基本信息
        };
    }
    rpc GetRoom (GetRoomRequest) returns (GetRoomResponse) {
        option (google.api.http) = {
            get: "/v1/rooms/{RoomHash}" //获取基本信息(若存在验证，则为完整信息)
        };
    }
    rpc GetPlayer (GetPlayerRequest) returns (GetPlayerResponse) {
        option (google.api.http) = {
            get: "/v1/rooms/{RoomHash}/players/{PlayerId}"  
        };
    }
    rpc JoinRoom (JoinRoomRequest) returns (JoinRoomResponse) {
        option (google.api.http) = {
            put: "/v1/rooms/{RoomHash}/players" //添加玩家(需验证玩家ID哈希)
            body: "PlayerInfo"
        };
    }
    rpc ExitRoom (ExitRoomRequest) returns (ExitRoomResponse) {
        option (google.api.http) = {
            delete: "/v1/rooms/{RoomHash}/players/{PlayerId}" //删除玩家(需验证玩家ID+桌Hash混合哈希)
        };
    }
    rpc StartRoom (StartRoomRequest) returns (BasicResponse) {
        option (google.api.http) = {
            patch: "/v1/rooms/{RoomHash}/play" //开始游戏(需验证混合哈希)，后续桌内操作都需验证混合哈希
        };
    }
    rpc DrawCard (DrawCardRequest) returns (DrawCardResponse) {
        option (google.api.http) = {
            patch: "/v1/rooms/{RoomHash}/players/{PlayerId}/play/DrawCard" //摸牌
        };
    }
    rpc SendCard (SendCardRequest) returns (SendCardResponse) {
        option (google.api.http) = {
            patch: "/v1/rooms/{RoomHash}/players/{PlayerId}/play/SendCard" //出牌
            body: "SendCard"
        };
    }
    rpc NoSendCard (NoSendCardRequest) returns (NoSendCardResponse) {
        option (google.api.http) = {
            patch: "/v1/rooms/{RoomHash}/players/{PlayerId}/play/NoSendCard" //不出牌
        };
    }
    rpc CallUNO (CallUNORequest) returns (CallUNOResponse) {
        option (google.api.http) = {
            patch: "/v1/rooms/{RoomHash}/players/{PlayerId}/play/CallUNO" //报UNO
        };
    }
    rpc Challenge (ChallengeRequest) returns (ChallengeResponse) {
        option (google.api.http) = {
            patch: "/v1/rooms/{RoomHash}/players/{PlayerId}/play/Challenge" //挑战Wild draw four
        };
    }
    rpc IndicateUNO (IndicateUNORequest) returns (IndicateUNOResponse) {
        option (google.api.http) = {
            patch: "/v1/rooms/{RoomHash}/players/{PlayerId}/play/IndicateUNO" //指出未报UNO
            body: "TargetId"
        };
    }
    rpc RoomEvent (RoomEventRequest) returns (stream RoomEventResponse) {
        option (google.api.http) = {
            get: "/v1/rooms/{RoomHash}/play/event/{PlayerHash}" //获取游戏事件流(需验证混合哈希)
        };
    }
    rpc CreateUser (CreateUserRequest) returns (BasicResponse) {
        option (google.api.http) = {
            post: "/v1/users"
            body: "*"
        };
    }
    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            patch: "/v1/users/{UserId}/verify"
            body: "*"
        };
    }
    // 测试用接口，前端禁止直接调用，全部需验证
    rpc TEST_SetPlayerCard (TEST_SetPlayerCardRequest) returns (BasicResponse);
}

enum Stage {
    WaitingStart = 0;
    ElectingBanker = 1;
    SendingCard = 2;
}

enum Errors {
    Unexpected = 0; //意外错误
    RoomStarted = 1; //房间已开始游戏
    RoomFull = 2; //房间已满
    RoomExistPlayer = 3; //玩家已存在房间内
    RoomNoReachPlayers = 4; //玩家数未达到
    RoomNoExistPlayer = 5; //玩家不存在房间内
    PlayerNoOperatorNow = 6; //玩家不是当前操作者
    PlayerCardNoExist = 7; //玩家卡牌不足
    PlayerCannotSendCard = 8; //玩家不能出牌
    SendCardColorORNumberNELastCard = 9; //所出牌颜色或数字与上一张牌不同
    RoomNoStart = 10; //房间还未开始游戏
    PlayerAlreadyDrawCard = 11; //玩家已抽过牌
    PlayerNoDrawCard = 12; //玩家还未抽牌
    PlayerCannotNoSendCard = 13; //玩家不能不出牌
    Challenged = 14; //已挑战
    PlayerCannotCallUNO = 15; //玩家不能喊UNO
    RoomNoneSendCard = 16; //房间还未出过牌
    CannotChallenge = 17; //无法挑战
    RoomNoSendingCard = 18; //房间还未进入出牌阶段
    PlayerAlreadyCallUNO = 19; //玩家已喊UNO
    RoomNoExist = 20; //房间不存在
    PlayerNoExistAnyRoom = 21; //玩家不在任意一个房间内
    PlayerCannotDrawCard = 22; //玩家不能摸牌
    PlayerCannotSendCardFromHandCard = 23; //玩家不能从手牌中出牌
    BlackCardNoSpecifiedColor = 24; //黑牌未指定颜色
    PlayerIsOperatorNow = 25; //玩家为当前操作者

    NoFoundAccountHash = 26; //未找到用户哈希Cookie
    NoValidAccountHash = 27; //无有效用户哈希Cookie
    AbnormalAccount = 28; //异常账号
    NoFoundPlayerHash = 29; //未找到玩家哈希
    PlayerHashNE = 30; //玩家哈希与桌内玩家哈希不同
    NoValidPlayerHash = 31; //无有效玩家哈希Cookie
    NoPrivilegeAccount = 32; //非特权用户
    AccountExist = 33; //账号已存在
    AccountNoExist = 34; //账号不存在
    PasswordWrong = 35; //密码不正确
}

enum CardColor {
    Blue = 0;
    Yellow = 1;
    Red = 2;
    Green = 3;
    Black = 4;
}

enum CardNumber {
    Zero = 0;
    One = 1;
    Two = 2;
    Three = 3;
    Four = 4;
    Five = 5;
    Six = 6;
    Seven = 7;
    Eight = 8;
    Nine = 9;
}

enum FeatureCards {
    Skip = 0;
    Reverse = 1;
    DrawTwo = 2;
    Wild = 3;
    WildDrawFour = 4;
}

enum SendCardActions {
    Send = 0;
    NoSend = 1;
}

enum CardType {
    Normal = 0;
    Feature = 1;
}

enum WildDrawFourStatus {
    ChallengerLose = 0; //挑战者失败
    ChallengedLose = 1; //被挑战者失败
}

message SendCard {
    string SenderId = 1;
    Card SendCard = 2;
    optional WildDrawFourStatus WildDrawFourStatus = 3;
    bool FeatureEffected = 4;
}

message Card {
    optional NormalCard NormalCard = 1;
    optional FeatureCard FeatureCard = 2;
    CardType Type = 3;
}

message NormalCard {
    CardColor Color = 1;
    CardNumber Number = 2;
}

message FeatureCard {
    CardColor Color = 1;
    FeatureCards FeatureCard = 2;
}

message PlayerAccountInfo {
    string Id = 1;
    string Name = 2;
}

message PlayerRoomInfo {
    string RoomHash = 1;
    repeated Card Cards = 2;
    optional Card DrawCard = 3;
    string Hash = 4;
}

message PlayerRoomInfoSimple {
    string RoomHash = 1;
    int32 CardLength = 2;
}

message PlayerInfo {
    PlayerAccountInfo PlayerAccountInfo = 1;
    optional PlayerRoomInfo PlayerRoomInfo = 2;
}

message PlayerInfoSimple {
    PlayerAccountInfo PlayerAccountInfo = 1;
    PlayerRoomInfoSimple PlayerRoomInfo = 2;
}

message RoomSimple {
    string Hash = 1;
    Stage Stage = 2;
    optional PlayerAccountInfo OperatorNow = 3;
    repeated PlayerAccountInfo Players = 4;
    optional PlayerAccountInfo Banker = 5;
}

message RoomExtra {
    string Hash = 1;
    Stage Stage = 2;
    optional PlayerInfo Banker = 3;
    repeated Card CardHeap = 4;
    repeated SendCard CardPool = 5;
    optional PlayerInfo OperatorNow = 6;
    repeated PlayerInfo Players = 7;
}

message Empty{}
message BasicResponse {
    optional Errors err = 1;
}

message CreateRoomResponse {
    oneof Body {
        Errors err = 1;
        string RoomHash = 2;
    }
}

message GetRoomRequest {
    string RoomHash = 1;
}

message GetRoomResponse {
    optional Errors err = 1;
    optional RoomSimple Simple = 2;
    optional RoomExtra Extra = 3;
}

message GetPlayerRequest {
    string RoomHash = 1;
    string PlayerId = 2;
}

message GetPlayerResponse {
    optional Errors err = 1;
    optional PlayerInfoSimple Simple = 2;
    optional PlayerInfo Extra = 3;
}

message GetRoomsResponse {
    repeated RoomSimple Rooms = 1;
}

message JoinRoomRequest {
    optional PlayerAccountInfo PlayerInfo = 1;
    string RoomHash = 2;
}

message JoinRoomResponse {
    optional Errors err = 1;
    repeated PlayerAccountInfo Players = 2;
    string VerifyHash = 3; //房间内玩家鉴权哈希，若存在特权哈希则可无视
}

message ExitRoomRequest {
    string PlayerId = 1;
    string RoomHash = 2;
}

message ExitRoomResponse {
    optional Errors err = 1;
    repeated PlayerAccountInfo Players = 2;
}

message StartRoomRequest {
    string RoomHash = 1;
}

message DrawCardRequest {
    string PlayerId = 1;
    string RoomHash = 2;
}

message DrawCardResponse {
    message DrawCard_ElectingBanker {
        Card ElectBankerCard = 1;
    }
    message DrawCard_SendingCard {
        repeated Card PlayerCard = 1;
        Card DrawCard = 2;
    }
    optional Errors err = 1;
    optional DrawCard_ElectingBanker ElectingBanker = 2;
    optional DrawCard_SendingCard SendingCard = 3;
}

message SendCardRequest {
    string PlayerId = 1;
    string RoomHash = 2;
    Card SendCard = 3;
}

message SendCardResponse {
    optional Errors err = 1;
    optional PlayerAccountInfo NextOperator = 2;
    repeated Card SenderCards = 3;
}

message NoSendCardRequest {
    string PlayerId = 1;
    string RoomHash = 2;
}

message NoSendCardResponse {
    optional Errors err = 1;
    optional PlayerAccountInfo NextOperator = 2;
}

message CallUNORequest {
    string PlayerId = 1;
    string RoomHash = 2;
}

message CallUNOResponse {
    optional Errors err = 1;
    repeated Card PlayerCard = 2; //被罚牌时有效
}

message ChallengeRequest {
    string PlayerId = 1;
    string RoomHash = 2;
}

message ChallengeResponse {
    optional Errors err = 1;
    bool IsWin = 2;
}

message IndicateUNORequest {
    string PlayerId = 1;
    string TargetId = 2;
    string RoomHash = 3;
}

message IndicateUNOResponse {
    optional Errors err = 1;
    bool IndicateSuccessed = 2;
}

message RoomEventRequest {
    string RoomHash = 1;
    string PlayerHash = 2;
}

message RoomEventResponse {
    message GameFinishEvent { //游戏结束事件
        repeated PlayerInfo Players = 1;
        PlayerInfo Winner = 2;
    }
    message DrawCard_IntoSendCardEvent { //进入出牌阶段事件
        repeated PlayerAccountInfo Players = 1;
        PlayerAccountInfo Banker = 2; //
        Card LeadCard = 3; //引牌    
    }
    message DrawCard_SkippedEvent { //玩家被跳过事件
        PlayerAccountInfo NextOperator = 1;
    }
    message HandCardUpdateEvent { //某玩家手牌更新
        PlayerAccountInfo Updated = 1;
    }

    optional Errors err = 1;
    optional GameFinishEvent GameFinish = 2;
    optional DrawCard_IntoSendCardEvent DrawCard_IntoSendCard = 3;
    optional DrawCard_SkippedEvent DrawCard_Skipped = 4;
    optional HandCardUpdateEvent HandCardUpdate = 5;
}

enum Source {
    QQ = 0;
}

enum VerifyMethod {
    Password = 0;
    VerifyCode = 1;
}

message CreateUserRequest {
    PlayerAccountInfo UserInfo = 1;
    Source Source = 2;
    string VerifyHash = 3;
    string Password = 4;
}

message GetUserRequest {
    message MethodPassword {
        string Password = 1;
    }
    message MethodVerifyCode {
        Source VerifySource = 1;
        string VerifyHash = 2;
    }
    VerifyMethod method = 1;
    optional MethodPassword Password = 2;
    optional MethodVerifyCode VerifyCode = 3;
    string UserId = 4;
}

message GetUserResponse {
    PlayerAccountInfo UserInfo = 1;
    string UserHash = 2;
    optional Errors err = 3;
}

message TEST_SetPlayerCardRequest {
    string PlayerId = 1;
    repeated Card Cards = 2;
}
