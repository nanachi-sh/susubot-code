// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: basic/qqverifier/protos/qqverifier/qqverifier.proto

package uno

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Qqverifier_NewVerify_FullMethodName = "/susubot.basic.qqverifier.qqverifier/NewVerify"
	Qqverifier_Verify_FullMethodName    = "/susubot.basic.qqverifier.qqverifier/Verify"
	Qqverifier_Verified_FullMethodName  = "/susubot.basic.qqverifier.qqverifier/Verified"
)

// QqverifierClient is the client API for Qqverifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QqverifierClient interface {
	NewVerify(ctx context.Context, in *NewVerifyRequest, opts ...grpc.CallOption) (*NewVerifyResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	Verified(ctx context.Context, in *VerifiedRequest, opts ...grpc.CallOption) (*VerifiedResponse, error)
}

type qqverifierClient struct {
	cc grpc.ClientConnInterface
}

func NewQqverifierClient(cc grpc.ClientConnInterface) QqverifierClient {
	return &qqverifierClient{cc}
}

func (c *qqverifierClient) NewVerify(ctx context.Context, in *NewVerifyRequest, opts ...grpc.CallOption) (*NewVerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewVerifyResponse)
	err := c.cc.Invoke(ctx, Qqverifier_NewVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qqverifierClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, Qqverifier_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qqverifierClient) Verified(ctx context.Context, in *VerifiedRequest, opts ...grpc.CallOption) (*VerifiedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifiedResponse)
	err := c.cc.Invoke(ctx, Qqverifier_Verified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QqverifierServer is the server API for Qqverifier service.
// All implementations must embed UnimplementedQqverifierServer
// for forward compatibility.
type QqverifierServer interface {
	NewVerify(context.Context, *NewVerifyRequest) (*NewVerifyResponse, error)
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	Verified(context.Context, *VerifiedRequest) (*VerifiedResponse, error)
	mustEmbedUnimplementedQqverifierServer()
}

// UnimplementedQqverifierServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQqverifierServer struct{}

func (UnimplementedQqverifierServer) NewVerify(context.Context, *NewVerifyRequest) (*NewVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewVerify not implemented")
}
func (UnimplementedQqverifierServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedQqverifierServer) Verified(context.Context, *VerifiedRequest) (*VerifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verified not implemented")
}
func (UnimplementedQqverifierServer) mustEmbedUnimplementedQqverifierServer() {}
func (UnimplementedQqverifierServer) testEmbeddedByValue()                    {}

// UnsafeQqverifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QqverifierServer will
// result in compilation errors.
type UnsafeQqverifierServer interface {
	mustEmbedUnimplementedQqverifierServer()
}

func RegisterQqverifierServer(s grpc.ServiceRegistrar, srv QqverifierServer) {
	// If the following call pancis, it indicates UnimplementedQqverifierServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Qqverifier_ServiceDesc, srv)
}

func _Qqverifier_NewVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QqverifierServer).NewVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Qqverifier_NewVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QqverifierServer).NewVerify(ctx, req.(*NewVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qqverifier_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QqverifierServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Qqverifier_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QqverifierServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qqverifier_Verified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QqverifierServer).Verified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Qqverifier_Verified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QqverifierServer).Verified(ctx, req.(*VerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Qqverifier_ServiceDesc is the grpc.ServiceDesc for Qqverifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Qqverifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "susubot.basic.qqverifier.qqverifier",
	HandlerType: (*QqverifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewVerify",
			Handler:    _Qqverifier_NewVerify_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Qqverifier_Verify_Handler,
		},
		{
			MethodName: "Verified",
			Handler:    _Qqverifier_Verified_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basic/qqverifier/protos/qqverifier/qqverifier.proto",
}
