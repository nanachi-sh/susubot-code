// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.2
// source: pkg/protos/twoonone/api.proto

package twoonone

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 1xxx 标准错误
// 2xxx 游戏错误
type Error int32

const (
	Error_ERROR_UNKNOWN                                      Error = 0
	Error_ERROR_UNDEFINED                                    Error = 1
	Error_ERROR_INVALID_ARGUMENT                             Error = 2
	Error_ERROR_NO_AUTH                                      Error = 1001 //启用了OIDC中间件，但用户未认证
	Error_ERROR_USER_NO_EXIST                                Error = 1002 //用户不存在
	Error_ERROR_USER_INCOMPLETE                              Error = 1003 //用户信息不完整
	Error_ERROR_USER_EXISTED                                 Error = 1004 //用户已存在(斗地主信息)
	Error_ERROR_ROOM_FULL                                    Error = 2001
	Error_ERROR_ROOM_NO_EXIST                                Error = 2002 //房间不存在
	Error_ERROR_ROOM_EXIST_PLAYER                            Error = 2003 //玩家已存在房间内
	Error_ERROR_ROOM_NO_EXIST_PLAYER                         Error = 2004 //
	Error_ERROR_ROOM_NO_ROB_LANDOWNERING                     Error = 2005 //房间不在抢地主阶段
	Error_ERROR_ROOM_NO_SENDING_CARD                         Error = 2006 //房间不在出牌阶段
	Error_ERROR_PLAYER_CARD_NO_EXIST                         Error = 2007 //玩家卡牌不足
	Error_ERROR_PLAYER_NO_OPERATOR                           Error = 2008 //玩家不是当前操作者
	Error_ERROR_PLAYER_NO_EXIST                              Error = 2009 //玩家不存在
	Error_ERROR_PLAYER_ALREADY_GET_DALIY_COIN                Error = 2010 //玩家已获取过每日豆子
	Error_ERROR_ROOM_NO_FULL                                 Error = 2011 //房间玩家未满
	Error_ERROR_ROOM_STARTED                                 Error = 2012 //房间已开始
	Error_ERROR_ROOM_NO_ROB_LANDOWNER                        Error = 2013 //无人抢地主
	Error_ERROR_SEND_CARD_TYPE_UNKNOWN                       Error = 2014 //出的牌类型未知
	Error_ERROR_SEND_CARD_TYPE_NE_LAST_CARD_TYPE             Error = 2015 //出的牌类型与上一副牌不同
	Error_ERROR_SEND_CARD_CONTINUOUS_NE_LAST_CARD_CONTINUOUS Error = 2016 //出的牌连续数与上一副牌不同
	Error_ERROR_SEND_CARD_SIZE_LE_LAST_CARD_SIZE             Error = 2017 //出的牌小于或等于上一副牌
	Error_ERROR_PLAYER_EXISTED_A_ROOM                        Error = 2018 //玩家已存在于一个房间
	Error_ERROR_PLAYER_COIN_LT_ROOM_COIN                     Error = 2019 //玩家豆子小于房间底分
	Error_ERROR_PLAYER_IS_ONLY_OPERATOR                      Error = 2020 //玩家为唯一可操作者
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0:    "ERROR_UNKNOWN",
		1:    "ERROR_UNDEFINED",
		2:    "ERROR_INVALID_ARGUMENT",
		1001: "ERROR_NO_AUTH",
		1002: "ERROR_USER_NO_EXIST",
		1003: "ERROR_USER_INCOMPLETE",
		1004: "ERROR_USER_EXISTED",
		2001: "ERROR_ROOM_FULL",
		2002: "ERROR_ROOM_NO_EXIST",
		2003: "ERROR_ROOM_EXIST_PLAYER",
		2004: "ERROR_ROOM_NO_EXIST_PLAYER",
		2005: "ERROR_ROOM_NO_ROB_LANDOWNERING",
		2006: "ERROR_ROOM_NO_SENDING_CARD",
		2007: "ERROR_PLAYER_CARD_NO_EXIST",
		2008: "ERROR_PLAYER_NO_OPERATOR",
		2009: "ERROR_PLAYER_NO_EXIST",
		2010: "ERROR_PLAYER_ALREADY_GET_DALIY_COIN",
		2011: "ERROR_ROOM_NO_FULL",
		2012: "ERROR_ROOM_STARTED",
		2013: "ERROR_ROOM_NO_ROB_LANDOWNER",
		2014: "ERROR_SEND_CARD_TYPE_UNKNOWN",
		2015: "ERROR_SEND_CARD_TYPE_NE_LAST_CARD_TYPE",
		2016: "ERROR_SEND_CARD_CONTINUOUS_NE_LAST_CARD_CONTINUOUS",
		2017: "ERROR_SEND_CARD_SIZE_LE_LAST_CARD_SIZE",
		2018: "ERROR_PLAYER_EXISTED_A_ROOM",
		2019: "ERROR_PLAYER_COIN_LT_ROOM_COIN",
		2020: "ERROR_PLAYER_IS_ONLY_OPERATOR",
	}
	Error_value = map[string]int32{
		"ERROR_UNKNOWN":                                      0,
		"ERROR_UNDEFINED":                                    1,
		"ERROR_INVALID_ARGUMENT":                             2,
		"ERROR_NO_AUTH":                                      1001,
		"ERROR_USER_NO_EXIST":                                1002,
		"ERROR_USER_INCOMPLETE":                              1003,
		"ERROR_USER_EXISTED":                                 1004,
		"ERROR_ROOM_FULL":                                    2001,
		"ERROR_ROOM_NO_EXIST":                                2002,
		"ERROR_ROOM_EXIST_PLAYER":                            2003,
		"ERROR_ROOM_NO_EXIST_PLAYER":                         2004,
		"ERROR_ROOM_NO_ROB_LANDOWNERING":                     2005,
		"ERROR_ROOM_NO_SENDING_CARD":                         2006,
		"ERROR_PLAYER_CARD_NO_EXIST":                         2007,
		"ERROR_PLAYER_NO_OPERATOR":                           2008,
		"ERROR_PLAYER_NO_EXIST":                              2009,
		"ERROR_PLAYER_ALREADY_GET_DALIY_COIN":                2010,
		"ERROR_ROOM_NO_FULL":                                 2011,
		"ERROR_ROOM_STARTED":                                 2012,
		"ERROR_ROOM_NO_ROB_LANDOWNER":                        2013,
		"ERROR_SEND_CARD_TYPE_UNKNOWN":                       2014,
		"ERROR_SEND_CARD_TYPE_NE_LAST_CARD_TYPE":             2015,
		"ERROR_SEND_CARD_CONTINUOUS_NE_LAST_CARD_CONTINUOUS": 2016,
		"ERROR_SEND_CARD_SIZE_LE_LAST_CARD_SIZE":             2017,
		"ERROR_PLAYER_EXISTED_A_ROOM":                        2018,
		"ERROR_PLAYER_COIN_LT_ROOM_COIN":                     2019,
		"ERROR_PLAYER_IS_ONLY_OPERATOR":                      2020,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_protos_twoonone_api_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_pkg_protos_twoonone_api_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_pkg_protos_twoonone_api_proto_rawDescGZIP(), []int{0}
}

var File_pkg_protos_twoonone_api_proto protoreflect.FileDescriptor

var file_pkg_protos_twoonone_api_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x77, 0x6f,
	0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2a, 0xde, 0x06,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0xe9, 0x07, 0x12,
	0x18, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xea, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0xeb, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0xec, 0x07, 0x12, 0x14,
	0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0xd1, 0x0f, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd2, 0x0f, 0x12, 0x1c,
	0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0xd3, 0x0f, 0x12, 0x1f, 0x0a, 0x1a,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0xd4, 0x0f, 0x12, 0x23, 0x0a,
	0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x52,
	0x4f, 0x42, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0xd5, 0x0f, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x10, 0xd6, 0x0f, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x10, 0xd7, 0x0f, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0xd8, 0x0f, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xd9, 0x0f, 0x12,
	0x28, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x4c, 0x49,
	0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xda, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0xdb, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0xdc, 0x0f, 0x12, 0x20, 0x0a, 0x1b, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x4f, 0x42,
	0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0xdd, 0x0f, 0x12, 0x21, 0x0a,
	0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xde, 0x0f,
	0x12, 0x2b, 0x0a, 0x26, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xdf, 0x0f, 0x12, 0x37, 0x0a,
	0x32, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55,
	0x4f, 0x55, 0x53, 0x10, 0xe0, 0x0f, 0x12, 0x2b, 0x0a, 0x26, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c,
	0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x10, 0xe1, 0x0f, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x10, 0xe2, 0x0f, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4c, 0x54, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xe3, 0x0f, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0xe4, 0x0f, 0x42, 0x11,
	0x5a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_protos_twoonone_api_proto_rawDescOnce sync.Once
	file_pkg_protos_twoonone_api_proto_rawDescData = file_pkg_protos_twoonone_api_proto_rawDesc
)

func file_pkg_protos_twoonone_api_proto_rawDescGZIP() []byte {
	file_pkg_protos_twoonone_api_proto_rawDescOnce.Do(func() {
		file_pkg_protos_twoonone_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_protos_twoonone_api_proto_rawDescData)
	})
	return file_pkg_protos_twoonone_api_proto_rawDescData
}

var file_pkg_protos_twoonone_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_protos_twoonone_api_proto_goTypes = []any{
	(Error)(0), // 0: twoonone.api.Error
}
var file_pkg_protos_twoonone_api_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pkg_protos_twoonone_api_proto_init() }
func file_pkg_protos_twoonone_api_proto_init() {
	if File_pkg_protos_twoonone_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_protos_twoonone_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_protos_twoonone_api_proto_goTypes,
		DependencyIndexes: file_pkg_protos_twoonone_api_proto_depIdxs,
		EnumInfos:         file_pkg_protos_twoonone_api_proto_enumTypes,
	}.Build()
	File_pkg_protos_twoonone_api_proto = out.File
	file_pkg_protos_twoonone_api_proto_rawDesc = nil
	file_pkg_protos_twoonone_api_proto_goTypes = nil
	file_pkg_protos_twoonone_api_proto_depIdxs = nil
}
