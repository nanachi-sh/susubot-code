// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package twoonone

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userTwoononeFieldNames          = builder.RawFieldNames(&UserTwoonone{})
	userTwoononeRows                = strings.Join(userTwoononeFieldNames, ",")
	userTwoononeRowsExpectAutoSet   = strings.Join(stringx.Remove(userTwoononeFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userTwoononeRowsWithPlaceHolder = strings.Join(stringx.Remove(userTwoononeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userTwoononeModel interface {
		Insert(ctx context.Context, data *UserTwoonone) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*UserTwoonone, error)
		Update(ctx context.Context, data *UserTwoonone) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserTwoononeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserTwoonone struct {
		Id               string    `db:"id"`
		Wincount         int64     `db:"wincount"`
		Losecount        int64     `db:"losecount"`
		LastGetdaliyTime time.Time `db:"last_getdaliy_time"`
		Coin             float64   `db:"coin"`
	}
)

func newUserTwoononeModel(conn sqlx.SqlConn) *defaultUserTwoononeModel {
	return &defaultUserTwoononeModel{
		conn:  conn,
		table: "`user_twoonone`",
	}
}

func (m *defaultUserTwoononeModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserTwoononeModel) FindOne(ctx context.Context, id string) (*UserTwoonone, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTwoononeRows, m.table)
	var resp UserTwoonone
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTwoononeModel) Insert(ctx context.Context, data *UserTwoonone) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userTwoononeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Wincount, data.Losecount, data.LastGetdaliyTime, data.Coin)
	return ret, err
}

func (m *defaultUserTwoononeModel) Update(ctx context.Context, data *UserTwoonone) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userTwoononeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Wincount, data.Losecount, data.LastGetdaliyTime, data.Coin, data.Id)
	return err
}

func (m *defaultUserTwoononeModel) tableName() string {
	return m.table
}
