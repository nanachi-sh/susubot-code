// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: plugin/TwoOnOne/protos/twoonone/twoonone.proto

package twoonone

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TwoOnOne_GetRooms_FullMethodName           = "/susubot.plugin.twoonone.TwoOnOne/GetRooms"
	TwoOnOne_CreateAccount_FullMethodName      = "/susubot.plugin.twoonone.TwoOnOne/CreateAccount"
	TwoOnOne_GetAccount_FullMethodName         = "/susubot.plugin.twoonone.TwoOnOne/GetAccount"
	TwoOnOne_GetDailyCoin_FullMethodName       = "/susubot.plugin.twoonone.TwoOnOne/GetDailyCoin"
	TwoOnOne_GetRoom_FullMethodName            = "/susubot.plugin.twoonone.TwoOnOne/GetRoom"
	TwoOnOne_CreateRoom_FullMethodName         = "/susubot.plugin.twoonone.TwoOnOne/CreateRoom"
	TwoOnOne_JoinRoom_FullMethodName           = "/susubot.plugin.twoonone.TwoOnOne/JoinRoom"
	TwoOnOne_ExitRoom_FullMethodName           = "/susubot.plugin.twoonone.TwoOnOne/ExitRoom"
	TwoOnOne_StartRoom_FullMethodName          = "/susubot.plugin.twoonone.TwoOnOne/StartRoom"
	TwoOnOne_RobLandownerAction_FullMethodName = "/susubot.plugin.twoonone.TwoOnOne/RobLandownerAction"
	TwoOnOne_SendCardAction_FullMethodName     = "/susubot.plugin.twoonone.TwoOnOne/SendCardAction"
)

// TwoOnOneClient is the client API for TwoOnOne service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoOnOneClient interface {
	// 其他
	GetRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRoomsResponse, error)
	// 账号相关
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	GetDailyCoin(ctx context.Context, in *GetDailyCoinRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	// 房间相关
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	ExitRoom(ctx context.Context, in *ExitRoomRequest, opts ...grpc.CallOption) (*ExitRoomResponse, error)
	StartRoom(ctx context.Context, in *StartRoomRequest, opts ...grpc.CallOption) (*StartRoomResponse, error)
	RobLandownerAction(ctx context.Context, in *RobLandownerActionRequest, opts ...grpc.CallOption) (*RobLandownerActionResponse, error)
	SendCardAction(ctx context.Context, in *SendCardRequest, opts ...grpc.CallOption) (*SendCardResponse, error)
}

type twoOnOneClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoOnOneClient(cc grpc.ClientConnInterface) TwoOnOneClient {
	return &twoOnOneClient{cc}
}

func (c *twoOnOneClient) GetRooms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomsResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_GetRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) GetDailyCoin(ctx context.Context, in *GetDailyCoinRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_GetDailyCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) ExitRoom(ctx context.Context, in *ExitRoomRequest, opts ...grpc.CallOption) (*ExitRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitRoomResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_ExitRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) StartRoom(ctx context.Context, in *StartRoomRequest, opts ...grpc.CallOption) (*StartRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartRoomResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_StartRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) RobLandownerAction(ctx context.Context, in *RobLandownerActionRequest, opts ...grpc.CallOption) (*RobLandownerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RobLandownerActionResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_RobLandownerAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoOnOneClient) SendCardAction(ctx context.Context, in *SendCardRequest, opts ...grpc.CallOption) (*SendCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCardResponse)
	err := c.cc.Invoke(ctx, TwoOnOne_SendCardAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoOnOneServer is the server API for TwoOnOne service.
// All implementations must embed UnimplementedTwoOnOneServer
// for forward compatibility.
type TwoOnOneServer interface {
	// 其他
	GetRooms(context.Context, *Empty) (*GetRoomsResponse, error)
	// 账号相关
	CreateAccount(context.Context, *CreateAccountRequest) (*BasicResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	GetDailyCoin(context.Context, *GetDailyCoinRequest) (*BasicResponse, error)
	// 房间相关
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	ExitRoom(context.Context, *ExitRoomRequest) (*ExitRoomResponse, error)
	StartRoom(context.Context, *StartRoomRequest) (*StartRoomResponse, error)
	RobLandownerAction(context.Context, *RobLandownerActionRequest) (*RobLandownerActionResponse, error)
	SendCardAction(context.Context, *SendCardRequest) (*SendCardResponse, error)
	mustEmbedUnimplementedTwoOnOneServer()
}

// UnimplementedTwoOnOneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwoOnOneServer struct{}

func (UnimplementedTwoOnOneServer) GetRooms(context.Context, *Empty) (*GetRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedTwoOnOneServer) CreateAccount(context.Context, *CreateAccountRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedTwoOnOneServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedTwoOnOneServer) GetDailyCoin(context.Context, *GetDailyCoinRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyCoin not implemented")
}
func (UnimplementedTwoOnOneServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedTwoOnOneServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedTwoOnOneServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedTwoOnOneServer) ExitRoom(context.Context, *ExitRoomRequest) (*ExitRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitRoom not implemented")
}
func (UnimplementedTwoOnOneServer) StartRoom(context.Context, *StartRoomRequest) (*StartRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRoom not implemented")
}
func (UnimplementedTwoOnOneServer) RobLandownerAction(context.Context, *RobLandownerActionRequest) (*RobLandownerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RobLandownerAction not implemented")
}
func (UnimplementedTwoOnOneServer) SendCardAction(context.Context, *SendCardRequest) (*SendCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCardAction not implemented")
}
func (UnimplementedTwoOnOneServer) mustEmbedUnimplementedTwoOnOneServer() {}
func (UnimplementedTwoOnOneServer) testEmbeddedByValue()                  {}

// UnsafeTwoOnOneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoOnOneServer will
// result in compilation errors.
type UnsafeTwoOnOneServer interface {
	mustEmbedUnimplementedTwoOnOneServer()
}

func RegisterTwoOnOneServer(s grpc.ServiceRegistrar, srv TwoOnOneServer) {
	// If the following call pancis, it indicates UnimplementedTwoOnOneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TwoOnOne_ServiceDesc, srv)
}

func _TwoOnOne_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_GetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).GetRooms(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_GetDailyCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).GetDailyCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_GetDailyCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).GetDailyCoin(ctx, req.(*GetDailyCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_ExitRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).ExitRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_ExitRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).ExitRoom(ctx, req.(*ExitRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_StartRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).StartRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_StartRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).StartRoom(ctx, req.(*StartRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_RobLandownerAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobLandownerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).RobLandownerAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_RobLandownerAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).RobLandownerAction(ctx, req.(*RobLandownerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoOnOne_SendCardAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoOnOneServer).SendCardAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoOnOne_SendCardAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoOnOneServer).SendCardAction(ctx, req.(*SendCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoOnOne_ServiceDesc is the grpc.ServiceDesc for TwoOnOne service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoOnOne_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "susubot.plugin.twoonone.TwoOnOne",
	HandlerType: (*TwoOnOneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRooms",
			Handler:    _TwoOnOne_GetRooms_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _TwoOnOne_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _TwoOnOne_GetAccount_Handler,
		},
		{
			MethodName: "GetDailyCoin",
			Handler:    _TwoOnOne_GetDailyCoin_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _TwoOnOne_GetRoom_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _TwoOnOne_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _TwoOnOne_JoinRoom_Handler,
		},
		{
			MethodName: "ExitRoom",
			Handler:    _TwoOnOne_ExitRoom_Handler,
		},
		{
			MethodName: "StartRoom",
			Handler:    _TwoOnOne_StartRoom_Handler,
		},
		{
			MethodName: "RobLandownerAction",
			Handler:    _TwoOnOne_RobLandownerAction_Handler,
		},
		{
			MethodName: "SendCardAction",
			Handler:    _TwoOnOne_SendCardAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/TwoOnOne/protos/twoonone/twoonone.proto",
}
