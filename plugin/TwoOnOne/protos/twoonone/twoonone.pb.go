// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: plugin/TwoOnOne/protos/twoonone/twoonone.proto

package twoonone

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RoomStage int32

const (
	RoomStage_WaitingStart    RoomStage = 0
	RoomStage_RobLandownering RoomStage = 1
	RoomStage_SendingCards    RoomStage = 2
)

// Enum value maps for RoomStage.
var (
	RoomStage_name = map[int32]string{
		0: "WaitingStart",
		1: "RobLandownering",
		2: "SendingCards",
	}
	RoomStage_value = map[string]int32{
		"WaitingStart":    0,
		"RobLandownering": 1,
		"SendingCards":    2,
	}
)

func (x RoomStage) Enum() *RoomStage {
	p := new(RoomStage)
	*p = x
	return p
}

func (x RoomStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomStage) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[0].Descriptor()
}

func (RoomStage) Type() protoreflect.EnumType {
	return &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[0]
}

func (x RoomStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomStage.Descriptor instead.
func (RoomStage) EnumDescriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{0}
}

type RobLandownerActions int32

const (
	RobLandownerActions_Rob   RobLandownerActions = 0
	RobLandownerActions_NoRob RobLandownerActions = 1
)

// Enum value maps for RobLandownerActions.
var (
	RobLandownerActions_name = map[int32]string{
		0: "Rob",
		1: "NoRob",
	}
	RobLandownerActions_value = map[string]int32{
		"Rob":   0,
		"NoRob": 1,
	}
)

func (x RobLandownerActions) Enum() *RobLandownerActions {
	p := new(RobLandownerActions)
	*p = x
	return p
}

func (x RobLandownerActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RobLandownerActions) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[1].Descriptor()
}

func (RobLandownerActions) Type() protoreflect.EnumType {
	return &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[1]
}

func (x RobLandownerActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RobLandownerActions.Descriptor instead.
func (RobLandownerActions) EnumDescriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{1}
}

type SendCardActions int32

const (
	SendCardActions_Send   SendCardActions = 0
	SendCardActions_NoSend SendCardActions = 1
)

// Enum value maps for SendCardActions.
var (
	SendCardActions_name = map[int32]string{
		0: "Send",
		1: "NoSend",
	}
	SendCardActions_value = map[string]int32{
		"Send":   0,
		"NoSend": 1,
	}
)

func (x SendCardActions) Enum() *SendCardActions {
	p := new(SendCardActions)
	*p = x
	return p
}

func (x SendCardActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendCardActions) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[2].Descriptor()
}

func (SendCardActions) Type() protoreflect.EnumType {
	return &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[2]
}

func (x SendCardActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendCardActions.Descriptor instead.
func (SendCardActions) EnumDescriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{2}
}

type Card int32

const (
	Card_Three Card = 0
	Card_Four  Card = 1
	Card_Five  Card = 2
	Card_Six   Card = 3
	Card_Seven Card = 4
	Card_Eight Card = 5
	Card_Nine  Card = 6
	Card_Ten   Card = 7
	Card_J     Card = 8
	Card_Q     Card = 9
	Card_K     Card = 10
	Card_A     Card = 11
	Card_Two   Card = 12
	Card_Joker Card = 13
	Card_King  Card = 14
)

// Enum value maps for Card.
var (
	Card_name = map[int32]string{
		0:  "Three",
		1:  "Four",
		2:  "Five",
		3:  "Six",
		4:  "Seven",
		5:  "Eight",
		6:  "Nine",
		7:  "Ten",
		8:  "J",
		9:  "Q",
		10: "K",
		11: "A",
		12: "Two",
		13: "Joker",
		14: "King",
	}
	Card_value = map[string]int32{
		"Three": 0,
		"Four":  1,
		"Five":  2,
		"Six":   3,
		"Seven": 4,
		"Eight": 5,
		"Nine":  6,
		"Ten":   7,
		"J":     8,
		"Q":     9,
		"K":     10,
		"A":     11,
		"Two":   12,
		"Joker": 13,
		"King":  14,
	}
)

func (x Card) Enum() *Card {
	p := new(Card)
	*p = x
	return p
}

func (x Card) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Card) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[3].Descriptor()
}

func (Card) Type() protoreflect.EnumType {
	return &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[3]
}

func (x Card) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Card.Descriptor instead.
func (Card) EnumDescriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{3}
}

type CardType int32

const (
	CardType_KingBomb                 CardType = 0   //王炸
	CardType_Single                   CardType = 1   //单牌
	CardType_Double                   CardType = 2   //双牌
	CardType_ThreeCard                CardType = 3   //三牌
	CardType_ThreeWithSingle          CardType = 4   //三带一
	CardType_ThreeWithDouble          CardType = 5   //三带一对
	CardType_Bomb                     CardType = 6   //炸弹
	CardType_FourWithTwoSingle        CardType = 7   //四带两
	CardType_FourWithTwoDouble        CardType = 8   //四带两对
	CardType_SingleSequence           CardType = 9   //顺子
	CardType_DoubleSequence           CardType = 10  //连对
	CardType_AirSequence              CardType = 11  //纯飞机
	CardType_AirSequenceWithTwoSingle CardType = 12  //飞机带两
	CardType_AirSequenceWithTwoDouble CardType = 13  //飞机带两对
	CardType_Unknown                  CardType = 100 //未知牌型
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0:   "KingBomb",
		1:   "Single",
		2:   "Double",
		3:   "ThreeCard",
		4:   "ThreeWithSingle",
		5:   "ThreeWithDouble",
		6:   "Bomb",
		7:   "FourWithTwoSingle",
		8:   "FourWithTwoDouble",
		9:   "SingleSequence",
		10:  "DoubleSequence",
		11:  "AirSequence",
		12:  "AirSequenceWithTwoSingle",
		13:  "AirSequenceWithTwoDouble",
		100: "Unknown",
	}
	CardType_value = map[string]int32{
		"KingBomb":                 0,
		"Single":                   1,
		"Double":                   2,
		"ThreeCard":                3,
		"ThreeWithSingle":          4,
		"ThreeWithDouble":          5,
		"Bomb":                     6,
		"FourWithTwoSingle":        7,
		"FourWithTwoDouble":        8,
		"SingleSequence":           9,
		"DoubleSequence":           10,
		"AirSequence":              11,
		"AirSequenceWithTwoSingle": 12,
		"AirSequenceWithTwoDouble": 13,
		"Unknown":                  100,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[4].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[4]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{4}
}

type Errors int32

const (
	Errors_Unexpected                  Errors = 0  //意外错误
	Errors_RoomFull                    Errors = 1  //房间已满
	Errors_RoomNoExist                 Errors = 2  //房间不存在
	Errors_RoomExistPlayer             Errors = 3  //玩家已存在房间内
	Errors_RoomNoExistPlayer           Errors = 4  //
	Errors_RoomNoRobLandownering       Errors = 5  //房间不在抢地主阶段
	Errors_RoomNoSendingCards          Errors = 6  //房间不在出牌阶段
	Errors_PlayerCardNoExist           Errors = 7  //玩家卡牌不足
	Errors_PlayerNoOperatorNow         Errors = 8  //玩家不是当前操作者
	Errors_PlayerNoExist               Errors = 9  //玩家不存在
	Errors_PlayerAlreadyGetDailyCoin   Errors = 10 //玩家已获取过每日豆子
	Errors_RoomPlayerNoFull            Errors = 11 //房间玩家未满
	Errors_RoomStarted                 Errors = 12 //房间已开始
	Errors_RobLandownerNoExistRob      Errors = 13 //无人抢地主
	Errors_SendCardUnknown             Errors = 14 //出的牌类型未知
	Errors_SendCardTypeNELastCard      Errors = 15 //出的牌类型与上一副牌不同
	Errors_SendCardContinousNELastCard Errors = 16 //出的牌连续数与上一副牌不同
	Errors_SendCardSizeLELastCard      Errors = 17 //出的牌小于或等于上一副牌
	Errors_PlayerAccountExist          Errors = 18 //玩家信息已存在
	Errors_PlayerNoExistAnyRoom        Errors = 19 //玩家不在任意一个房间内
	Errors_PlayerCoinLTRoomBasicCoin   Errors = 20 //玩家豆子小于房间底分
	Errors_PlayerIsOnlySendCarder      Errors = 21 //玩家为唯一可出牌者
)

// Enum value maps for Errors.
var (
	Errors_name = map[int32]string{
		0:  "Unexpected",
		1:  "RoomFull",
		2:  "RoomNoExist",
		3:  "RoomExistPlayer",
		4:  "RoomNoExistPlayer",
		5:  "RoomNoRobLandownering",
		6:  "RoomNoSendingCards",
		7:  "PlayerCardNoExist",
		8:  "PlayerNoOperatorNow",
		9:  "PlayerNoExist",
		10: "PlayerAlreadyGetDailyCoin",
		11: "RoomPlayerNoFull",
		12: "RoomStarted",
		13: "RobLandownerNoExistRob",
		14: "SendCardUnknown",
		15: "SendCardTypeNELastCard",
		16: "SendCardContinousNELastCard",
		17: "SendCardSizeLELastCard",
		18: "PlayerAccountExist",
		19: "PlayerNoExistAnyRoom",
		20: "PlayerCoinLTRoomBasicCoin",
		21: "PlayerIsOnlySendCarder",
	}
	Errors_value = map[string]int32{
		"Unexpected":                  0,
		"RoomFull":                    1,
		"RoomNoExist":                 2,
		"RoomExistPlayer":             3,
		"RoomNoExistPlayer":           4,
		"RoomNoRobLandownering":       5,
		"RoomNoSendingCards":          6,
		"PlayerCardNoExist":           7,
		"PlayerNoOperatorNow":         8,
		"PlayerNoExist":               9,
		"PlayerAlreadyGetDailyCoin":   10,
		"RoomPlayerNoFull":            11,
		"RoomStarted":                 12,
		"RobLandownerNoExistRob":      13,
		"SendCardUnknown":             14,
		"SendCardTypeNELastCard":      15,
		"SendCardContinousNELastCard": 16,
		"SendCardSizeLELastCard":      17,
		"PlayerAccountExist":          18,
		"PlayerNoExistAnyRoom":        19,
		"PlayerCoinLTRoomBasicCoin":   20,
		"PlayerIsOnlySendCarder":      21,
	}
)

func (x Errors) Enum() *Errors {
	p := new(Errors)
	*p = x
	return p
}

func (x Errors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Errors) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[5].Descriptor()
}

func (Errors) Type() protoreflect.EnumType {
	return &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[5]
}

func (x Errors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Errors.Descriptor instead.
func (Errors) EnumDescriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{5}
}

type Role int32

const (
	Role_Landowner Role = 0 //地主
	Role_Farmer    Role = 1 //农民
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "Landowner",
		1: "Farmer",
	}
	Role_value = map[string]int32{
		"Landowner": 0,
		"Farmer":    1,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[6].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes[6]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{6}
}

type SendCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderInfo        *PlayerInfo `protobuf:"bytes,1,opt,name=SenderInfo,proto3" json:"SenderInfo,omitempty"`
	SendCards         []Card      `protobuf:"varint,2,rep,packed,name=SendCards,proto3,enum=susubot.plugin.twoonone.Card" json:"SendCards,omitempty"`
	SendCardType      CardType    `protobuf:"varint,3,opt,name=SendCardType,proto3,enum=susubot.plugin.twoonone.CardType" json:"SendCardType,omitempty"`
	SendCardSize      int32       `protobuf:"varint,4,opt,name=SendCardSize,proto3" json:"SendCardSize,omitempty"`
	SendCardContinous int32       `protobuf:"varint,5,opt,name=SendCardContinous,proto3" json:"SendCardContinous,omitempty"`
}

func (x *SendCard) Reset() {
	*x = SendCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCard) ProtoMessage() {}

func (x *SendCard) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCard.ProtoReflect.Descriptor instead.
func (*SendCard) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{0}
}

func (x *SendCard) GetSenderInfo() *PlayerInfo {
	if x != nil {
		return x.SenderInfo
	}
	return nil
}

func (x *SendCard) GetSendCards() []Card {
	if x != nil {
		return x.SendCards
	}
	return nil
}

func (x *SendCard) GetSendCardType() CardType {
	if x != nil {
		return x.SendCardType
	}
	return CardType_KingBomb
}

func (x *SendCard) GetSendCardSize() int32 {
	if x != nil {
		return x.SendCardSize
	}
	return 0
}

func (x *SendCard) GetSendCardContinous() int32 {
	if x != nil {
		return x.SendCardContinous
	}
	return 0
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountInfo *PlayerAccountInfo `protobuf:"bytes,2,opt,name=AccountInfo,proto3" json:"AccountInfo,omitempty"`
	TableInfo   *PlayerTableInfo   `protobuf:"bytes,3,opt,name=TableInfo,proto3,oneof" json:"TableInfo,omitempty"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerInfo) GetAccountInfo() *PlayerAccountInfo {
	if x != nil {
		return x.AccountInfo
	}
	return nil
}

func (x *PlayerInfo) GetTableInfo() *PlayerTableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

type PlayerTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomHash           string               `protobuf:"bytes,1,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	Cards              []Card               `protobuf:"varint,2,rep,packed,name=Cards,proto3,enum=susubot.plugin.twoonone.Card" json:"Cards,omitempty"`
	RobLandownerAction *RobLandownerActions `protobuf:"varint,3,opt,name=RobLandownerAction,proto3,enum=susubot.plugin.twoonone.RobLandownerActions,oneof" json:"RobLandownerAction,omitempty"`
}

func (x *PlayerTableInfo) Reset() {
	*x = PlayerTableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTableInfo) ProtoMessage() {}

func (x *PlayerTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTableInfo.ProtoReflect.Descriptor instead.
func (*PlayerTableInfo) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerTableInfo) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

func (x *PlayerTableInfo) GetCards() []Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *PlayerTableInfo) GetRobLandownerAction() RobLandownerActions {
	if x != nil && x.RobLandownerAction != nil {
		return *x.RobLandownerAction
	}
	return RobLandownerActions_Rob
}

type PlayerAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	WinCount              int32   `protobuf:"varint,3,opt,name=WinCount,proto3" json:"WinCount,omitempty"`
	LoseCount             int32   `protobuf:"varint,4,opt,name=LoseCount,proto3" json:"LoseCount,omitempty"`
	Coin                  float64 `protobuf:"fixed64,5,opt,name=Coin,proto3" json:"Coin,omitempty"`
	LastGetDailyTimestamp int64   `protobuf:"varint,6,opt,name=LastGetDailyTimestamp,proto3" json:"LastGetDailyTimestamp,omitempty"`
}

func (x *PlayerAccountInfo) Reset() {
	*x = PlayerAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAccountInfo) ProtoMessage() {}

func (x *PlayerAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAccountInfo.ProtoReflect.Descriptor instead.
func (*PlayerAccountInfo) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerAccountInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayerAccountInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerAccountInfo) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *PlayerAccountInfo) GetLoseCount() int32 {
	if x != nil {
		return x.LoseCount
	}
	return 0
}

func (x *PlayerAccountInfo) GetCoin() float64 {
	if x != nil {
		return x.Coin
	}
	return 0
}

func (x *PlayerAccountInfo) GetLastGetDailyTimestamp() int64 {
	if x != nil {
		return x.LastGetDailyTimestamp
	}
	return 0
}

type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash           string        `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Players        []*PlayerInfo `protobuf:"bytes,2,rep,name=Players,proto3" json:"Players,omitempty"`
	BasicCoin      float64       `protobuf:"fixed64,3,opt,name=BasicCoin,proto3" json:"BasicCoin,omitempty"`
	Multiple       int32         `protobuf:"varint,4,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	Stage          RoomStage     `protobuf:"varint,5,opt,name=Stage,proto3,enum=susubot.plugin.twoonone.RoomStage" json:"Stage,omitempty"`
	CardPool       []*SendCard   `protobuf:"bytes,6,rep,name=CardPool,proto3" json:"CardPool,omitempty"`
	OperatorNow    *PlayerInfo   `protobuf:"bytes,7,opt,name=OperatorNow,proto3,oneof" json:"OperatorNow,omitempty"`
	LandownerCards []Card        `protobuf:"varint,8,rep,packed,name=LandownerCards,proto3,enum=susubot.plugin.twoonone.Card" json:"LandownerCards,omitempty"`
	Landowner      *PlayerInfo   `protobuf:"bytes,9,opt,name=Landowner,proto3,oneof" json:"Landowner,omitempty"`
	Farmers        []*PlayerInfo `protobuf:"bytes,10,rep,name=Farmers,proto3" json:"Farmers,omitempty"`
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{4}
}

func (x *RoomInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RoomInfo) GetPlayers() []*PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RoomInfo) GetBasicCoin() float64 {
	if x != nil {
		return x.BasicCoin
	}
	return 0
}

func (x *RoomInfo) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *RoomInfo) GetStage() RoomStage {
	if x != nil {
		return x.Stage
	}
	return RoomStage_WaitingStart
}

func (x *RoomInfo) GetCardPool() []*SendCard {
	if x != nil {
		return x.CardPool
	}
	return nil
}

func (x *RoomInfo) GetOperatorNow() *PlayerInfo {
	if x != nil {
		return x.OperatorNow
	}
	return nil
}

func (x *RoomInfo) GetLandownerCards() []Card {
	if x != nil {
		return x.LandownerCards
	}
	return nil
}

func (x *RoomInfo) GetLandowner() *PlayerInfo {
	if x != nil {
		return x.Landowner
	}
	return nil
}

func (x *RoomInfo) GetFarmers() []*PlayerInfo {
	if x != nil {
		return x.Farmers
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{5}
}

type BasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *Errors `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.twoonone.Errors,oneof" json:"err,omitempty"`
}

func (x *BasicResponse) Reset() {
	*x = BasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicResponse) ProtoMessage() {}

func (x *BasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicResponse.ProtoReflect.Descriptor instead.
func (*BasicResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{6}
}

func (x *BasicResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

type GetRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomHash *string `protobuf:"bytes,1,opt,name=RoomHash,proto3,oneof" json:"RoomHash,omitempty"`
	PlayerId *string `protobuf:"bytes,2,opt,name=PlayerId,proto3,oneof" json:"PlayerId,omitempty"`
}

func (x *GetRoomRequest) Reset() {
	*x = GetRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomRequest) ProtoMessage() {}

func (x *GetRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomRequest.ProtoReflect.Descriptor instead.
func (*GetRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{7}
}

func (x *GetRoomRequest) GetRoomHash() string {
	if x != nil && x.RoomHash != nil {
		return *x.RoomHash
	}
	return ""
}

func (x *GetRoomRequest) GetPlayerId() string {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return ""
}

type GetRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err  *Errors   `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.twoonone.Errors,oneof" json:"err,omitempty"`
	Info *RoomInfo `protobuf:"bytes,2,opt,name=Info,proto3,oneof" json:"Info,omitempty"`
}

func (x *GetRoomResponse) Reset() {
	*x = GetRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomResponse) ProtoMessage() {}

func (x *GetRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomResponse.ProtoReflect.Descriptor instead.
func (*GetRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{8}
}

func (x *GetRoomResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *GetRoomResponse) GetInfo() *RoomInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicCoin       float64 `protobuf:"fixed64,1,opt,name=BasicCoin,proto3" json:"BasicCoin,omitempty"`
	InitialMultiple int32   `protobuf:"varint,2,opt,name=InitialMultiple,proto3" json:"InitialMultiple,omitempty"`
}

func (x *CreateRoomRequest) Reset() {
	*x = CreateRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomRequest) ProtoMessage() {}

func (x *CreateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomRequest.ProtoReflect.Descriptor instead.
func (*CreateRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRoomRequest) GetBasicCoin() float64 {
	if x != nil {
		return x.BasicCoin
	}
	return 0
}

func (x *CreateRoomRequest) GetInitialMultiple() int32 {
	if x != nil {
		return x.InitialMultiple
	}
	return 0
}

type CreateRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomHash string `protobuf:"bytes,1,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
}

func (x *CreateRoomResponse) Reset() {
	*x = CreateRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomResponse) ProtoMessage() {}

func (x *CreateRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomResponse.ProtoReflect.Descriptor instead.
func (*CreateRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRoomResponse) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

type JoinRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomHash string `protobuf:"bytes,1,opt,name=RoomHash,proto3" json:"RoomHash,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
}

func (x *JoinRoomRequest) Reset() {
	*x = JoinRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomRequest) ProtoMessage() {}

func (x *JoinRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomRequest.ProtoReflect.Descriptor instead.
func (*JoinRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{11}
}

func (x *JoinRoomRequest) GetRoomHash() string {
	if x != nil {
		return x.RoomHash
	}
	return ""
}

func (x *JoinRoomRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type JoinRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err         *Errors       `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.twoonone.Errors,oneof" json:"err,omitempty"`
	RoomPlayers []*PlayerInfo `protobuf:"bytes,2,rep,name=RoomPlayers,proto3" json:"RoomPlayers,omitempty"`
}

func (x *JoinRoomResponse) Reset() {
	*x = JoinRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomResponse) ProtoMessage() {}

func (x *JoinRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomResponse.ProtoReflect.Descriptor instead.
func (*JoinRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{12}
}

func (x *JoinRoomResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *JoinRoomResponse) GetRoomPlayers() []*PlayerInfo {
	if x != nil {
		return x.RoomPlayers
	}
	return nil
}

type ExitRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
}

func (x *ExitRoomRequest) Reset() {
	*x = ExitRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRoomRequest) ProtoMessage() {}

func (x *ExitRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRoomRequest.ProtoReflect.Descriptor instead.
func (*ExitRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{13}
}

func (x *ExitRoomRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type ExitRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err         *Errors       `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.twoonone.Errors,oneof" json:"err,omitempty"`
	RoomPlayers []*PlayerInfo `protobuf:"bytes,2,rep,name=RoomPlayers,proto3" json:"RoomPlayers,omitempty"`
}

func (x *ExitRoomResponse) Reset() {
	*x = ExitRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRoomResponse) ProtoMessage() {}

func (x *ExitRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitRoomResponse.ProtoReflect.Descriptor instead.
func (*ExitRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{14}
}

func (x *ExitRoomResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *ExitRoomResponse) GetRoomPlayers() []*PlayerInfo {
	if x != nil {
		return x.RoomPlayers
	}
	return nil
}

type RobLandownerActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string              `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Action   RobLandownerActions `protobuf:"varint,2,opt,name=Action,proto3,enum=susubot.plugin.twoonone.RobLandownerActions" json:"Action,omitempty"`
}

func (x *RobLandownerActionRequest) Reset() {
	*x = RobLandownerActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobLandownerActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobLandownerActionRequest) ProtoMessage() {}

func (x *RobLandownerActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobLandownerActionRequest.ProtoReflect.Descriptor instead.
func (*RobLandownerActionRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{15}
}

func (x *RobLandownerActionRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *RobLandownerActionRequest) GetAction() RobLandownerActions {
	if x != nil {
		return x.Action
	}
	return RobLandownerActions_Rob
}

type RobLandownerActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err             *Errors     `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.twoonone.Errors,oneof" json:"err,omitempty"`
	NextOperator    *PlayerInfo `protobuf:"bytes,2,opt,name=NextOperator,proto3" json:"NextOperator,omitempty"`
	IntoSendingCard bool        `protobuf:"varint,3,opt,name=IntoSendingCard,proto3" json:"IntoSendingCard,omitempty"`
	MultipleNotice  bool        `protobuf:"varint,4,opt,name=MultipleNotice,proto3" json:"MultipleNotice,omitempty"`
	Multiple        *int32      `protobuf:"varint,5,opt,name=Multiple,proto3,oneof" json:"Multiple,omitempty"`
}

func (x *RobLandownerActionResponse) Reset() {
	*x = RobLandownerActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobLandownerActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobLandownerActionResponse) ProtoMessage() {}

func (x *RobLandownerActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobLandownerActionResponse.ProtoReflect.Descriptor instead.
func (*RobLandownerActionResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{16}
}

func (x *RobLandownerActionResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *RobLandownerActionResponse) GetNextOperator() *PlayerInfo {
	if x != nil {
		return x.NextOperator
	}
	return nil
}

func (x *RobLandownerActionResponse) GetIntoSendingCard() bool {
	if x != nil {
		return x.IntoSendingCard
	}
	return false
}

func (x *RobLandownerActionResponse) GetMultipleNotice() bool {
	if x != nil {
		return x.MultipleNotice
	}
	return false
}

func (x *RobLandownerActionResponse) GetMultiple() int32 {
	if x != nil && x.Multiple != nil {
		return *x.Multiple
	}
	return 0
}

type SendCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId  string          `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	Action    SendCardActions `protobuf:"varint,2,opt,name=Action,proto3,enum=susubot.plugin.twoonone.SendCardActions" json:"Action,omitempty"`
	SendCards []Card          `protobuf:"varint,3,rep,packed,name=SendCards,proto3,enum=susubot.plugin.twoonone.Card" json:"SendCards,omitempty"`
}

func (x *SendCardRequest) Reset() {
	*x = SendCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCardRequest) ProtoMessage() {}

func (x *SendCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCardRequest.ProtoReflect.Descriptor instead.
func (*SendCardRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{17}
}

func (x *SendCardRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *SendCardRequest) GetAction() SendCardActions {
	if x != nil {
		return x.Action
	}
	return SendCardActions_Send
}

func (x *SendCardRequest) GetSendCards() []Card {
	if x != nil {
		return x.SendCards
	}
	return nil
}

type SendCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err                    *Errors                                     `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.twoonone.Errors,oneof" json:"err,omitempty"`
	SenderAction           *SendCardActions                            `protobuf:"varint,10,opt,name=SenderAction,proto3,enum=susubot.plugin.twoonone.SendCardActions,oneof" json:"SenderAction,omitempty"`
	SenderCard             []Card                                      `protobuf:"varint,2,rep,packed,name=SenderCard,proto3,enum=susubot.plugin.twoonone.Card" json:"SenderCard,omitempty"`
	NextOperator           *PlayerInfo                                 `protobuf:"bytes,9,opt,name=NextOperator,proto3,oneof" json:"NextOperator,omitempty"`
	SenderCardNumberNotice bool                                        `protobuf:"varint,3,opt,name=SenderCardNumberNotice,proto3" json:"SenderCardNumberNotice,omitempty"`
	GameFinish             bool                                        `protobuf:"varint,4,opt,name=GameFinish,proto3" json:"GameFinish,omitempty"`
	SenderCardTypeNotice   bool                                        `protobuf:"varint,5,opt,name=SenderCardTypeNotice,proto3" json:"SenderCardTypeNotice,omitempty"`
	SenderCardTypeNoticeE  *SendCardResponse_SenderCardTypeNoticeEvent `protobuf:"bytes,6,opt,name=SenderCardTypeNoticeE,proto3,oneof" json:"SenderCardTypeNoticeE,omitempty"`
	GameFinishE            *SendCardResponse_GameFinishEvent           `protobuf:"bytes,7,opt,name=GameFinishE,proto3,oneof" json:"GameFinishE,omitempty"`
	SenderCardNumber       *int32                                      `protobuf:"varint,8,opt,name=SenderCardNumber,proto3,oneof" json:"SenderCardNumber,omitempty"`
}

func (x *SendCardResponse) Reset() {
	*x = SendCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCardResponse) ProtoMessage() {}

func (x *SendCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCardResponse.ProtoReflect.Descriptor instead.
func (*SendCardResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{18}
}

func (x *SendCardResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *SendCardResponse) GetSenderAction() SendCardActions {
	if x != nil && x.SenderAction != nil {
		return *x.SenderAction
	}
	return SendCardActions_Send
}

func (x *SendCardResponse) GetSenderCard() []Card {
	if x != nil {
		return x.SenderCard
	}
	return nil
}

func (x *SendCardResponse) GetNextOperator() *PlayerInfo {
	if x != nil {
		return x.NextOperator
	}
	return nil
}

func (x *SendCardResponse) GetSenderCardNumberNotice() bool {
	if x != nil {
		return x.SenderCardNumberNotice
	}
	return false
}

func (x *SendCardResponse) GetGameFinish() bool {
	if x != nil {
		return x.GameFinish
	}
	return false
}

func (x *SendCardResponse) GetSenderCardTypeNotice() bool {
	if x != nil {
		return x.SenderCardTypeNotice
	}
	return false
}

func (x *SendCardResponse) GetSenderCardTypeNoticeE() *SendCardResponse_SenderCardTypeNoticeEvent {
	if x != nil {
		return x.SenderCardTypeNoticeE
	}
	return nil
}

func (x *SendCardResponse) GetGameFinishE() *SendCardResponse_GameFinishEvent {
	if x != nil {
		return x.GameFinishE
	}
	return nil
}

func (x *SendCardResponse) GetSenderCardNumber() int32 {
	if x != nil && x.SenderCardNumber != nil {
		return *x.SenderCardNumber
	}
	return 0
}

type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId   string `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{19}
}

func (x *CreateAccountRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *CreateAccountRequest) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{20}
}

func (x *GetAccountRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err  *Errors     `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.twoonone.Errors,oneof" json:"err,omitempty"`
	Info *PlayerInfo `protobuf:"bytes,2,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAccountResponse) Reset() {
	*x = GetAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResponse) ProtoMessage() {}

func (x *GetAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResponse.ProtoReflect.Descriptor instead.
func (*GetAccountResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{21}
}

func (x *GetAccountResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *GetAccountResponse) GetInfo() *PlayerInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDailyCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
}

func (x *GetDailyCoinRequest) Reset() {
	*x = GetDailyCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyCoinRequest) ProtoMessage() {}

func (x *GetDailyCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyCoinRequest.ProtoReflect.Descriptor instead.
func (*GetDailyCoinRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{22}
}

func (x *GetDailyCoinRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type StartRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
}

func (x *StartRoomRequest) Reset() {
	*x = StartRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoomRequest) ProtoMessage() {}

func (x *StartRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoomRequest.ProtoReflect.Descriptor instead.
func (*StartRoomRequest) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{23}
}

func (x *StartRoomRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type StartRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err            *Errors     `protobuf:"varint,1,opt,name=err,proto3,enum=susubot.plugin.twoonone.Errors,oneof" json:"err,omitempty"`
	NextOperator   *PlayerInfo `protobuf:"bytes,2,opt,name=NextOperator,proto3" json:"NextOperator,omitempty"`
	LandownerCards []Card      `protobuf:"varint,3,rep,packed,name=LandownerCards,proto3,enum=susubot.plugin.twoonone.Card" json:"LandownerCards,omitempty"`
}

func (x *StartRoomResponse) Reset() {
	*x = StartRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoomResponse) ProtoMessage() {}

func (x *StartRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoomResponse.ProtoReflect.Descriptor instead.
func (*StartRoomResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{24}
}

func (x *StartRoomResponse) GetErr() Errors {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return Errors_Unexpected
}

func (x *StartRoomResponse) GetNextOperator() *PlayerInfo {
	if x != nil {
		return x.NextOperator
	}
	return nil
}

func (x *StartRoomResponse) GetLandownerCards() []Card {
	if x != nil {
		return x.LandownerCards
	}
	return nil
}

type GetRoomsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms []*RoomInfo `protobuf:"bytes,1,rep,name=Rooms,proto3" json:"Rooms,omitempty"`
}

func (x *GetRoomsResponse) Reset() {
	*x = GetRoomsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoomsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoomsResponse) ProtoMessage() {}

func (x *GetRoomsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoomsResponse.ProtoReflect.Descriptor instead.
func (*GetRoomsResponse) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{25}
}

func (x *GetRoomsResponse) GetRooms() []*RoomInfo {
	if x != nil {
		return x.Rooms
	}
	return nil
}

type SendCardResponse_GameFinishEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Landowner *PlayerInfo `protobuf:"bytes,1,opt,name=Landowner,proto3" json:"Landowner,omitempty"`
	Farmer1   *PlayerInfo `protobuf:"bytes,2,opt,name=Farmer1,proto3" json:"Farmer1,omitempty"`
	Farmer2   *PlayerInfo `protobuf:"bytes,3,opt,name=Farmer2,proto3" json:"Farmer2,omitempty"`
	Winner    Role        `protobuf:"varint,4,opt,name=Winner,proto3,enum=susubot.plugin.twoonone.Role" json:"Winner,omitempty"`
	Spring    bool        `protobuf:"varint,5,opt,name=Spring,proto3" json:"Spring,omitempty"`
	Multiple  int32       `protobuf:"varint,6,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
}

func (x *SendCardResponse_GameFinishEvent) Reset() {
	*x = SendCardResponse_GameFinishEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCardResponse_GameFinishEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCardResponse_GameFinishEvent) ProtoMessage() {}

func (x *SendCardResponse_GameFinishEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCardResponse_GameFinishEvent.ProtoReflect.Descriptor instead.
func (*SendCardResponse_GameFinishEvent) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{18, 0}
}

func (x *SendCardResponse_GameFinishEvent) GetLandowner() *PlayerInfo {
	if x != nil {
		return x.Landowner
	}
	return nil
}

func (x *SendCardResponse_GameFinishEvent) GetFarmer1() *PlayerInfo {
	if x != nil {
		return x.Farmer1
	}
	return nil
}

func (x *SendCardResponse_GameFinishEvent) GetFarmer2() *PlayerInfo {
	if x != nil {
		return x.Farmer2
	}
	return nil
}

func (x *SendCardResponse_GameFinishEvent) GetWinner() Role {
	if x != nil {
		return x.Winner
	}
	return Role_Landowner
}

func (x *SendCardResponse_GameFinishEvent) GetSpring() bool {
	if x != nil {
		return x.Spring
	}
	return false
}

func (x *SendCardResponse_GameFinishEvent) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

type SendCardResponse_SenderCardTypeNoticeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiple       int32    `protobuf:"varint,1,opt,name=Multiple,proto3" json:"Multiple,omitempty"`
	SenderCardType CardType `protobuf:"varint,2,opt,name=SenderCardType,proto3,enum=susubot.plugin.twoonone.CardType" json:"SenderCardType,omitempty"`
}

func (x *SendCardResponse_SenderCardTypeNoticeEvent) Reset() {
	*x = SendCardResponse_SenderCardTypeNoticeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCardResponse_SenderCardTypeNoticeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCardResponse_SenderCardTypeNoticeEvent) ProtoMessage() {}

func (x *SendCardResponse_SenderCardTypeNoticeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCardResponse_SenderCardTypeNoticeEvent.ProtoReflect.Descriptor instead.
func (*SendCardResponse_SenderCardTypeNoticeEvent) Descriptor() ([]byte, []int) {
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP(), []int{18, 1}
}

func (x *SendCardResponse_SenderCardTypeNoticeEvent) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *SendCardResponse_SenderCardTypeNoticeEvent) GetSenderCardType() CardType {
	if x != nil {
		return x.SenderCardType
	}
	return CardType_KingBomb
}

var File_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto protoreflect.FileDescriptor

var file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDesc = []byte{
	0x0a, 0x37, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x54, 0x77, 0x6f, 0x4f, 0x6e, 0x4f, 0x6e,
	0x65, 0x2f, 0x4c, 0x4c, 0x4f, 0x6e, 0x65, 0x42, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2f, 0x74, 0x77, 0x6f, 0x6f, 0x6e,
	0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f,
	0x6e, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x43, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x45, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f,
	0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x33, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x12, 0x52, 0x6f, 0x62, 0x4c, 0x61,
	0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x6f,
	0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x52,
	0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x57,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x57,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x4c, 0x61, 0x73,
	0x74, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xc8, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x3d, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f,
	0x6e, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x0e, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f,
	0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52,
	0x09, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x07, 0x46, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x46, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x77, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x4f, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x72, 0x72, 0x22, 0x6c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d,
	0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x6f, 0x6f,
	0x6d, 0x48, 0x61, 0x73, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77,
	0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65,
	0x72, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0x49, 0x0a, 0x0f, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x52, 0x6f,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72,
	0x72, 0x22, 0x2d, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x99, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x7d, 0x0a, 0x19,
	0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e,
	0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x02, 0x0a, 0x1a,
	0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f,
	0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x4e,
	0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x49,
	0x6e, 0x74, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x6e, 0x74, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f,
	0x6e, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x22, 0xf7, 0x09, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x01, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x0c,
	0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x47, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x15, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f,
	0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x03, 0x52, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x04, 0x52, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0xbd,
	0x02, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x4c, 0x61, 0x6e, 0x64,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x46, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x46, 0x61, 0x72,
	0x6d, 0x65, 0x72, 0x31, 0x12, 0x3d, 0x0a, 0x07, 0x46, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x46, 0x61, 0x72, 0x6d,
	0x65, 0x72, 0x32, 0x12, 0x35, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x70,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x70, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x1a, 0x82,
	0x01, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x2f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72,
	0x72, 0x22, 0x31, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f,
	0x6e, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x4e,
	0x65, 0x78, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x4c,
	0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x0e, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x4b, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74,
	0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x2a, 0x44, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e,
	0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x02, 0x2a, 0x29, 0x0a,
	0x13, 0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x6f, 0x62, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x6f, 0x52, 0x6f, 0x62, 0x10, 0x01, 0x2a, 0x27, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x10,
	0x01, 0x2a, 0x91, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x6f, 0x75, 0x72, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x69, 0x78,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x69, 0x67, 0x68, 0x74, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x69, 0x6e, 0x65,
	0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x65, 0x6e, 0x10, 0x07, 0x12, 0x05, 0x0a, 0x01, 0x4a,
	0x10, 0x08, 0x12, 0x05, 0x0a, 0x01, 0x51, 0x10, 0x09, 0x12, 0x05, 0x0a, 0x01, 0x4b, 0x10, 0x0a,
	0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x77, 0x6f, 0x10, 0x0c,
	0x12, 0x09, 0x0a, 0x05, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x67, 0x10, 0x0e, 0x2a, 0xa3, 0x02, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6d, 0x62, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10,
	0x05, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6d, 0x62, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x6f, 0x75, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x77, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6f, 0x75, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x77,
	0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x09, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x10,
	0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x69, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x77, 0x6f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x0c,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x69, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x77, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x0d, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x64, 0x2a, 0x96, 0x04, 0x0a, 0x06,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x75,
	0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x6f,
	0x6f, 0x6d, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x52, 0x6f, 0x62, 0x4c, 0x61,
	0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x77, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x43, 0x6f, 0x69, 0x6e, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x62, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x0e, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x45,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x4e,
	0x45, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x45, 0x4c, 0x61, 0x73,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x12, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x41, 0x6e, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x54, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x10, 0x15, 0x2a, 0x21, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x61, 0x72, 0x6d, 0x65, 0x72, 0x10, 0x01, 0x32, 0xe7, 0x08, 0x0a, 0x08, 0x54, 0x77, 0x6f, 0x4f,
	0x6e, 0x4f, 0x6e, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73,
	0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x29, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77,
	0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f,
	0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74,
	0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x2e, 0x73, 0x75, 0x73,
	0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f,
	0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f,
	0x6e, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x27, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f,
	0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2a, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77,
	0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f,
	0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x28, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x75,
	0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f,
	0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x28, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x69,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77,
	0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x29, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x52,
	0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x6f, 0x62, 0x4c,
	0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e,
	0x52, 0x6f, 0x62, 0x4c, 0x61, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x73,
	0x75, 0x73, 0x75, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77,
	0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x75, 0x73, 0x75, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x74, 0x77, 0x6f, 0x6f, 0x6e, 0x6f, 0x6e, 0x65,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x11, 0x5a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x77, 0x6f, 0x6f,
	0x6e, 0x6f, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescOnce sync.Once
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescData = file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDesc
)

func file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescGZIP() []byte {
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescOnce.Do(func() {
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescData)
	})
	return file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDescData
}

var file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_goTypes = []any{
	(RoomStage)(0),                                     // 0: susubot.plugin.twoonone.RoomStage
	(RobLandownerActions)(0),                           // 1: susubot.plugin.twoonone.RobLandownerActions
	(SendCardActions)(0),                               // 2: susubot.plugin.twoonone.SendCardActions
	(Card)(0),                                          // 3: susubot.plugin.twoonone.Card
	(CardType)(0),                                      // 4: susubot.plugin.twoonone.CardType
	(Errors)(0),                                        // 5: susubot.plugin.twoonone.Errors
	(Role)(0),                                          // 6: susubot.plugin.twoonone.Role
	(*SendCard)(nil),                                   // 7: susubot.plugin.twoonone.SendCard
	(*PlayerInfo)(nil),                                 // 8: susubot.plugin.twoonone.PlayerInfo
	(*PlayerTableInfo)(nil),                            // 9: susubot.plugin.twoonone.PlayerTableInfo
	(*PlayerAccountInfo)(nil),                          // 10: susubot.plugin.twoonone.PlayerAccountInfo
	(*RoomInfo)(nil),                                   // 11: susubot.plugin.twoonone.RoomInfo
	(*Empty)(nil),                                      // 12: susubot.plugin.twoonone.Empty
	(*BasicResponse)(nil),                              // 13: susubot.plugin.twoonone.BasicResponse
	(*GetRoomRequest)(nil),                             // 14: susubot.plugin.twoonone.GetRoomRequest
	(*GetRoomResponse)(nil),                            // 15: susubot.plugin.twoonone.GetRoomResponse
	(*CreateRoomRequest)(nil),                          // 16: susubot.plugin.twoonone.CreateRoomRequest
	(*CreateRoomResponse)(nil),                         // 17: susubot.plugin.twoonone.CreateRoomResponse
	(*JoinRoomRequest)(nil),                            // 18: susubot.plugin.twoonone.JoinRoomRequest
	(*JoinRoomResponse)(nil),                           // 19: susubot.plugin.twoonone.JoinRoomResponse
	(*ExitRoomRequest)(nil),                            // 20: susubot.plugin.twoonone.ExitRoomRequest
	(*ExitRoomResponse)(nil),                           // 21: susubot.plugin.twoonone.ExitRoomResponse
	(*RobLandownerActionRequest)(nil),                  // 22: susubot.plugin.twoonone.RobLandownerActionRequest
	(*RobLandownerActionResponse)(nil),                 // 23: susubot.plugin.twoonone.RobLandownerActionResponse
	(*SendCardRequest)(nil),                            // 24: susubot.plugin.twoonone.SendCardRequest
	(*SendCardResponse)(nil),                           // 25: susubot.plugin.twoonone.SendCardResponse
	(*CreateAccountRequest)(nil),                       // 26: susubot.plugin.twoonone.CreateAccountRequest
	(*GetAccountRequest)(nil),                          // 27: susubot.plugin.twoonone.GetAccountRequest
	(*GetAccountResponse)(nil),                         // 28: susubot.plugin.twoonone.GetAccountResponse
	(*GetDailyCoinRequest)(nil),                        // 29: susubot.plugin.twoonone.GetDailyCoinRequest
	(*StartRoomRequest)(nil),                           // 30: susubot.plugin.twoonone.StartRoomRequest
	(*StartRoomResponse)(nil),                          // 31: susubot.plugin.twoonone.StartRoomResponse
	(*GetRoomsResponse)(nil),                           // 32: susubot.plugin.twoonone.GetRoomsResponse
	(*SendCardResponse_GameFinishEvent)(nil),           // 33: susubot.plugin.twoonone.SendCardResponse.GameFinishEvent
	(*SendCardResponse_SenderCardTypeNoticeEvent)(nil), // 34: susubot.plugin.twoonone.SendCardResponse.SenderCardTypeNoticeEvent
}
var file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_depIdxs = []int32{
	8,  // 0: susubot.plugin.twoonone.SendCard.SenderInfo:type_name -> susubot.plugin.twoonone.PlayerInfo
	3,  // 1: susubot.plugin.twoonone.SendCard.SendCards:type_name -> susubot.plugin.twoonone.Card
	4,  // 2: susubot.plugin.twoonone.SendCard.SendCardType:type_name -> susubot.plugin.twoonone.CardType
	10, // 3: susubot.plugin.twoonone.PlayerInfo.AccountInfo:type_name -> susubot.plugin.twoonone.PlayerAccountInfo
	9,  // 4: susubot.plugin.twoonone.PlayerInfo.TableInfo:type_name -> susubot.plugin.twoonone.PlayerTableInfo
	3,  // 5: susubot.plugin.twoonone.PlayerTableInfo.Cards:type_name -> susubot.plugin.twoonone.Card
	1,  // 6: susubot.plugin.twoonone.PlayerTableInfo.RobLandownerAction:type_name -> susubot.plugin.twoonone.RobLandownerActions
	8,  // 7: susubot.plugin.twoonone.RoomInfo.Players:type_name -> susubot.plugin.twoonone.PlayerInfo
	0,  // 8: susubot.plugin.twoonone.RoomInfo.Stage:type_name -> susubot.plugin.twoonone.RoomStage
	7,  // 9: susubot.plugin.twoonone.RoomInfo.CardPool:type_name -> susubot.plugin.twoonone.SendCard
	8,  // 10: susubot.plugin.twoonone.RoomInfo.OperatorNow:type_name -> susubot.plugin.twoonone.PlayerInfo
	3,  // 11: susubot.plugin.twoonone.RoomInfo.LandownerCards:type_name -> susubot.plugin.twoonone.Card
	8,  // 12: susubot.plugin.twoonone.RoomInfo.Landowner:type_name -> susubot.plugin.twoonone.PlayerInfo
	8,  // 13: susubot.plugin.twoonone.RoomInfo.Farmers:type_name -> susubot.plugin.twoonone.PlayerInfo
	5,  // 14: susubot.plugin.twoonone.BasicResponse.err:type_name -> susubot.plugin.twoonone.Errors
	5,  // 15: susubot.plugin.twoonone.GetRoomResponse.err:type_name -> susubot.plugin.twoonone.Errors
	11, // 16: susubot.plugin.twoonone.GetRoomResponse.Info:type_name -> susubot.plugin.twoonone.RoomInfo
	5,  // 17: susubot.plugin.twoonone.JoinRoomResponse.err:type_name -> susubot.plugin.twoonone.Errors
	8,  // 18: susubot.plugin.twoonone.JoinRoomResponse.RoomPlayers:type_name -> susubot.plugin.twoonone.PlayerInfo
	5,  // 19: susubot.plugin.twoonone.ExitRoomResponse.err:type_name -> susubot.plugin.twoonone.Errors
	8,  // 20: susubot.plugin.twoonone.ExitRoomResponse.RoomPlayers:type_name -> susubot.plugin.twoonone.PlayerInfo
	1,  // 21: susubot.plugin.twoonone.RobLandownerActionRequest.Action:type_name -> susubot.plugin.twoonone.RobLandownerActions
	5,  // 22: susubot.plugin.twoonone.RobLandownerActionResponse.err:type_name -> susubot.plugin.twoonone.Errors
	8,  // 23: susubot.plugin.twoonone.RobLandownerActionResponse.NextOperator:type_name -> susubot.plugin.twoonone.PlayerInfo
	2,  // 24: susubot.plugin.twoonone.SendCardRequest.Action:type_name -> susubot.plugin.twoonone.SendCardActions
	3,  // 25: susubot.plugin.twoonone.SendCardRequest.SendCards:type_name -> susubot.plugin.twoonone.Card
	5,  // 26: susubot.plugin.twoonone.SendCardResponse.err:type_name -> susubot.plugin.twoonone.Errors
	2,  // 27: susubot.plugin.twoonone.SendCardResponse.SenderAction:type_name -> susubot.plugin.twoonone.SendCardActions
	3,  // 28: susubot.plugin.twoonone.SendCardResponse.SenderCard:type_name -> susubot.plugin.twoonone.Card
	8,  // 29: susubot.plugin.twoonone.SendCardResponse.NextOperator:type_name -> susubot.plugin.twoonone.PlayerInfo
	34, // 30: susubot.plugin.twoonone.SendCardResponse.SenderCardTypeNoticeE:type_name -> susubot.plugin.twoonone.SendCardResponse.SenderCardTypeNoticeEvent
	33, // 31: susubot.plugin.twoonone.SendCardResponse.GameFinishE:type_name -> susubot.plugin.twoonone.SendCardResponse.GameFinishEvent
	5,  // 32: susubot.plugin.twoonone.GetAccountResponse.err:type_name -> susubot.plugin.twoonone.Errors
	8,  // 33: susubot.plugin.twoonone.GetAccountResponse.Info:type_name -> susubot.plugin.twoonone.PlayerInfo
	5,  // 34: susubot.plugin.twoonone.StartRoomResponse.err:type_name -> susubot.plugin.twoonone.Errors
	8,  // 35: susubot.plugin.twoonone.StartRoomResponse.NextOperator:type_name -> susubot.plugin.twoonone.PlayerInfo
	3,  // 36: susubot.plugin.twoonone.StartRoomResponse.LandownerCards:type_name -> susubot.plugin.twoonone.Card
	11, // 37: susubot.plugin.twoonone.GetRoomsResponse.Rooms:type_name -> susubot.plugin.twoonone.RoomInfo
	8,  // 38: susubot.plugin.twoonone.SendCardResponse.GameFinishEvent.Landowner:type_name -> susubot.plugin.twoonone.PlayerInfo
	8,  // 39: susubot.plugin.twoonone.SendCardResponse.GameFinishEvent.Farmer1:type_name -> susubot.plugin.twoonone.PlayerInfo
	8,  // 40: susubot.plugin.twoonone.SendCardResponse.GameFinishEvent.Farmer2:type_name -> susubot.plugin.twoonone.PlayerInfo
	6,  // 41: susubot.plugin.twoonone.SendCardResponse.GameFinishEvent.Winner:type_name -> susubot.plugin.twoonone.Role
	4,  // 42: susubot.plugin.twoonone.SendCardResponse.SenderCardTypeNoticeEvent.SenderCardType:type_name -> susubot.plugin.twoonone.CardType
	12, // 43: susubot.plugin.twoonone.TwoOnOne.GetRooms:input_type -> susubot.plugin.twoonone.Empty
	26, // 44: susubot.plugin.twoonone.TwoOnOne.CreateAccount:input_type -> susubot.plugin.twoonone.CreateAccountRequest
	27, // 45: susubot.plugin.twoonone.TwoOnOne.GetAccount:input_type -> susubot.plugin.twoonone.GetAccountRequest
	29, // 46: susubot.plugin.twoonone.TwoOnOne.GetDailyCoin:input_type -> susubot.plugin.twoonone.GetDailyCoinRequest
	14, // 47: susubot.plugin.twoonone.TwoOnOne.GetRoom:input_type -> susubot.plugin.twoonone.GetRoomRequest
	16, // 48: susubot.plugin.twoonone.TwoOnOne.CreateRoom:input_type -> susubot.plugin.twoonone.CreateRoomRequest
	18, // 49: susubot.plugin.twoonone.TwoOnOne.JoinRoom:input_type -> susubot.plugin.twoonone.JoinRoomRequest
	20, // 50: susubot.plugin.twoonone.TwoOnOne.ExitRoom:input_type -> susubot.plugin.twoonone.ExitRoomRequest
	30, // 51: susubot.plugin.twoonone.TwoOnOne.StartRoom:input_type -> susubot.plugin.twoonone.StartRoomRequest
	22, // 52: susubot.plugin.twoonone.TwoOnOne.RobLandownerAction:input_type -> susubot.plugin.twoonone.RobLandownerActionRequest
	24, // 53: susubot.plugin.twoonone.TwoOnOne.SendCardAction:input_type -> susubot.plugin.twoonone.SendCardRequest
	32, // 54: susubot.plugin.twoonone.TwoOnOne.GetRooms:output_type -> susubot.plugin.twoonone.GetRoomsResponse
	13, // 55: susubot.plugin.twoonone.TwoOnOne.CreateAccount:output_type -> susubot.plugin.twoonone.BasicResponse
	28, // 56: susubot.plugin.twoonone.TwoOnOne.GetAccount:output_type -> susubot.plugin.twoonone.GetAccountResponse
	13, // 57: susubot.plugin.twoonone.TwoOnOne.GetDailyCoin:output_type -> susubot.plugin.twoonone.BasicResponse
	15, // 58: susubot.plugin.twoonone.TwoOnOne.GetRoom:output_type -> susubot.plugin.twoonone.GetRoomResponse
	17, // 59: susubot.plugin.twoonone.TwoOnOne.CreateRoom:output_type -> susubot.plugin.twoonone.CreateRoomResponse
	19, // 60: susubot.plugin.twoonone.TwoOnOne.JoinRoom:output_type -> susubot.plugin.twoonone.JoinRoomResponse
	21, // 61: susubot.plugin.twoonone.TwoOnOne.ExitRoom:output_type -> susubot.plugin.twoonone.ExitRoomResponse
	31, // 62: susubot.plugin.twoonone.TwoOnOne.StartRoom:output_type -> susubot.plugin.twoonone.StartRoomResponse
	23, // 63: susubot.plugin.twoonone.TwoOnOne.RobLandownerAction:output_type -> susubot.plugin.twoonone.RobLandownerActionResponse
	25, // 64: susubot.plugin.twoonone.TwoOnOne.SendCardAction:output_type -> susubot.plugin.twoonone.SendCardResponse
	54, // [54:65] is the sub-list for method output_type
	43, // [43:54] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_init() }
func file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_init() {
	if File_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SendCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerTableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*JoinRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*JoinRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ExitRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ExitRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RobLandownerActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RobLandownerActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SendCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SendCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetDailyCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*StartRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*StartRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoomsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SendCardResponse_GameFinishEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SendCardResponse_SenderCardTypeNoticeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[1].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[2].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[4].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[6].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[7].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[8].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[12].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[14].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[16].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[18].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[21].OneofWrappers = []any{}
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes[24].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_goTypes,
		DependencyIndexes: file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_depIdxs,
		EnumInfos:         file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_enumTypes,
		MessageInfos:      file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_msgTypes,
	}.Build()
	File_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto = out.File
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_rawDesc = nil
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_goTypes = nil
	file_plugin_TwoOnOne_LLOneBot_protos_twoonone_twoonone_proto_depIdxs = nil
}
