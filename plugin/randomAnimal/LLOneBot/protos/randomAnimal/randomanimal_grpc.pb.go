// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: plugin/randomanimal/LLOneBot/protos/randomanimal/randomanimal.proto

package randomanimal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RandomAnimal_GetDog_FullMethodName        = "/susubot.plugin.randomanimal.randomAnimal/GetDog"
	RandomAnimal_GetFox_FullMethodName        = "/susubot.plugin.randomanimal.randomAnimal/GetFox"
	RandomAnimal_GetDuck_FullMethodName       = "/susubot.plugin.randomanimal.randomAnimal/GetDuck"
	RandomAnimal_GetCat_FullMethodName        = "/susubot.plugin.randomanimal.randomAnimal/GetCat"
	RandomAnimal_GetChiken_CXK_FullMethodName = "/susubot.plugin.randomanimal.randomAnimal/GetChiken_CXK"
)

// RandomAnimalClient is the client API for RandomAnimal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomAnimalClient interface {
	GetDog(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetFox(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetDuck(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetCat(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	GetChiken_CXK(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
}

type randomAnimalClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomAnimalClient(cc grpc.ClientConnInterface) RandomAnimalClient {
	return &randomAnimalClient{cc}
}

func (c *randomAnimalClient) GetDog(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, RandomAnimal_GetDog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomAnimalClient) GetFox(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, RandomAnimal_GetFox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomAnimalClient) GetDuck(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, RandomAnimal_GetDuck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomAnimalClient) GetCat(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, RandomAnimal_GetCat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomAnimalClient) GetChiken_CXK(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, RandomAnimal_GetChiken_CXK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomAnimalServer is the server API for RandomAnimal service.
// All implementations must embed UnimplementedRandomAnimalServer
// for forward compatibility.
type RandomAnimalServer interface {
	GetDog(context.Context, *BasicRequest) (*BasicResponse, error)
	GetFox(context.Context, *BasicRequest) (*BasicResponse, error)
	GetDuck(context.Context, *BasicRequest) (*BasicResponse, error)
	GetCat(context.Context, *BasicRequest) (*BasicResponse, error)
	GetChiken_CXK(context.Context, *BasicRequest) (*BasicResponse, error)
	mustEmbedUnimplementedRandomAnimalServer()
}

// UnimplementedRandomAnimalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRandomAnimalServer struct{}

func (UnimplementedRandomAnimalServer) GetDog(context.Context, *BasicRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDog not implemented")
}
func (UnimplementedRandomAnimalServer) GetFox(context.Context, *BasicRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFox not implemented")
}
func (UnimplementedRandomAnimalServer) GetDuck(context.Context, *BasicRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDuck not implemented")
}
func (UnimplementedRandomAnimalServer) GetCat(context.Context, *BasicRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCat not implemented")
}
func (UnimplementedRandomAnimalServer) GetChiken_CXK(context.Context, *BasicRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChiken_CXK not implemented")
}
func (UnimplementedRandomAnimalServer) mustEmbedUnimplementedRandomAnimalServer() {}
func (UnimplementedRandomAnimalServer) testEmbeddedByValue()                      {}

// UnsafeRandomAnimalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomAnimalServer will
// result in compilation errors.
type UnsafeRandomAnimalServer interface {
	mustEmbedUnimplementedRandomAnimalServer()
}

func RegisterRandomAnimalServer(s grpc.ServiceRegistrar, srv RandomAnimalServer) {
	// If the following call pancis, it indicates UnimplementedRandomAnimalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RandomAnimal_ServiceDesc, srv)
}

func _RandomAnimal_GetDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomAnimalServer).GetDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RandomAnimal_GetDog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomAnimalServer).GetDog(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomAnimal_GetFox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomAnimalServer).GetFox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RandomAnimal_GetFox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomAnimalServer).GetFox(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomAnimal_GetDuck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomAnimalServer).GetDuck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RandomAnimal_GetDuck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomAnimalServer).GetDuck(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomAnimal_GetCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomAnimalServer).GetCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RandomAnimal_GetCat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomAnimalServer).GetCat(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomAnimal_GetChiken_CXK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomAnimalServer).GetChiken_CXK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RandomAnimal_GetChiken_CXK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomAnimalServer).GetChiken_CXK(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RandomAnimal_ServiceDesc is the grpc.ServiceDesc for RandomAnimal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomAnimal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "susubot.plugin.randomanimal.randomAnimal",
	HandlerType: (*RandomAnimalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDog",
			Handler:    _RandomAnimal_GetDog_Handler,
		},
		{
			MethodName: "GetFox",
			Handler:    _RandomAnimal_GetFox_Handler,
		},
		{
			MethodName: "GetDuck",
			Handler:    _RandomAnimal_GetDuck_Handler,
		},
		{
			MethodName: "GetCat",
			Handler:    _RandomAnimal_GetCat_Handler,
		},
		{
			MethodName: "GetChiken_CXK",
			Handler:    _RandomAnimal_GetChiken_CXK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/randomanimal/LLOneBot/protos/randomanimal/randomanimal.proto",
}
