// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: plugin/randomfortune/LLOneBot/protos/randomfortune/randomfortune.proto

package randomfortune

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RandomFortune_GetFortune_FullMethodName = "/susubot.plugin.randomfortune.randomFortune/GetFortune"
)

// RandomFortuneClient is the client API for RandomFortune service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomFortuneClient interface {
	GetFortune(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
}

type randomFortuneClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomFortuneClient(cc grpc.ClientConnInterface) RandomFortuneClient {
	return &randomFortuneClient{cc}
}

func (c *randomFortuneClient) GetFortune(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BasicResponse)
	err := c.cc.Invoke(ctx, RandomFortune_GetFortune_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomFortuneServer is the server API for RandomFortune service.
// All implementations must embed UnimplementedRandomFortuneServer
// for forward compatibility.
type RandomFortuneServer interface {
	GetFortune(context.Context, *BasicRequest) (*BasicResponse, error)
	mustEmbedUnimplementedRandomFortuneServer()
}

// UnimplementedRandomFortuneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRandomFortuneServer struct{}

func (UnimplementedRandomFortuneServer) GetFortune(context.Context, *BasicRequest) (*BasicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFortune not implemented")
}
func (UnimplementedRandomFortuneServer) mustEmbedUnimplementedRandomFortuneServer() {}
func (UnimplementedRandomFortuneServer) testEmbeddedByValue()                       {}

// UnsafeRandomFortuneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomFortuneServer will
// result in compilation errors.
type UnsafeRandomFortuneServer interface {
	mustEmbedUnimplementedRandomFortuneServer()
}

func RegisterRandomFortuneServer(s grpc.ServiceRegistrar, srv RandomFortuneServer) {
	// If the following call pancis, it indicates UnimplementedRandomFortuneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RandomFortune_ServiceDesc, srv)
}

func _RandomFortune_GetFortune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomFortuneServer).GetFortune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RandomFortune_GetFortune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomFortuneServer).GetFortune(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RandomFortune_ServiceDesc is the grpc.ServiceDesc for RandomFortune service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomFortune_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "susubot.plugin.randomfortune.randomFortune",
	HandlerType: (*RandomFortuneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFortune",
			Handler:    _RandomFortune_GetFortune_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/randomfortune/LLOneBot/protos/randomfortune/randomfortune.proto",
}
