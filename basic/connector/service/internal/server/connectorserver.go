// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: connector.proto

package server

import (
	"context"

	"github.com/nanachi-sh/susubot-code/basic/connector/pkg/protos/connector"
	"github.com/nanachi-sh/susubot-code/basic/connector/service/internal/logic"
	"github.com/nanachi-sh/susubot-code/basic/connector/service/internal/svc"
)

type ConnectorServer struct {
	svcCtx *svc.ServiceContext
	connector.UnimplementedConnectorServer
}

func NewConnectorServer(svcCtx *svc.ServiceContext) *ConnectorServer {
	return &ConnectorServer{
		svcCtx: svcCtx,
	}
}

func (s *ConnectorServer) Connect(ctx context.Context, in *connector.ConnectRequest) (*connector.ConnectResponse, error) {
	l := logic.NewConnectLogic(ctx, s.svcCtx)
	return l.Connect(in)
}

func (s *ConnectorServer) Read(in *connector.Empty, stream connector.Connector_ReadServer) error {
	l := logic.NewReadLogic(stream.Context(), s.svcCtx)
	return l.Read(in, stream)
}

func (s *ConnectorServer) Write(ctx context.Context, in *connector.WriteRequest) (*connector.BasicResponse, error) {
	l := logic.NewWriteLogic(ctx, s.svcCtx)
	return l.Write(in)
}

func (s *ConnectorServer) Close(ctx context.Context, in *connector.Empty) (*connector.BasicResponse, error) {
	l := logic.NewCloseLogic(ctx, s.svcCtx)
	return l.Close(in)
}
