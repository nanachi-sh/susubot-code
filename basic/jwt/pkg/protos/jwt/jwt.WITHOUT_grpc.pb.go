// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/protos/jwt/jwt.WITHOUT.proto

package jwt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Jwt_Uno_Sign_FullMethodName     = "/susubot.basic.jwt.jwt/Uno_Sign"
	Jwt_Uno_Register_FullMethodName = "/susubot.basic.jwt.jwt/Uno_Register"
)

// JwtClient is the client API for Jwt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JwtClient interface {
	Uno_Sign(ctx context.Context, in *Uno_SignRequest, opts ...grpc.CallOption) (*Uno_SignResponse, error)
	Uno_Register(ctx context.Context, in *Uno_RegisterRequest, opts ...grpc.CallOption) (*Uno_RegisterResponse, error)
}

type jwtClient struct {
	cc grpc.ClientConnInterface
}

func NewJwtClient(cc grpc.ClientConnInterface) JwtClient {
	return &jwtClient{cc}
}

func (c *jwtClient) Uno_Sign(ctx context.Context, in *Uno_SignRequest, opts ...grpc.CallOption) (*Uno_SignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Uno_SignResponse)
	err := c.cc.Invoke(ctx, Jwt_Uno_Sign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtClient) Uno_Register(ctx context.Context, in *Uno_RegisterRequest, opts ...grpc.CallOption) (*Uno_RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Uno_RegisterResponse)
	err := c.cc.Invoke(ctx, Jwt_Uno_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwtServer is the server API for Jwt service.
// All implementations must embed UnimplementedJwtServer
// for forward compatibility.
type JwtServer interface {
	Uno_Sign(context.Context, *Uno_SignRequest) (*Uno_SignResponse, error)
	Uno_Register(context.Context, *Uno_RegisterRequest) (*Uno_RegisterResponse, error)
	mustEmbedUnimplementedJwtServer()
}

// UnimplementedJwtServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJwtServer struct{}

func (UnimplementedJwtServer) Uno_Sign(context.Context, *Uno_SignRequest) (*Uno_SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uno_Sign not implemented")
}
func (UnimplementedJwtServer) Uno_Register(context.Context, *Uno_RegisterRequest) (*Uno_RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uno_Register not implemented")
}
func (UnimplementedJwtServer) mustEmbedUnimplementedJwtServer() {}
func (UnimplementedJwtServer) testEmbeddedByValue()             {}

// UnsafeJwtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwtServer will
// result in compilation errors.
type UnsafeJwtServer interface {
	mustEmbedUnimplementedJwtServer()
}

func RegisterJwtServer(s grpc.ServiceRegistrar, srv JwtServer) {
	// If the following call pancis, it indicates UnimplementedJwtServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Jwt_ServiceDesc, srv)
}

func _Jwt_Uno_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uno_SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtServer).Uno_Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jwt_Uno_Sign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtServer).Uno_Sign(ctx, req.(*Uno_SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jwt_Uno_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uno_RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtServer).Uno_Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jwt_Uno_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtServer).Uno_Register(ctx, req.(*Uno_RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jwt_ServiceDesc is the grpc.ServiceDesc for Jwt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jwt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "susubot.basic.jwt.jwt",
	HandlerType: (*JwtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Uno_Sign",
			Handler:    _Jwt_Uno_Sign_Handler,
		},
		{
			MethodName: "Uno_Register",
			Handler:    _Jwt_Uno_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protos/jwt/jwt.WITHOUT.proto",
}
