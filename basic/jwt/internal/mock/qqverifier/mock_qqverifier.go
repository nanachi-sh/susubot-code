// Code generated by MockGen. DO NOT EDIT.
// Source: caller/qqverifier/qqverifier.go
//
// Generated by this command:
//
//	mockgen -source=caller/qqverifier/qqverifier.go -destination=mock/qqverifier/mock_qqverifier.go
//

// Package mock_qqverifierclient is a generated GoMock package.
package mock_qqverifierclient

import (
	context "context"
	reflect "reflect"

	qqverifierclient "github.com/nanachi-sh/susubot-code/basic/jwt/internal/caller/qqverifier"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockQqverifier is a mock of Qqverifier interface.
type MockQqverifier struct {
	ctrl     *gomock.Controller
	recorder *MockQqverifierMockRecorder
	isgomock struct{}
}

// MockQqverifierMockRecorder is the mock recorder for MockQqverifier.
type MockQqverifierMockRecorder struct {
	mock *MockQqverifier
}

// NewMockQqverifier creates a new mock instance.
func NewMockQqverifier(ctrl *gomock.Controller) *MockQqverifier {
	mock := &MockQqverifier{ctrl: ctrl}
	mock.recorder = &MockQqverifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQqverifier) EXPECT() *MockQqverifierMockRecorder {
	return m.recorder
}

// NewVerify mocks base method.
func (m *MockQqverifier) NewVerify(ctx context.Context, in *qqverifierclient.NewVerifyRequest, opts ...grpc.CallOption) (*qqverifierclient.NewVerifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewVerify", varargs...)
	ret0, _ := ret[0].(*qqverifierclient.NewVerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewVerify indicates an expected call of NewVerify.
func (mr *MockQqverifierMockRecorder) NewVerify(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVerify", reflect.TypeOf((*MockQqverifier)(nil).NewVerify), varargs...)
}

// Verified mocks base method.
func (m *MockQqverifier) Verified(ctx context.Context, in *qqverifierclient.VerifiedRequest, opts ...grpc.CallOption) (*qqverifierclient.VerifiedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Verified", varargs...)
	ret0, _ := ret[0].(*qqverifierclient.VerifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verified indicates an expected call of Verified.
func (mr *MockQqverifierMockRecorder) Verified(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verified", reflect.TypeOf((*MockQqverifier)(nil).Verified), varargs...)
}

// Verify mocks base method.
func (m *MockQqverifier) Verify(ctx context.Context, in *qqverifierclient.VerifyRequest, opts ...grpc.CallOption) (*qqverifierclient.VerifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Verify", varargs...)
	ret0, _ := ret[0].(*qqverifierclient.VerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockQqverifierMockRecorder) Verify(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockQqverifier)(nil).Verify), varargs...)
}
