// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: request.proto

package requesthandler

import (
	"context"

	"github.com/nanachi-sh/susubot-code/basic/verifier/pkg/protos/handler/request"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BasicRequest              = request.BasicRequest
	BasicResponse             = request.BasicResponse
	GetFriendInfoRequest      = request.GetFriendInfoRequest
	GetGroupInfoRequest       = request.GetGroupInfoRequest
	GetGroupMemberInfoRequest = request.GetGroupMemberInfoRequest
	GetMessageRequest         = request.GetMessageRequest
	MessageChainObject        = request.MessageChainObject
	MessageChain_At           = request.MessageChain_At
	MessageChain_Image        = request.MessageChain_Image
	MessageChain_Reply        = request.MessageChain_Reply
	MessageChain_Text         = request.MessageChain_Text
	MessageChain_Video        = request.MessageChain_Video
	MessageChain_Voice        = request.MessageChain_Voice
	MessageRecallRequest      = request.MessageRecallRequest
	SendFriendMessageRequest  = request.SendFriendMessageRequest
	SendGroupMessageRequest   = request.SendGroupMessageRequest

	RequestHandler interface {
		SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*BasicResponse, error)
		SendFriendMessage(ctx context.Context, in *SendFriendMessageRequest, opts ...grpc.CallOption) (*BasicResponse, error)
		MessageRecall(ctx context.Context, in *MessageRecallRequest, opts ...grpc.CallOption) (*BasicResponse, error)
		GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*BasicResponse, error)
		GetGroupInfo(ctx context.Context, in *GetGroupInfoRequest, opts ...grpc.CallOption) (*BasicResponse, error)
		GetGroupMemberInfo(ctx context.Context, in *GetGroupMemberInfoRequest, opts ...grpc.CallOption) (*BasicResponse, error)
		GetFriendList(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error)
		GetFriendInfo(ctx context.Context, in *GetFriendInfoRequest, opts ...grpc.CallOption) (*BasicResponse, error)
	}

	defaultRequestHandler struct {
		cli zrpc.Client
	}
)

func NewRequestHandler(cli zrpc.Client) RequestHandler {
	return &defaultRequestHandler{
		cli: cli,
	}
}

func (m *defaultRequestHandler) SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	client := request.NewRequestHandlerClient(m.cli.Conn())
	return client.SendGroupMessage(ctx, in, opts...)
}

func (m *defaultRequestHandler) SendFriendMessage(ctx context.Context, in *SendFriendMessageRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	client := request.NewRequestHandlerClient(m.cli.Conn())
	return client.SendFriendMessage(ctx, in, opts...)
}

func (m *defaultRequestHandler) MessageRecall(ctx context.Context, in *MessageRecallRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	client := request.NewRequestHandlerClient(m.cli.Conn())
	return client.MessageRecall(ctx, in, opts...)
}

func (m *defaultRequestHandler) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	client := request.NewRequestHandlerClient(m.cli.Conn())
	return client.GetMessage(ctx, in, opts...)
}

func (m *defaultRequestHandler) GetGroupInfo(ctx context.Context, in *GetGroupInfoRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	client := request.NewRequestHandlerClient(m.cli.Conn())
	return client.GetGroupInfo(ctx, in, opts...)
}

func (m *defaultRequestHandler) GetGroupMemberInfo(ctx context.Context, in *GetGroupMemberInfoRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	client := request.NewRequestHandlerClient(m.cli.Conn())
	return client.GetGroupMemberInfo(ctx, in, opts...)
}

func (m *defaultRequestHandler) GetFriendList(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	client := request.NewRequestHandlerClient(m.cli.Conn())
	return client.GetFriendList(ctx, in, opts...)
}

func (m *defaultRequestHandler) GetFriendInfo(ctx context.Context, in *GetFriendInfoRequest, opts ...grpc.CallOption) (*BasicResponse, error) {
	client := request.NewRequestHandlerClient(m.cli.Conn())
	return client.GetFriendInfo(ctx, in, opts...)
}
