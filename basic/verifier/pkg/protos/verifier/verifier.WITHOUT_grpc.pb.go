// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pkg/protos/verifier/verifier.WITHOUT.proto

package verifier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Verifier_QQ_NewVerify_FullMethodName = "/susubot.basic.verifier.verifier/QQ_NewVerify"
	Verifier_QQ_Verify_FullMethodName    = "/susubot.basic.verifier.verifier/QQ_Verify"
	Verifier_QQ_Verified_FullMethodName  = "/susubot.basic.verifier.verifier/QQ_Verified"
)

// VerifierClient is the client API for Verifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifierClient interface {
	QQ_NewVerify(ctx context.Context, in *QQ_NewVerifyRequest, opts ...grpc.CallOption) (*QQ_NewVerifyResponse, error)
	QQ_Verify(ctx context.Context, in *QQ_VerifyRequest, opts ...grpc.CallOption) (*QQ_VerifyResponse, error)
	QQ_Verified(ctx context.Context, in *QQ_VerifiedRequest, opts ...grpc.CallOption) (*QQ_VerifiedResponse, error)
}

type verifierClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifierClient(cc grpc.ClientConnInterface) VerifierClient {
	return &verifierClient{cc}
}

func (c *verifierClient) QQ_NewVerify(ctx context.Context, in *QQ_NewVerifyRequest, opts ...grpc.CallOption) (*QQ_NewVerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QQ_NewVerifyResponse)
	err := c.cc.Invoke(ctx, Verifier_QQ_NewVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierClient) QQ_Verify(ctx context.Context, in *QQ_VerifyRequest, opts ...grpc.CallOption) (*QQ_VerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QQ_VerifyResponse)
	err := c.cc.Invoke(ctx, Verifier_QQ_Verify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierClient) QQ_Verified(ctx context.Context, in *QQ_VerifiedRequest, opts ...grpc.CallOption) (*QQ_VerifiedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QQ_VerifiedResponse)
	err := c.cc.Invoke(ctx, Verifier_QQ_Verified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifierServer is the server API for Verifier service.
// All implementations must embed UnimplementedVerifierServer
// for forward compatibility.
type VerifierServer interface {
	QQ_NewVerify(context.Context, *QQ_NewVerifyRequest) (*QQ_NewVerifyResponse, error)
	QQ_Verify(context.Context, *QQ_VerifyRequest) (*QQ_VerifyResponse, error)
	QQ_Verified(context.Context, *QQ_VerifiedRequest) (*QQ_VerifiedResponse, error)
	mustEmbedUnimplementedVerifierServer()
}

// UnimplementedVerifierServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVerifierServer struct{}

func (UnimplementedVerifierServer) QQ_NewVerify(context.Context, *QQ_NewVerifyRequest) (*QQ_NewVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QQ_NewVerify not implemented")
}
func (UnimplementedVerifierServer) QQ_Verify(context.Context, *QQ_VerifyRequest) (*QQ_VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QQ_Verify not implemented")
}
func (UnimplementedVerifierServer) QQ_Verified(context.Context, *QQ_VerifiedRequest) (*QQ_VerifiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QQ_Verified not implemented")
}
func (UnimplementedVerifierServer) mustEmbedUnimplementedVerifierServer() {}
func (UnimplementedVerifierServer) testEmbeddedByValue()                  {}

// UnsafeVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifierServer will
// result in compilation errors.
type UnsafeVerifierServer interface {
	mustEmbedUnimplementedVerifierServer()
}

func RegisterVerifierServer(s grpc.ServiceRegistrar, srv VerifierServer) {
	// If the following call pancis, it indicates UnimplementedVerifierServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Verifier_ServiceDesc, srv)
}

func _Verifier_QQ_NewVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QQ_NewVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).QQ_NewVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verifier_QQ_NewVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).QQ_NewVerify(ctx, req.(*QQ_NewVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verifier_QQ_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QQ_VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).QQ_Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verifier_QQ_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).QQ_Verify(ctx, req.(*QQ_VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verifier_QQ_Verified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QQ_VerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).QQ_Verified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verifier_QQ_Verified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).QQ_Verified(ctx, req.(*QQ_VerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Verifier_ServiceDesc is the grpc.ServiceDesc for Verifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Verifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "susubot.basic.verifier.verifier",
	HandlerType: (*VerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QQ_NewVerify",
			Handler:    _Verifier_QQ_NewVerify_Handler,
		},
		{
			MethodName: "QQ_Verify",
			Handler:    _Verifier_QQ_Verify_Handler,
		},
		{
			MethodName: "QQ_Verified",
			Handler:    _Verifier_QQ_Verified_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protos/verifier/verifier.WITHOUT.proto",
}
